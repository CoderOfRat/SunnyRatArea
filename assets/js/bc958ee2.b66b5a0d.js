"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3544],{6191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"golang/go doc/Effective Go","title":"Effective Go","description":"\u58f0\u660e\uff1a\u672c\u6587\u6765\u6e90\uff1abingohuang/effective-go-zh-en\uff0c\u5982\u6d89\u53ca\u7248\u6743\u95ee\u9898\uff0c\u8bf7\u901a\u8fc7 github\u7b80\u4ecb mail \u8054\u7cfb","source":"@site/docs/golang/go doc/Effective Go.md","sourceDirName":"golang/go doc","slug":"/golang/go doc/Effective Go","permalink":"/SunnyRatArea/docs/golang/go doc/Effective Go","draft":false,"unlisted":false,"editUrl":"https://github.com/CoderOfRat/SunnyRatArea/tree/main/docs/golang/go doc/Effective Go.md","tags":[],"version":"current","frontMatter":{"authors":["CoderOfRat"],"date":"2025-04-02T00:00:00.000Z"},"sidebar":"golangSiderbar","previous":{"title":"GoLang \u521d\u89c1","permalink":"/SunnyRatArea/docs/golang/go doc/"}}');var i=t(4848),a=t(8453);const s={authors:["CoderOfRat"],date:new Date("2025-04-02T00:00:00.000Z")},o=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"\u5f15\u8a00",id:"\u5f15\u8a00",level:2},{value:"Examples",id:"examples",level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3},{value:"Formatting",id:"formatting",level:2},{value:"\u683c\u5f0f\u5316",id:"\u683c\u5f0f\u5316",level:2},{value:"Commentary",id:"commentary",level:2},{value:"\u6ce8\u91ca",id:"\u6ce8\u91ca",level:2},{value:"Commentary",id:"commentary-1",level:2},{value:"\u6ce8\u91ca",id:"\u6ce8\u91ca-1",level:2},{value:"Semicolons",id:"semicolons",level:2},{value:"\u5206\u53f7",id:"\u5206\u53f7",level:2},{value:"Control structures",id:"control-structures",level:2},{value:"\u63a7\u5236\u7ed3\u6784",id:"\u63a7\u5236\u7ed3\u6784",level:2},{value:"If",id:"if",level:3},{value:"Redeclaration and reassignment",id:"redeclaration-and-reassignment",level:3},{value:"\u91cd\u65b0\u58f0\u660e\u4e0e\u518d\u6b21\u8d4b\u503c",id:"\u91cd\u65b0\u58f0\u660e\u4e0e\u518d\u6b21\u8d4b\u503c",level:3},{value:"For",id:"for",level:3},{value:"Switch",id:"switch",level:3},{value:"Type switch",id:"type-switch",level:3},{value:"\u7c7b\u578b\u9009\u62e9",id:"\u7c7b\u578b\u9009\u62e9",level:3},{value:"Functions",id:"functions",level:2},{value:"\u51fd\u6570",id:"\u51fd\u6570",level:2},{value:"Multiple return values",id:"multiple-return-values",level:3},{value:"\u591a\u503c\u8fd4\u56de",id:"\u591a\u503c\u8fd4\u56de",level:3},{value:"Named result parameters",id:"named-result-parameters",level:3},{value:"\u53ef\u547d\u540d\u7ed3\u679c\u5f62\u53c2",id:"\u53ef\u547d\u540d\u7ed3\u679c\u5f62\u53c2",level:3},{value:"Defer",id:"defer",level:3},{value:"Data",id:"data",level:2},{value:"\u6570\u636e",id:"\u6570\u636e",level:2},{value:"Allocation with new",id:"allocation-with-new",level:3},{value:"new \u5206\u914d",id:"new-\u5206\u914d",level:3},{value:"Constructors and composite literals",id:"constructors-and-composite-literals",level:3},{value:"\u6784\u9020\u51fd\u6570\u4e0e\u590d\u5408\u5b57\u9762\u91cf",id:"\u6784\u9020\u51fd\u6570\u4e0e\u590d\u5408\u5b57\u9762\u91cf",level:3},{value:"Allocation with make",id:"allocation-with-make",level:3},{value:"make \u5206\u914d",id:"make-\u5206\u914d",level:3},{value:"Arrays",id:"arrays",level:3},{value:"\u6570\u7ec4",id:"\u6570\u7ec4",level:3},{value:"Slices",id:"slices",level:3},{value:"\u5207\u7247",id:"\u5207\u7247",level:3},{value:"Two-dimensional slices",id:"two-dimensional-slices",level:3},{value:"\u4e8c\u7ef4\u5207\u7247",id:"\u4e8c\u7ef4\u5207\u7247",level:3},{value:"Maps",id:"maps",level:3},{value:"\u6620\u5c04",id:"\u6620\u5c04",level:3},{value:"Printing",id:"printing",level:3},{value:"\u6253\u5370",id:"\u6253\u5370",level:3},{value:"Append",id:"append",level:3},{value:"\u8ffd\u52a0",id:"\u8ffd\u52a0",level:3},{value:"Initialization",id:"initialization",level:2},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316",level:2},{value:"Constants",id:"constants",level:3},{value:"\u5e38\u91cf",id:"\u5e38\u91cf",level:3},{value:"Variables",id:"variables",level:3},{value:"\u53d8\u91cf",id:"\u53d8\u91cf",level:3},{value:"The init function",id:"the-init-function",level:3},{value:"init \u51fd\u6570",id:"init-\u51fd\u6570",level:3},{value:"Methods",id:"methods",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2},{value:"Pointers vs. Values",id:"pointers-vs-values",level:3},{value:"\u6307\u9488 vs. \u503c",id:"\u6307\u9488-vs-\u503c",level:3},{value:"Interfaces and other types",id:"interfaces-and-other-types",level:2},{value:"\u63a5\u53e3\u4e0e\u5176\u5b83\u7c7b\u578b",id:"\u63a5\u53e3\u4e0e\u5176\u5b83\u7c7b\u578b",level:2},{value:"\u63a5\u53e3",id:"\u63a5\u53e3",level:3},{value:"Conversions",id:"conversions",level:3},{value:"\u7c7b\u578b\u8f6c\u6362",id:"\u7c7b\u578b\u8f6c\u6362",level:3},{value:"Interface conversions and type assertions",id:"interface-conversions-and-type-assertions",level:3},{value:"\u63a5\u53e3\u8f6c\u6362\u4e0e\u7c7b\u578b\u65ad\u8a00",id:"\u63a5\u53e3\u8f6c\u6362\u4e0e\u7c7b\u578b\u65ad\u8a00",level:3},{value:"\u901a\u7528\u6027",id:"\u901a\u7528\u6027",level:3},{value:"Interfaces and methods",id:"interfaces-and-methods",level:3},{value:"\u63a5\u53e3\u548c\u65b9\u6cd5",id:"\u63a5\u53e3\u548c\u65b9\u6cd5",level:3},{value:"The blank identifier",id:"the-blank-identifier",level:2},{value:"\u7a7a\u767d\u6807\u8bc6\u7b26",id:"\u7a7a\u767d\u6807\u8bc6\u7b26",level:2},{value:"The blank identifier in multiple assignment",id:"the-blank-identifier-in-multiple-assignment",level:3},{value:"\u591a\u91cd\u8d4b\u503c\u4e2d\u7684\u7a7a\u767d\u6807\u8bc6\u7b26",id:"\u591a\u91cd\u8d4b\u503c\u4e2d\u7684\u7a7a\u767d\u6807\u8bc6\u7b26",level:3},{value:"Unused imports and variables",id:"unused-imports-and-variables",level:3},{value:"\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u548c\u53d8\u91cf",id:"\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u548c\u53d8\u91cf",level:3},{value:"Import for side effect",id:"import-for-side-effect",level:3},{value:"\u4e3a\u526f\u4f5c\u7528\u800c\u5bfc\u5165",id:"\u4e3a\u526f\u4f5c\u7528\u800c\u5bfc\u5165",level:3},{value:"Interface checks",id:"interface-checks",level:3},{value:"\u63a5\u53e3\u68c0\u67e5",id:"\u63a5\u53e3\u68c0\u67e5",level:3},{value:"Embedding",id:"embedding",level:2},{value:"\u5185\u5d4c",id:"\u5185\u5d4c",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"\u5e76\u53d1",id:"\u5e76\u53d1",level:2},{value:"Share by communicating",id:"share-by-communicating",level:3},{value:"\u901a\u8fc7\u901a\u4fe1\u5171\u4eab\u5185\u5b58",id:"\u901a\u8fc7\u901a\u4fe1\u5171\u4eab\u5185\u5b58",level:3},{value:"Goroutines",id:"goroutines",level:3},{value:"Goroutines",id:"goroutines-1",level:3},{value:"Channels",id:"channels",level:3},{value:"\u4fe1\u9053",id:"\u4fe1\u9053",level:3},{value:"Channels of channels",id:"channels-of-channels",level:3},{value:"\u4fe1\u9053\u4e2d\u7684\u4fe1\u9053",id:"\u4fe1\u9053\u4e2d\u7684\u4fe1\u9053",level:3},{value:"Parallelization",id:"parallelization",level:3},{value:"\u5e76\u884c\u5316",id:"\u5e76\u884c\u5316",level:3},{value:"A leaky buffer",id:"a-leaky-buffer",level:3},{value:"\u6f0f\u6876\u6a21\u578b",id:"\u6f0f\u6876\u6a21\u578b",level:3},{value:"Errors",id:"errors",level:2},{value:"\u9519\u8bef",id:"\u9519\u8bef",level:2},{value:"Panic",id:"panic",level:2},{value:"Panic",id:"panic-1",level:2},{value:"Recover",id:"recover",level:2},{value:"\u6062\u590d",id:"\u6062\u590d",level:2},{value:"A web server",id:"a-web-server",level:2},{value:"\u4e00\u4e2a Web \u670d\u52a1\u5668",id:"\u4e00\u4e2a-web-\u670d\u52a1\u5668",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u58f0\u660e\uff1a\u672c\u6587\u6765\u6e90\uff1a",(0,i.jsx)(n.a,{href:"https://github.com/bingohuang/effective-go-zh-en/blob/master/README.md",children:"bingohuang/effective-go-zh-en"}),"\uff0c\u5982\u6d89\u53ca\u7248\u6743\u95ee\u9898\uff0c\u8bf7\u901a\u8fc7 github\u7b80\u4ecb mail \u8054\u7cfb"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u5185\u5bb9\u7686\u4e3a\u5f15\u7528\uff0c\u975e\u539f\u521b\uff0c\u611f\u8c22\u539f\u4f5c\u8005\u7684\u4ed8\u51fa\uff0c\u5df2 \u2b50star"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h2,{id:"\u5f15\u8a00",children:"\u5f15\u8a00"}),"\n",(0,i.jsx)(n.p,{children:"Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives. A straightforward translation of a C++ or Java program into Go is unlikely to produce a satisfactory result\u2014Java programs are written in Java, not Go. On the other hand, thinking about the problem from a Go perspective could produce a successful but quite different program. In other words, to write Go well, it's important to understand its properties and idioms. It's also important to know the established conventions for programming in Go, such as naming, formatting, program construction, and so on, so that programs you write will be easy for other Go programmers to understand."}),"\n",(0,i.jsx)(n.p,{children:"Go \u662f\u4e00\u95e8\u5168\u65b0\u7684\u8bed\u8a00\u3002\u5c3d\u7ba1\u5b83\u4ece\u65e2\u6709\u7684\u8bed\u8a00\u4e2d\u501f\u9274\u4e86\u8bb8\u591a\u7406\u5ff5\uff0c\u4f46\u5176\u4e0e\u4f17\u4e0d\u540c\u7684\u7279\u6027\uff0c \u4f7f\u5f97\u4f7f\u7528 Go \u7f16\u7a0b\u5728\u672c\u8d28\u4e0a\u5c31\u4e0d\u540c\u4e8e\u5176\u5b83\u8bed\u8a00\u3002\u5c06\u73b0\u6709\u7684 C++ \u6216 Java \u7a0b\u5e8f\u76f4\u8bd1\u4e3a Go \u7a0b\u5e8f\u5e76\u4e0d\u80fd\u4ee4\u4eba\u6ee1\u610f\u2014\u2014\u6bd5\u7adf Java \u7a0b\u5e8f\u662f\u7528 Java \u7f16\u5199\u7684\uff0c\u800c\u4e0d\u662f Go\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u82e5\u4ece Go \u7684\u89d2\u5ea6\u53bb\u5206\u6790\u95ee\u9898\uff0c\u4f60\u5c31\u80fd\u7f16\u5199\u51fa\u540c\u6837\u53ef\u884c\u4f46\u5927\u4e0d\u76f8\u540c\u7684\u7a0b\u5e8f\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8981\u60f3\u5c06 Go \u7a0b\u5e8f\u5199\u5f97\u597d\uff0c\u5c31\u5fc5\u987b\u7406\u89e3\u5176\u7279\u6027\u548c\u98ce\u683c\u3002\u4e86\u89e3\u547d\u540d\u3001\u683c\u5f0f\u5316\u3001 \u7a0b\u5e8f\u7ed3\u6784\u7b49\u65e2\u5b9a\u89c4\u5219\u4e5f\u540c\u6837\u91cd\u8981\uff0c\u8fd9\u6837\u4f60\u7f16\u5199\u7684\u7a0b\u5e8f\u624d\u80fd\u66f4\u5bb9\u6613\u88ab\u5176\u4ed6\u7a0b\u5e8f\u5458\u6240\u7406\u89e3\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["This document gives tips for writing clear, idiomatic Go code. It augments the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/ref/spec",children:"language specification"}),", ",(0,i.jsx)(n.a,{href:"https://tour.golang.org/",children:"the Tour of Go"}),", and ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/code.html",children:"How to Write Go Code"}),", all of which you should read first."]}),"\n",(0,i.jsxs)(n.p,{children:["\u672c\u6587\u6863\u5c31\u5982\u4f55\u7f16\u5199\u6e05\u6670\u3001\u5730\u9053\u7684 Go \u4ee3\u7801\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6280\u5de7\u3002\u5b83\u662f\u5bf9 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/ref/spec",children:"\u8bed\u8a00\u89c4\u8303"}),"\u3001 ",(0,i.jsx)(n.a,{href:"https://tour.golang.org/",children:"Go \u8bed\u8a00\u4e4b\u65c5"})," \u4ee5\u53ca ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/code.html",children:"\u5982\u4f55\u4f7f\u7528 Go \u7f16\u7a0b"})," \u7684\u8865\u5145\u8bf4\u660e\uff0c\u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u60a8\u5148\u9605\u8bfb\u8fd9\u4e9b\u6587\u6863\u3002"]}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://golang.org/src/",children:"Go package sources"})," are intended to serve not only as the core library but also as examples of how to use the language. Moreover, many of the packages contain working, self-contained executable examples you can run directly from the ",(0,i.jsx)(n.a,{href:"https://golang.org/",children:"golang.org"})," web site, such as ",(0,i.jsx)(n.a,{href:"https://golang.org/pkg/strings/#example_Map",children:"this one"}),' (if necessary, click on the word"Example"to open it up). If you have a question about how to approach a problem or how something might be implemented, the documentation, code and examples in the library can provide answers, ideas and background.']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://go-zh.org/src/pkg/",children:"Go \u5305\u7684\u6e90\u7801"})," \u4e0d\u4ec5\u662f\u6838\u5fc3\u5e93\uff0c\u540c\u65f6\u4e5f\u662f\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Go \u8bed\u8a00\u7684\u793a\u4f8b\u6e90\u7801\u3002 \u6b64\u5916\uff0c\u5176\u4e2d\u7684\u4e00\u4e9b\u5305\u8fd8\u5305\u542b\u4e86\u53ef\u5de5\u4f5c\u7684\uff0c\u72ec\u7acb\u7684\u53ef\u6267\u884c\u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 ",(0,i.jsx)(n.a,{href:"https://golang.org/",children:"golang.org"}),"  \u7f51\u7ad9\u4e0a\u8fd0\u884c\u5b83\u4eec\uff0c\u6bd4\u5982 ",(0,i.jsx)(n.a,{href:"https://golang.org/pkg/strings/#example_Map",children:"\u8fd9\u4e2a\u4f8b\u5b50"})," \uff08\u5355\u51fb\u6587\u5b57 \u201c\u793a\u4f8b\u201d \u6765\u5c55\u5f00\u5b83\uff09\u3002\u5982\u679c\u4f60\u6709\u4efb\u4f55\u5173\u4e8e\u67d0\u4e9b\u95ee\u9898\u5982\u4f55\u89e3\u51b3\uff0c\u6216\u67d0\u4e9b\u4e1c\u897f\u5982\u4f55\u5b9e\u73b0\u7684\u7591\u95ee\uff0c \u4e5f\u53ef\u4ee5\u4ece\u4e2d\u83b7\u53d6\u76f8\u5173\u7684\u7b54\u6848\u3001\u601d\u8def\u4ee5\u53ca\u540e\u53f0\u5b9e\u73b0\u3002"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"formatting",children:"Formatting"}),"\n",(0,i.jsx)(n.h2,{id:"\u683c\u5f0f\u5316",children:"\u683c\u5f0f\u5316"}),"\n",(0,i.jsx)(n.p,{children:"Formatting issues are the most contentious but the least consequential. People can adapt to different formatting styles but it's better if they don't have to, and less time is devoted to the topic if everyone adheres to the same style. The problem is how to approach this Utopia without a long prescriptive style guide."}),"\n",(0,i.jsx)(n.p,{children:"\u683c\u5f0f\u5316\u95ee\u9898\u603b\u662f\u5145\u6ee1\u4e86\u4e89\u8bae\uff0c\u4f46\u5374\u59cb\u7ec8\u6ca1\u6709\u5f62\u6210\u7edf\u4e00\u7684\u5b9a\u8bba\u3002\u867d\u8bf4\u4eba\u4eec\u53ef\u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u7f16\u7801\u98ce\u683c\uff0c \u4f46\u629b\u5f03\u8fd9\u79cd\u9002\u5e94\u8fc7\u7a0b\u5c82\u4e0d\u66f4\u597d\uff1f\u82e5\u6240\u6709\u4eba\u90fd\u9075\u5faa\u76f8\u540c\u7684\u7f16\u7801\u98ce\u683c\uff0c\u5728\u8fd9\u7c7b\u95ee\u9898\u4e0a\u6d6a\u8d39\u7684\u65f6\u95f4\u5c06\u4f1a\u66f4\u5c11\u3002 \u95ee\u9898\u5c31\u5728\u4e8e\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u8bbe\u60f3\uff0c\u800c\u65e0\u9700\u5197\u957f\u7684\u8bed\u8a00\u98ce\u683c\u89c4\u8303\u3002"}),"\n",(0,i.jsx)(n.p,{children:"With Go we take an unusual approach and let the machine take care of most formatting issues. The gofmt program (also available as go fmt, which operates at the package level rather than source file level) reads a Go program and emits the source in a standard style of indentation and vertical alignment, retaining and if necessary reformatting comments. If you want to know how to handle some new layout situation, run gofmt; if the answer doesn't seem right, rearrange your program (or file a bug about gofmt), don't work around it."}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Go \u4e2d\u6211\u4eec\u53e6\u8f9f\u8e4a\u5f84\uff0c\u8ba9\u673a\u5668\u6765\u5904\u7406\u5927\u90e8\u5206\u7684\u683c\u5f0f\u5316\u95ee\u9898\u3002gofmt \u7a0b\u5e8f\uff08\u4e5f\u53ef\u7528 go fmt\uff0c\u5b83\u4ee5\u5305\u4e3a\u5904\u7406\u5bf9\u8c61\u800c\u975e\u6e90\u6587\u4ef6\uff09\u5c06 Go \u7a0b\u5e8f\u6309\u7167\u6807\u51c6\u98ce\u683c\u7f29\u8fdb\u3001 \u5bf9\u9f50\uff0c\u4fdd\u7559\u6ce8\u91ca\u5e76\u5728\u9700\u8981\u65f6\u91cd\u65b0\u683c\u5f0f\u5316\u3002\u82e5\u4f60\u60f3\u77e5\u9053\u5982\u4f55\u5904\u7406\u4e00\u4e9b\u65b0\u7684\u4ee3\u7801\u5e03\u5c40\uff0c\u8bf7\u5c1d\u8bd5\u8fd0\u884c gofmt\uff1b\u82e5\u7ed3\u679c\u4ecd\u4e0d\u5c3d\u4eba\u610f\uff0c\u8bf7\u91cd\u65b0\u7ec4\u7ec7\u4f60\u7684\u7a0b\u5e8f\uff08\u6216\u63d0\u4ea4\u6709\u5173 gofmt \u7684 Bug\uff09\uff0c\u800c\u4e0d\u5fc5\u4e3a\u6b64\u7ea0\u7ed3\u3002"}),"\n",(0,i.jsx)(n.p,{children:"As an example, there's no need to spend time lining up the comments on the fields of a structure. Gofmt will do that for you. Given the declaration"}),"\n",(0,i.jsx)(n.p,{children:"\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4f60\u65e0\u9700\u82b1\u65f6\u95f4\u5c06\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u6ce8\u91ca\u5bf9\u9f50\uff0cgofmt \u5c06\u4e3a\u4f60\u4ee3\u52b3\u3002 \u5047\u5982\u6709\u4ee5\u4e0b\u58f0\u660e\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type T struct {\n\tname string // name of the object\n\tvalue int // its value\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type T struct {\n\tname string // \u5bf9\u8c61\u540d\n\tvalue int // \u5bf9\u8c61\u503c\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"gofmt will line up the columns:"}),"\n",(0,i.jsx)(n.p,{children:"gofmt \u4f1a\u5c06\u5b83\u6309\u5217\u5bf9\u9f50\u4e3a\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type T struct {\n\tname    string // name of the object\n\tvalue   int    // its value\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type T struct {\n\tname    string // \u5bf9\u8c61\u540d\n\tvalue   int    // \u5bf9\u8c61\u503c\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"All Go code in the standard packages has been formatted with gofmt."}),"\n",(0,i.jsx)(n.p,{children:"\u6807\u51c6\u5305\u4e2d\u6240\u6709\u7684 Go \u4ee3\u7801\u90fd\u5df2\u7ecf\u7528 gofmt \u683c\u5f0f\u5316\u8fc7\u4e86\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Some formatting details remain. Very briefly:"}),"\n",(0,i.jsx)(n.p,{children:"\u8fd8\u6709\u4e00\u4e9b\u5173\u4e8e\u683c\u5f0f\u5316\u7684\u7ec6\u8282\uff0c\u5b83\u4eec\u975e\u5e38\u7b80\u77ed\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Indentation\n  We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.\nLine length\n  Go has no line length limit. Don't worry about overflowing a punched card. If a line feels too long, wrap it and indent with an extra tab.\nParentheses\n  Go needs fewer parentheses than C and Java: control structures (if, for, switch) do not have parentheses in their syntax. Also, the operator precedence hierarchy is shorter and clearer, so\n    x<<8 + y<<16\n  means what the spacing implies, unlike in the other languages.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u7f29\u8fdb\n  \u6211\u4eec\u4f7f\u7528\u5236\u8868\u7b26\uff08tab\uff09\u7f29\u8fdb\uff0cgofmt \u9ed8\u8ba4\u4e5f\u4f7f\u7528\u5b83\u3002\u5728\u4f60\u8ba4\u4e3a\u786e\u5b9e\u6709\u5fc5\u8981\u65f6\u518d\u4f7f\u7528\u7a7a\u683c\u3002\n\u884c\u7684\u957f\u5ea6\n  Go \u5bf9\u884c\u7684\u957f\u5ea6\u6ca1\u6709\u9650\u5236\uff0c\u522b\u62c5\u5fc3\u6253\u5b54\u7eb8\u4e0d\u591f\u957f\u3002\u5982\u679c\u4e00\u884c\u5b9e\u5728\u592a\u957f\uff0c\u4e5f\u53ef\u8fdb\u884c\u6298\u884c\u5e76\u63d2\u5165\u9002\u5f53\u7684 tab \u7f29\u8fdb\u3002\n\u62ec\u53f7\n  \u6bd4\u8d77 C \u548c Java\uff0cGo \u6240\u9700\u7684\u62ec\u53f7\u66f4\u5c11\uff1a\u63a7\u5236\u7ed3\u6784\uff08if\u3001for \u548c switch\uff09\u5728\u8bed\u6cd5\u4e0a\u5e76\u4e0d\u9700\u8981\u5706\u62ec\u53f7\u3002\u6b64\u5916\uff0c\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u5904\u7406\u53d8\u5f97\u66f4\u52a0\u7b80\u6d01\uff0c\u56e0\u6b64\n    x<<8 + y<<16\n  \u6b63\u8868\u8ff0\u4e86\u7a7a\u683c\u7b26\u6240\u4f20\u8fbe\u7684\u542b\u4e49\u3002\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"commentary",children:"Commentary"}),"\n",(0,i.jsx)(n.h2,{id:"\u6ce8\u91ca",children:"\u6ce8\u91ca"}),"\n",(0,i.jsxs)(n.p,{children:["Go provides C-style ",(0,i.jsx)(n.code,{children:"/* */"})," block comments and C++-style ",(0,i.jsx)(n.code,{children:"//"})," line comments. Line comments are the norm; block comments appear mostly as package comments, but are useful within an expression or to disable large swaths of code."]}),"\n",(0,i.jsxs)(n.p,{children:["Go \u8bed\u8a00\u652f\u6301 C \u98ce\u683c\u7684\u5757\u6ce8\u91ca ",(0,i.jsx)(n.code,{children:"/* */"})," \u548c C++ \u98ce\u683c\u7684\u884c\u6ce8\u91ca ",(0,i.jsx)(n.code,{children:"//"}),"\u3002 \u884c\u6ce8\u91ca\u66f4\u4e3a\u5e38\u7528\uff0c\u800c\u5757\u6ce8\u91ca\u5219\u4e3b\u8981\u7528\u4f5c\u5305\u7684\u6ce8\u91ca\uff0c\u5f53\u7136\u4e5f\u53ef\u5728\u7981\u7528\u4e00\u5927\u6bb5\u4ee3\u7801\u65f6\u4f7f\u7528\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"The program\u2014and web server\u2014godoc processes Go source files to extract documentation about the contents of the package. Comments that appear before top-level declarations, with no intervening newlines, are extracted along with the declaration to serve as explanatory text for the item. The nature and style of these comments determines the quality of the documentation godoc produces."}),"\n",(0,i.jsx)(n.p,{children:"godoc \u65e2\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u53c8\u662f\u4e00\u4e2a Web \u670d\u52a1\u5668\uff0c\u5b83\u5bf9 Go \u7684\u6e90\u7801\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u63d0\u53d6\u5305\u4e2d\u7684\u6587\u6863\u5185\u5bb9\u3002 \u51fa\u73b0\u5728\u9876\u7ea7\u58f0\u660e\u4e4b\u524d\uff0c\u4e14\u4e0e\u8be5\u58f0\u660e\u4e4b\u95f4\u6ca1\u6709\u7a7a\u884c\u7684\u6ce8\u91ca\uff0c\u5c06\u4e0e\u8be5\u58f0\u660e\u4e00\u8d77\u88ab\u63d0\u53d6\u51fa\u6765\uff0c\u4f5c\u4e3a\u8be5\u6761\u76ee\u7684\u8bf4\u660e\u6587\u6863\u3002 \u8fd9\u4e9b\u6ce8\u91ca\u7684\u7c7b\u578b\u548c\u98ce\u683c\u51b3\u5b9a\u4e86 godoc \u751f\u6210\u7684\u6587\u6863\u8d28\u91cf\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Every package should have a package comment, a block comment preceding the package clause. For multi-file packages, the package comment only needs to be present in one file, and any one will do. The package comment should introduce the package and provide information relevant to the package as a whole. It will appear first on the godoc page and should set up the detailed documentation that follows."}),"\n",(0,i.jsxs)(n.p,{children:["\u6bcf\u4e2a\u5305\u90fd\u5e94\u5305\u542b\u4e00\u6bb5\u5305\u6ce8\u91ca\uff0c\u5373\u653e\u7f6e\u5728\u5305\u5b50\u53e5\u524d\u7684\u4e00\u4e2a",(0,i.jsx)(n.strong,{children:"\u5757\u6ce8\u91ca"}),"\u3002\u5bf9\u4e8e\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u5305\uff0c \u5305\u6ce8\u91ca\u53ea\u9700\u51fa\u73b0\u5728\u5176\u4e2d\u7684\u4efb\u4e00\u6587\u4ef6\u4e2d\u5373\u53ef\u3002\u5305\u6ce8\u91ca\u5e94\u5728\u6574\u4f53\u4e0a\u5bf9\u8be5\u5305\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5e76\u63d0\u4f9b\u5305\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u5b83\u5c06\u51fa\u73b0\u5728 godoc \u9875\u9762\u4e2d\u7684\u6700\u4e0a\u9762\uff0c\u5e76\u4e3a\u7d27\u968f\u5176\u540e\u7684\u5185\u5bb9\u5efa\u7acb\u8be6\u7ec6\u7684\u6587\u6863\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"/*\nPackage regexp implements a simple library for regular expressions.\n\nThe syntax of the regular expressions accepted is:\n\n\tregexp:\n\t\tconcatenation { '|' concatenation }\n\tconcatenation:\n\t\t{ closure }\n\tclosure:\n\t\tterm [ '*' | '+' | '?' ]\n\tterm:\n\t\t'^'\n\t\t'$'\n\t\t'.'\n\t\tcharacter\n\t\t'[' [ '^' ] character-ranges ']'\n\t\t'(' regexp ')'\n*/\npackage regexp\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"/*\n\tregexp \u5305\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5e93\u3002\n\n\t\u8be5\u5e93\u63a5\u53d7\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u4e3a\uff1a\n\n\t\u6b63\u5219\u8868\u8fbe\u5f0f:\n\t\t\u4e32\u8054 { '|' \u4e32\u8054 }\n\t\u4e32\u8054:\n\t\t{ \u95ed\u5305 }\n\t\u95ed\u5305:\n\t\t\u6761\u76ee [ '*' | '+' | '?' ]\n\t\u6761\u76ee:\n\t\t'^'\n\t\t'$'\n\t\t'.'\n\t\t\u5b57\u7b26\n\t\t'[' [ '^' ] \u5b57\u7b26\u904d\u5386 ']'\n\t\t'(' \u6b63\u5219\u8868\u8fbe\u5f0f ')'\n*/\npackage regexp\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the package is simple, the package comment can be brief."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u67d0\u4e2a\u5305\u6bd4\u8f83\u7b80\u5355\uff0c\u5305\u6ce8\u91ca\u540c\u6837\u53ef\u4ee5\u7b80\u6d01\u4e9b\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Package path implements utility routines for\n// manipulating slash-separated filename paths.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// path \u5305\u5b9e\u73b0\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\uff0c\u4ee5\u4fbf\u4e8e\u64cd\u4f5c\u7528\u6b63\u659c\u6760\u5206\u9694\u7684\u8def\u5f84.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Comments do not need extra formatting such as banners of stars. The generated output may not even be presented in a fixed-width font, so don't depend on spacing for alignment\u2014godoc, like gofmt, takes care of that. The comments are uninterpreted plain text, so HTML and other annotations such as ",(0,i.jsx)(n.code,{children:"_this_"})," will reproduce ",(0,i.jsx)(n.em,{children:"verbatim"})," and should not be used. One adjustment godoc does do is to display indented text in a fixed-width font, suitable for program snippets. The package comment for the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/fmt/",children:"fmt package"})," uses this to good effect."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6ce8\u91ca\u65e0\u9700\u8fdb\u884c\u989d\u5916\u7684\u683c\u5f0f\u5316\uff0c\u5982\u7528\u661f\u53f7\u6765\u7a81\u51fa\u7b49\u3002\u751f\u6210\u7684\u8f93\u51fa\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u4ee5\u7b49\u5bbd\u5b57\u4f53\u663e\u793a\uff0c \u56e0\u6b64\u4e0d\u8981\u4f9d\u8d56\u4e8e\u7a7a\u683c\u5bf9\u9f50\uff0cgodoc \u4f1a\u50cf gofmt \u90a3\u6837\u5904\u7406\u597d\u8fd9\u4e00\u5207\u3002 \u6ce8\u91ca\u662f\u4e0d\u4f1a\u88ab\u89e3\u6790\u7684\u7eaf\u6587\u672c\uff0c\u56e0\u6b64\u50cf HTML \u6216\u5176\u5b83\u7c7b\u4f3c\u4e8e ",(0,i.jsx)(n.code,{children:"_\u8fd9\u6837_"})," \u7684\u4e1c\u897f\u5c06\u6309\u7167 ",(0,i.jsx)(n.em,{children:"\u539f\u6837"})," \u8f93\u51fa\uff0c\u56e0\u6b64\u4e0d\u5e94\u4f7f\u7528\u5b83\u4eec\u3002godoc \u6240\u505a\u7684\u8c03\u6574\uff0c \u5c31\u662f\u5c06\u5df2\u7f29\u8fdb\u7684\u6587\u672c\u4ee5\u7b49\u5bbd\u5b57\u4f53\u663e\u793a\uff0c\u6765\u9002\u5e94\u5bf9\u5e94\u7684\u7a0b\u5e8f\u7247\u6bb5\u3002 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/fmt/",children:"fmt \u5305"})," \u7684\u6ce8\u91ca\u5c31\u7528\u4e86\u8fd9\u79cd\u4e0d\u9519\u7684\u6548\u679c\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Depending on the context, godoc might not even reformat comments, so make sure they look good straight up: use correct spelling, punctuation, and sentence structure, fold long lines, and so on."}),"\n",(0,i.jsx)(n.p,{children:"godoc \u662f\u5426\u4f1a\u91cd\u65b0\u683c\u5f0f\u5316\u6ce8\u91ca\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u5fc5\u987b\u786e\u4fdd\u5b83\u4eec\u770b\u8d77\u6765\u6e05\u6670\u6613\u8fa8\uff1a \u4f7f\u7528\u6b63\u786e\u7684\u62fc\u5199\u3001\u6807\u70b9\u548c\u8bed\u53e5\u7ed3\u6784\u4ee5\u53ca\u6298\u53e0\u957f\u884c\u7b49\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Inside a package, any comment immediately preceding a top-level declaration serves as a doc comment for that declaration. Every exported (capitalized) name in a program should have a doc comment."}),"\n",(0,i.jsxs)(n.p,{children:["\u5728\u5305\u4e2d\uff0c\u4efb\u4f55\u9876\u7ea7\u58f0\u660e\u524d\u9762\u7684\u6ce8\u91ca\u90fd\u5c06\u4f5c\u4e3a\u8be5\u58f0\u660e\u7684",(0,i.jsx)(n.strong,{children:"\u6587\u6863\u6ce8\u91ca"}),"\u3002 \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6bcf\u4e2a\u53ef\u5bfc\u51fa\uff08\u9996\u5b57\u6bcd\u5927\u5199\uff09\u7684\u540d\u79f0\u90fd\u5e94\u8be5\u6709\u6587\u6863\u6ce8\u91ca\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Doc comments work best as complete sentences, which allow a wide variety of automated presentations. The first sentence should be a one-sentence summary that starts with the name being declared."}),"\n",(0,i.jsx)(n.p,{children:"\u6587\u6863\u6ce8\u91ca\u6700\u597d\u662f\u5b8c\u6574\u7684\u53e5\u5b50\uff0c\u8fd9\u6837\u5b83\u624d\u80fd\u9002\u5e94\u5404\u79cd\u81ea\u52a8\u5316\u7684\u5c55\u793a\u3002 \u7b2c\u4e00\u53e5\u5e94\u5f53\u4ee5\u88ab\u58f0\u660e\u7684\u4e1c\u897f\u5f00\u5934\uff0c\u5e76\u4e14\u662f\u5355\u53e5\u7684\u6458\u8981\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Compile parses a regular expression and returns, if successful, a Regexp\n// object that can be used to match against text.\nfunc Compile(str string) (regexp *Regexp, err error) {\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Compile \u7528\u4e8e\u89e3\u6790\u6b63\u5219\u8868\u8fbe\u5f0f\u5e76\u8fd4\u56de\uff0c\u5982\u679c\u6210\u529f\uff0c\u5219 Regexp \u5bf9\u8c61\u5c31\u53ef\u7528\u4e8e\u5339\u914d\u6240\u9488\u5bf9\u7684\u6587\u672c\u3002\nfunc Compile(str string) (regexp *Regexp, err error) {\n"})}),"\n",(0,i.jsx)(n.p,{children:'If the name always begins the comment, the output of godoc can usefully be run through grep. Imagine you couldn\'t remember the name"Compile" but were looking for the parsing function for regular expressions, so you ran the command,'}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u6ce8\u91ca\u603b\u662f\u4ee5\u540d\u79f0\u5f00\u5934\uff0cgodoc \u7684\u8f93\u51fa\u5c31\u80fd\u901a\u8fc7 grep \u53d8\u5f97\u66f4\u52a0\u6709\u7528\u3002\u5047\u5982\u4f60\u8bb0\u4e0d\u4f4f \u201cCompile\u201d \u8fd9\u4e2a\u540d\u79f0\uff0c\u800c\u53c8\u5728\u627e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u51fd\u6570\uff0c \u90a3\u5c31\u53ef\u4ee5\u8fd0\u884c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"$ godoc regexp | grep parse\n"})}),"\n",(0,i.jsx)(n.p,{children:"If all the doc comments in the package began, \"This function...\", grep wouldn't help you remember the name. But because the package starts each doc comment with the name, you'd see something like this, which recalls the word you're looking for."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u5305\u4e2d\u7684\u6240\u6709\u6587\u6863\u6ce8\u91ca\u90fd\u4ee5 \u201c\u6b64\u51fd\u6570\u2026\u201d \u5f00\u5934\uff0cgrep \u5c31\u65e0\u6cd5\u5e2e\u4f60\u8bb0\u4f4f\u6b64\u540d\u79f0\u3002 \u4f46\u7531\u4e8e\u6bcf\u4e2a\u5305\u7684\u6587\u6863\u6ce8\u91ca\u90fd\u4ee5\u5176\u540d\u79f0\u5f00\u5934\uff0c\u4f60\u5c31\u80fd\u770b\u5230\u8fd9\u6837\u7684\u5185\u5bb9\uff0c\u5b83\u80fd\u663e\u793a\u4f60\u6b63\u5728\u5bfb\u627e\u7684\u8bcd\u8bed\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"$ godoc regexp | grep parse\n\tCompile parses a regular expression and returns, if successful, a Regexp\n\tparsed. It simplifies safe initialization of global variables holding\n\tcannot be parsed. It simplifies safe initialization of global variables\n$\n"})}),"\n",(0,i.jsx)(n.p,{children:"Go's declaration syntax allows grouping of declarations. A single doc comment can introduce a group of related constants or variables. Since the whole declaration is presented, such a comment can often be perfunctory."}),"\n",(0,i.jsx)(n.p,{children:"Go\u7684\u58f0\u660e\u8bed\u6cd5\u5141\u8bb8\u6210\u7ec4\u58f0\u660e\u3002\u5355\u4e2a\u6587\u6863\u6ce8\u91ca\u5e94\u4ecb\u7ecd\u4e00\u7ec4\u76f8\u5173\u7684\u5e38\u91cf\u6216\u53d8\u91cf\u3002 \u7531\u4e8e\u662f\u6574\u4f53\u58f0\u660e\uff0c\u8fd9\u79cd\u6ce8\u91ca\u5f80\u5f80\u8f83\u4e3a\u7b3c\u7edf\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Error codes returned by failures to parse an expression.\nvar (\n\tErrInternal      = errors.New("regexp: internal error")\n\tErrUnmatchedLpar = errors.New("regexp: unmatched \'(\'")\n\tErrUnmatchedRpar = errors.New("regexp: unmatched \')\'")\n\t...\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u8868\u8fbe\u5f0f\u89e3\u6790\u5931\u8d25\u540e\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002\nvar (\n\tErrInternal      = errors.New("regexp: internal error")\n\tErrUnmatchedLpar = errors.New("regexp: unmatched \'(\'")\n\tErrUnmatchedRpar = errors.New("regexp: unmatched \')\'")\n\t...\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Grouping can also indicate relationships between items, such as the fact that a set of variables is protected by a mutex."}),"\n",(0,i.jsx)(n.p,{children:"\u5373\u4fbf\u662f\u5bf9\u4e8e\u79c1\u6709\u540d\u79f0\uff0c\u4e5f\u53ef\u901a\u8fc7\u6210\u7ec4\u58f0\u660e\u6765\u8868\u660e\u5404\u9879\u95f4\u7684\u5173\u7cfb\uff0c\u4f8b\u5982\u67d0\u4e00\u7ec4\u7531\u4e92\u65a5\u4f53\u4fdd\u62a4\u7684\u53d8\u91cf\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var (\n\tcountLock   sync.Mutex\n\tinputCount  uint32\n\toutputCount uint32\n\terrorCount  uint32\n)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"commentary-1",children:"Commentary"}),"\n",(0,i.jsx)(n.h2,{id:"\u6ce8\u91ca-1",children:"\u6ce8\u91ca"}),"\n",(0,i.jsxs)(n.p,{children:["Go provides C-style ",(0,i.jsx)(n.code,{children:"/* */"})," block comments and C++-style ",(0,i.jsx)(n.code,{children:"//"})," line comments. Line comments are the norm; block comments appear mostly as package comments, but are useful within an expression or to disable large swaths of code."]}),"\n",(0,i.jsxs)(n.p,{children:["Go \u8bed\u8a00\u652f\u6301 C \u98ce\u683c\u7684\u5757\u6ce8\u91ca ",(0,i.jsx)(n.code,{children:"/* */"})," \u548c C++ \u98ce\u683c\u7684\u884c\u6ce8\u91ca ",(0,i.jsx)(n.code,{children:"//"}),"\u3002 \u884c\u6ce8\u91ca\u66f4\u4e3a\u5e38\u7528\uff0c\u800c\u5757\u6ce8\u91ca\u5219\u4e3b\u8981\u7528\u4f5c\u5305\u7684\u6ce8\u91ca\uff0c\u5f53\u7136\u4e5f\u53ef\u5728\u7981\u7528\u4e00\u5927\u6bb5\u4ee3\u7801\u65f6\u4f7f\u7528\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"The program\u2014and web server\u2014godoc processes Go source files to extract documentation about the contents of the package. Comments that appear before top-level declarations, with no intervening newlines, are extracted along with the declaration to serve as explanatory text for the item. The nature and style of these comments determines the quality of the documentation godoc produces."}),"\n",(0,i.jsx)(n.p,{children:"godoc \u65e2\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u53c8\u662f\u4e00\u4e2a Web \u670d\u52a1\u5668\uff0c\u5b83\u5bf9 Go \u7684\u6e90\u7801\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u63d0\u53d6\u5305\u4e2d\u7684\u6587\u6863\u5185\u5bb9\u3002 \u51fa\u73b0\u5728\u9876\u7ea7\u58f0\u660e\u4e4b\u524d\uff0c\u4e14\u4e0e\u8be5\u58f0\u660e\u4e4b\u95f4\u6ca1\u6709\u7a7a\u884c\u7684\u6ce8\u91ca\uff0c\u5c06\u4e0e\u8be5\u58f0\u660e\u4e00\u8d77\u88ab\u63d0\u53d6\u51fa\u6765\uff0c\u4f5c\u4e3a\u8be5\u6761\u76ee\u7684\u8bf4\u660e\u6587\u6863\u3002 \u8fd9\u4e9b\u6ce8\u91ca\u7684\u7c7b\u578b\u548c\u98ce\u683c\u51b3\u5b9a\u4e86 godoc \u751f\u6210\u7684\u6587\u6863\u8d28\u91cf\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Every package should have a package comment, a block comment preceding the package clause. For multi-file packages, the package comment only needs to be present in one file, and any one will do. The package comment should introduce the package and provide information relevant to the package as a whole. It will appear first on the godoc page and should set up the detailed documentation that follows."}),"\n",(0,i.jsxs)(n.p,{children:["\u6bcf\u4e2a\u5305\u90fd\u5e94\u5305\u542b\u4e00\u6bb5\u5305\u6ce8\u91ca\uff0c\u5373\u653e\u7f6e\u5728\u5305\u5b50\u53e5\u524d\u7684\u4e00\u4e2a",(0,i.jsx)(n.strong,{children:"\u5757\u6ce8\u91ca"}),"\u3002\u5bf9\u4e8e\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u5305\uff0c \u5305\u6ce8\u91ca\u53ea\u9700\u51fa\u73b0\u5728\u5176\u4e2d\u7684\u4efb\u4e00\u6587\u4ef6\u4e2d\u5373\u53ef\u3002\u5305\u6ce8\u91ca\u5e94\u5728\u6574\u4f53\u4e0a\u5bf9\u8be5\u5305\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5e76\u63d0\u4f9b\u5305\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u5b83\u5c06\u51fa\u73b0\u5728 godoc \u9875\u9762\u4e2d\u7684\u6700\u4e0a\u9762\uff0c\u5e76\u4e3a\u7d27\u968f\u5176\u540e\u7684\u5185\u5bb9\u5efa\u7acb\u8be6\u7ec6\u7684\u6587\u6863\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"/*\nPackage regexp implements a simple library for regular expressions.\n\nThe syntax of the regular expressions accepted is:\n\n\tregexp:\n\t\tconcatenation { '|' concatenation }\n\tconcatenation:\n\t\t{ closure }\n\tclosure:\n\t\tterm [ '*' | '+' | '?' ]\n\tterm:\n\t\t'^'\n\t\t'$'\n\t\t'.'\n\t\tcharacter\n\t\t'[' [ '^' ] character-ranges ']'\n\t\t'(' regexp ')'\n*/\npackage regexp\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"/*\n\tregexp \u5305\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5e93\u3002\n\n\t\u8be5\u5e93\u63a5\u53d7\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u4e3a\uff1a\n\n\t\u6b63\u5219\u8868\u8fbe\u5f0f:\n\t\t\u4e32\u8054 { '|' \u4e32\u8054 }\n\t\u4e32\u8054:\n\t\t{ \u95ed\u5305 }\n\t\u95ed\u5305:\n\t\t\u6761\u76ee [ '*' | '+' | '?' ]\n\t\u6761\u76ee:\n\t\t'^'\n\t\t'$'\n\t\t'.'\n\t\t\u5b57\u7b26\n\t\t'[' [ '^' ] \u5b57\u7b26\u904d\u5386 ']'\n\t\t'(' \u6b63\u5219\u8868\u8fbe\u5f0f ')'\n*/\npackage regexp\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the package is simple, the package comment can be brief."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u67d0\u4e2a\u5305\u6bd4\u8f83\u7b80\u5355\uff0c\u5305\u6ce8\u91ca\u540c\u6837\u53ef\u4ee5\u7b80\u6d01\u4e9b\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Package path implements utility routines for\n// manipulating slash-separated filename paths.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// path \u5305\u5b9e\u73b0\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\uff0c\u4ee5\u4fbf\u4e8e\u64cd\u4f5c\u7528\u6b63\u659c\u6760\u5206\u9694\u7684\u8def\u5f84.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Comments do not need extra formatting such as banners of stars. The generated output may not even be presented in a fixed-width font, so don't depend on spacing for alignment\u2014godoc, like gofmt, takes care of that. The comments are uninterpreted plain text, so HTML and other annotations such as ",(0,i.jsx)(n.code,{children:"_this_"})," will reproduce ",(0,i.jsx)(n.em,{children:"verbatim"})," and should not be used. One adjustment godoc does do is to display indented text in a fixed-width font, suitable for program snippets. The package comment for the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/fmt/",children:"fmt package"})," uses this to good effect."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6ce8\u91ca\u65e0\u9700\u8fdb\u884c\u989d\u5916\u7684\u683c\u5f0f\u5316\uff0c\u5982\u7528\u661f\u53f7\u6765\u7a81\u51fa\u7b49\u3002\u751f\u6210\u7684\u8f93\u51fa\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u4ee5\u7b49\u5bbd\u5b57\u4f53\u663e\u793a\uff0c \u56e0\u6b64\u4e0d\u8981\u4f9d\u8d56\u4e8e\u7a7a\u683c\u5bf9\u9f50\uff0cgodoc \u4f1a\u50cf gofmt \u90a3\u6837\u5904\u7406\u597d\u8fd9\u4e00\u5207\u3002 \u6ce8\u91ca\u662f\u4e0d\u4f1a\u88ab\u89e3\u6790\u7684\u7eaf\u6587\u672c\uff0c\u56e0\u6b64\u50cf HTML \u6216\u5176\u5b83\u7c7b\u4f3c\u4e8e ",(0,i.jsx)(n.code,{children:"_\u8fd9\u6837_"})," \u7684\u4e1c\u897f\u5c06\u6309\u7167 ",(0,i.jsx)(n.em,{children:"\u539f\u6837"})," \u8f93\u51fa\uff0c\u56e0\u6b64\u4e0d\u5e94\u4f7f\u7528\u5b83\u4eec\u3002godoc \u6240\u505a\u7684\u8c03\u6574\uff0c \u5c31\u662f\u5c06\u5df2\u7f29\u8fdb\u7684\u6587\u672c\u4ee5\u7b49\u5bbd\u5b57\u4f53\u663e\u793a\uff0c\u6765\u9002\u5e94\u5bf9\u5e94\u7684\u7a0b\u5e8f\u7247\u6bb5\u3002 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/fmt/",children:"fmt \u5305"})," \u7684\u6ce8\u91ca\u5c31\u7528\u4e86\u8fd9\u79cd\u4e0d\u9519\u7684\u6548\u679c\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Depending on the context, godoc might not even reformat comments, so make sure they look good straight up: use correct spelling, punctuation, and sentence structure, fold long lines, and so on."}),"\n",(0,i.jsx)(n.p,{children:"godoc \u662f\u5426\u4f1a\u91cd\u65b0\u683c\u5f0f\u5316\u6ce8\u91ca\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u5fc5\u987b\u786e\u4fdd\u5b83\u4eec\u770b\u8d77\u6765\u6e05\u6670\u6613\u8fa8\uff1a \u4f7f\u7528\u6b63\u786e\u7684\u62fc\u5199\u3001\u6807\u70b9\u548c\u8bed\u53e5\u7ed3\u6784\u4ee5\u53ca\u6298\u53e0\u957f\u884c\u7b49\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Inside a package, any comment immediately preceding a top-level declaration serves as a doc comment for that declaration. Every exported (capitalized) name in a program should have a doc comment."}),"\n",(0,i.jsxs)(n.p,{children:["\u5728\u5305\u4e2d\uff0c\u4efb\u4f55\u9876\u7ea7\u58f0\u660e\u524d\u9762\u7684\u6ce8\u91ca\u90fd\u5c06\u4f5c\u4e3a\u8be5\u58f0\u660e\u7684",(0,i.jsx)(n.strong,{children:"\u6587\u6863\u6ce8\u91ca"}),"\u3002 \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6bcf\u4e2a\u53ef\u5bfc\u51fa\uff08\u9996\u5b57\u6bcd\u5927\u5199\uff09\u7684\u540d\u79f0\u90fd\u5e94\u8be5\u6709\u6587\u6863\u6ce8\u91ca\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Doc comments work best as complete sentences, which allow a wide variety of automated presentations. The first sentence should be a one-sentence summary that starts with the name being declared."}),"\n",(0,i.jsx)(n.p,{children:"\u6587\u6863\u6ce8\u91ca\u6700\u597d\u662f\u5b8c\u6574\u7684\u53e5\u5b50\uff0c\u8fd9\u6837\u5b83\u624d\u80fd\u9002\u5e94\u5404\u79cd\u81ea\u52a8\u5316\u7684\u5c55\u793a\u3002 \u7b2c\u4e00\u53e5\u5e94\u5f53\u4ee5\u88ab\u58f0\u660e\u7684\u4e1c\u897f\u5f00\u5934\uff0c\u5e76\u4e14\u662f\u5355\u53e5\u7684\u6458\u8981\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Compile parses a regular expression and returns, if successful, a Regexp\n// object that can be used to match against text.\nfunc Compile(str string) (regexp *Regexp, err error) {\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Compile \u7528\u4e8e\u89e3\u6790\u6b63\u5219\u8868\u8fbe\u5f0f\u5e76\u8fd4\u56de\uff0c\u5982\u679c\u6210\u529f\uff0c\u5219 Regexp \u5bf9\u8c61\u5c31\u53ef\u7528\u4e8e\u5339\u914d\u6240\u9488\u5bf9\u7684\u6587\u672c\u3002\nfunc Compile(str string) (regexp *Regexp, err error) {\n"})}),"\n",(0,i.jsx)(n.p,{children:'If the name always begins the comment, the output of godoc can usefully be run through grep. Imagine you couldn\'t remember the name"Compile" but were looking for the parsing function for regular expressions, so you ran the command,'}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u6ce8\u91ca\u603b\u662f\u4ee5\u540d\u79f0\u5f00\u5934\uff0cgodoc \u7684\u8f93\u51fa\u5c31\u80fd\u901a\u8fc7 grep \u53d8\u5f97\u66f4\u52a0\u6709\u7528\u3002\u5047\u5982\u4f60\u8bb0\u4e0d\u4f4f \u201cCompile\u201d \u8fd9\u4e2a\u540d\u79f0\uff0c\u800c\u53c8\u5728\u627e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u51fd\u6570\uff0c \u90a3\u5c31\u53ef\u4ee5\u8fd0\u884c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"$ godoc regexp | grep parse\n"})}),"\n",(0,i.jsx)(n.p,{children:"If all the doc comments in the package began, \"This function...\", grep wouldn't help you remember the name. But because the package starts each doc comment with the name, you'd see something like this, which recalls the word you're looking for."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u5305\u4e2d\u7684\u6240\u6709\u6587\u6863\u6ce8\u91ca\u90fd\u4ee5 \u201c\u6b64\u51fd\u6570\u2026\u201d \u5f00\u5934\uff0cgrep \u5c31\u65e0\u6cd5\u5e2e\u4f60\u8bb0\u4f4f\u6b64\u540d\u79f0\u3002 \u4f46\u7531\u4e8e\u6bcf\u4e2a\u5305\u7684\u6587\u6863\u6ce8\u91ca\u90fd\u4ee5\u5176\u540d\u79f0\u5f00\u5934\uff0c\u4f60\u5c31\u80fd\u770b\u5230\u8fd9\u6837\u7684\u5185\u5bb9\uff0c\u5b83\u80fd\u663e\u793a\u4f60\u6b63\u5728\u5bfb\u627e\u7684\u8bcd\u8bed\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"$ godoc regexp | grep parse\n\tCompile parses a regular expression and returns, if successful, a Regexp\n\tparsed. It simplifies safe initialization of global variables holding\n\tcannot be parsed. It simplifies safe initialization of global variables\n$\n"})}),"\n",(0,i.jsx)(n.p,{children:"Go's declaration syntax allows grouping of declarations. A single doc comment can introduce a group of related constants or variables. Since the whole declaration is presented, such a comment can often be perfunctory."}),"\n",(0,i.jsx)(n.p,{children:"Go\u7684\u58f0\u660e\u8bed\u6cd5\u5141\u8bb8\u6210\u7ec4\u58f0\u660e\u3002\u5355\u4e2a\u6587\u6863\u6ce8\u91ca\u5e94\u4ecb\u7ecd\u4e00\u7ec4\u76f8\u5173\u7684\u5e38\u91cf\u6216\u53d8\u91cf\u3002 \u7531\u4e8e\u662f\u6574\u4f53\u58f0\u660e\uff0c\u8fd9\u79cd\u6ce8\u91ca\u5f80\u5f80\u8f83\u4e3a\u7b3c\u7edf\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Error codes returned by failures to parse an expression.\nvar (\n\tErrInternal      = errors.New("regexp: internal error")\n\tErrUnmatchedLpar = errors.New("regexp: unmatched \'(\'")\n\tErrUnmatchedRpar = errors.New("regexp: unmatched \')\'")\n\t...\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u8868\u8fbe\u5f0f\u89e3\u6790\u5931\u8d25\u540e\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002\nvar (\n\tErrInternal      = errors.New("regexp: internal error")\n\tErrUnmatchedLpar = errors.New("regexp: unmatched \'(\'")\n\tErrUnmatchedRpar = errors.New("regexp: unmatched \')\'")\n\t...\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Grouping can also indicate relationships between items, such as the fact that a set of variables is protected by a mutex."}),"\n",(0,i.jsx)(n.p,{children:"\u5373\u4fbf\u662f\u5bf9\u4e8e\u79c1\u6709\u540d\u79f0\uff0c\u4e5f\u53ef\u901a\u8fc7\u6210\u7ec4\u58f0\u660e\u6765\u8868\u660e\u5404\u9879\u95f4\u7684\u5173\u7cfb\uff0c\u4f8b\u5982\u67d0\u4e00\u7ec4\u7531\u4e92\u65a5\u4f53\u4fdd\u62a4\u7684\u53d8\u91cf\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var (\n\tcountLock   sync.Mutex\n\tinputCount  uint32\n\toutputCount uint32\n\terrorCount  uint32\n)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"semicolons",children:"Semicolons"}),"\n",(0,i.jsx)(n.h2,{id:"\u5206\u53f7",children:"\u5206\u53f7"}),"\n",(0,i.jsx)(n.p,{children:"Like C, Go's formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source. Instead the lexer uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them."}),"\n",(0,i.jsx)(n.p,{children:"\u548c C \u4e00\u6837\uff0cGo \u7684\u6b63\u5f0f\u8bed\u6cd5\u4f7f\u7528\u5206\u53f7\u6765\u7ed3\u675f\u8bed\u53e5\uff1b\u548c C \u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u4e9b\u5206\u53f7\u5e76\u4e0d\u5728\u6e90\u7801\u4e2d\u51fa\u73b0\u3002 \u53d6\u800c\u4ee3\u4e4b\uff0c\u8bcd\u6cd5\u5206\u6790\u5668\u4f1a\u4f7f\u7528\u4e00\u6761\u7b80\u5355\u7684\u89c4\u5219\u6765\u81ea\u52a8\u63d2\u5165\u5206\u53f7\uff0c\u56e0\u6b64\u6e90\u7801\u4e2d\u57fa\u672c\u5c31\u4e0d\u7528\u5206\u53f7\u4e86\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The rule is this. If the last token before a newline is an identifier (which includes words like int and float64), a basic literal such as a number or string constant, or one of the tokens"}),"\n",(0,i.jsx)(n.p,{children:"\u89c4\u5219\u662f\u8fd9\u6837\u7684\uff1a\u82e5\u5728\u65b0\u884c\u524d\u7684\u6700\u540e\u4e00\u4e2a\u6807\u8bb0\u4e3a\u6807\u8bc6\u7b26\uff08\u5305\u62ec int \u548c float64 \u8fd9\u7c7b\u7684\u5355\u8bcd\uff09\u3001\u6570\u503c\u6216\u5b57\u7b26\u4e32\u5e38\u91cf\u4e4b\u7c7b\u7684\u57fa\u672c\u5b57\u9762\u6216\u4ee5\u4e0b\u6807\u8bb0\u4e4b\u4e00"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"break continue fallthrough return ++ -- ) }\n"})}),"\n",(0,i.jsx)(n.p,{children:"the lexer always inserts a semicolon after the token. This could be summarized as, \u201cif the newline comes after a token that could end a statement, insert a semicolon\u201d."}),"\n",(0,i.jsx)(n.p,{children:"\u5219\u8bcd\u6cd5\u5206\u6790\u5c06\u59cb\u7ec8\u5728\u8be5\u6807\u8bb0\u540e\u9762\u63d2\u5165\u5206\u53f7\u3002\u8fd9\u70b9\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a \u201c\u5982\u679c\u65b0\u884c\u524d\u7684\u6700\u540e\u4e00\u4e2a\u6807\u8bb0\u53ef\u4ee5\u7ed3\u675f\u8be5\u6bb5\u8bed\u53e5\uff0c\u5219\u63d2\u5165\u5206\u53f7\u201d\u3002"}),"\n",(0,i.jsx)(n.p,{children:"A semicolon can also be omitted immediately before a closing brace, so a statement such as"}),"\n",(0,i.jsx)(n.p,{children:"\u5206\u53f7\u4e5f\u53ef\u5728\u95ed\u5408\u7684\u5927\u62ec\u53f7\u4e4b\u524d\u76f4\u63a5\u7701\u7565\uff0c\u56e0\u6b64\u50cf"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\tgo func() { for { dst <- <-src } }()\n"})}),"\n",(0,i.jsx)(n.p,{children:"needs no semicolons. Idiomatic Go programs have semicolons only in places such as for loop clauses, to separate the initializer, condition, and continuation elements. They are also necessary to separate multiple statements on a line, should you write code that way."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u6837\u7684\u8bed\u53e5\u65e0\u9700\u5206\u53f7\u3002\u901a\u5e38Go\u7a0b\u5e8f\u53ea\u5728\u8bf8\u5982 for \u5faa\u73af\u5b50\u53e5\u8fd9\u6837\u7684\u5730\u65b9\u4f7f\u7528\u5206\u53f7\uff0c \u4ee5\u6b64\u6765\u5c06\u521d\u59cb\u5316\u5668\u3001\u6761\u4ef6\u53ca\u589e\u91cf\u5143\u7d20\u5206\u5f00\u3002\u5982\u679c\u4f60\u5728\u4e00\u884c\u4e2d\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u4e5f\u9700\u8981\u7528\u5206\u53f7\u9694\u5f00\u3002"}),"\n",(0,i.jsx)(n.p,{children:"One consequence of the semicolon insertion rules is that you cannot put the opening brace of a control structure (if, for, switch, or select) on the next line. If you do, a semicolon will be inserted before the brace, which could cause unwanted effects. Write them like this"}),"\n",(0,i.jsx)(n.p,{children:"\u8b66\u544a\uff1a\u65e0\u8bba\u5982\u4f55\uff0c\u4f60\u90fd\u4e0d\u5e94\u5c06\u4e00\u4e2a\u63a7\u5236\u7ed3\u6784\uff08if\u3001for\u3001switch \u6216 select\uff09\u7684\u5de6\u5927\u62ec\u53f7\u653e\u5728\u4e0b\u4e00\u884c\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5c31\u4f1a\u5728\u5927\u62ec\u53f7\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u5206\u53f7\uff0c\u8fd9\u53ef\u80fd\u5f15\u8d77\u4e0d\u9700\u8981\u7684\u6548\u679c\u3002 \u4f60\u5e94\u8be5\u8fd9\u6837\u5199"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if i < f() {\n\tg()\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"not like this"}),"\n",(0,i.jsx)(n.p,{children:"\u800c\u4e0d\u662f\u8fd9\u6837"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if i < f()  // wrong!\n{           // wrong!\n\tg()\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if i < f()  // \u9519\uff01\n{           // \u9519\uff01\n\tg()\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"control-structures",children:"Control structures"}),"\n",(0,i.jsx)(n.h2,{id:"\u63a7\u5236\u7ed3\u6784",children:"\u63a7\u5236\u7ed3\u6784"}),"\n",(0,i.jsx)(n.p,{children:"The control structures of Go are related to those of C but differ in important ways. There is no do or while loop, only a slightly generalized for; switch is more flexible; if and switch accept an optional initialization statement like that of for; break and continue statements take an optional label to identify what to break or continue; and there are new control structures including a type switch and a multiway communications multiplexer, select. The syntax is also slightly different: there are no parentheses and the bodies must always be brace-delimited."}),"\n",(0,i.jsx)(n.p,{children:"Go \u4e2d\u7684\u7ed3\u6784\u63a7\u5236\u4e0e C \u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u4f46\u5176\u4e0d\u540c\u4e4b\u5904\u624d\u662f\u72ec\u5230\u4e4b\u5904\u3002 Go \u4e0d\u518d\u4f7f\u7528 do \u6216 while \u5faa\u73af\uff0c\u53ea\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 for\uff1bswitch \u8981\u66f4\u7075\u6d3b\u4e00\u70b9\uff1bif \u548c switch \u50cf for \u4e00\u6837\u53ef\u63a5\u53d7\u53ef\u9009\u7684\u521d\u59cb\u5316\u8bed\u53e5\uff1b \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u5305\u542b\u7c7b\u578b\u9009\u62e9\u548c\u591a\u8def\u901a\u4fe1\u590d\u7528\u5668\u7684\u65b0\u63a7\u5236\u7ed3\u6784\uff1aselect\u3002 \u5176\u8bed\u6cd5\u4e5f\u6709\u4e9b\u8bb8\u4e0d\u540c\uff1a\u6ca1\u6709\u5706\u62ec\u53f7\uff0c\u800c\u5176\u4e3b\u4f53\u5fc5\u987b\u59cb\u7ec8\u4f7f\u7528\u5927\u62ec\u53f7\u62ec\u4f4f\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"if",children:"If"}),"\n",(0,i.jsx)(n.p,{children:"In Go a simple if looks like this:"}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Go \u4e2d\uff0c\u4e00\u4e2a\u7b80\u5355\u7684 if \u8bed\u53e5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if x > 0 {\n\treturn y\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Mandatory braces encourage writing simple if statements on multiple lines. It's good style to do so anyway, especially when the body contains a control statement such as a return or break."}),"\n",(0,i.jsx)(n.p,{children:"\u5f3a\u5236\u7684\u5927\u62ec\u53f7\u4fc3\u4f7f\u4f60\u5c06\u7b80\u5355\u7684 if \u8bed\u53e5\u5206\u6210\u591a\u884c\u3002\u7279\u522b\u662f\u5728\u4e3b\u4f53\u4e2d\u5305\u542b return \u6216 break \u7b49\u63a7\u5236\u8bed\u53e5\u65f6\uff0c\u8fd9\u79cd\u7f16\u7801\u98ce\u683c\u7684\u597d\u5904\u4e00\u6bd4\u4fbf\u77e5\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Since if and switch accept an initialization statement, it's common to see one used to set up a local variable."}),"\n",(0,i.jsx)(n.p,{children:"\u7531\u4e8e if \u548c switch \u53ef\u63a5\u53d7\u521d\u59cb\u5316\u8bed\u53e5\uff0c \u56e0\u6b64\u7528\u5b83\u4eec\u6765\u8bbe\u7f6e\u5c40\u90e8\u53d8\u91cf\u5341\u5206\u5e38\u89c1\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if err := file.Chmod(0664); err != nil {\n\tlog.Print(err)\n\treturn err\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the Go libraries, you'll find that when an if statement doesn't flow into the next statement\u2014that is, the body ends in break, continue, goto, or return\u2014the unnecessary else is omitted."}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Go \u7684\u5e93\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\u82e5 if \u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\u5230\u4e0b\u4e00\u6761\u8bed\u53e5\u65f6\uff0c\u4ea6\u5373\u5176\u6267\u884c\u4f53 \u4ee5 break\u3001continue\u3001goto \u6216 return \u7ed3\u675f\u65f6\uff0c\u4e0d\u5fc5\u8981\u7684 else \u4f1a\u88ab\u7701\u7565\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"f, err := os.Open(name)\nif err != nil {\n\treturn err\n}\ncodeUsing(f)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is an example of a common situation where code must guard against a sequence of error conditions. The code reads well if the successful flow of control runs down the page, eliminating error cases as they arise. Since error cases tend to end in return statements, the resulting code needs no else statements."}),"\n",(0,i.jsx)(n.p,{children:"\u4e0b\u4f8b\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u4ee3\u7801\u5fc5\u987b\u9632\u8303\u4e00\u7cfb\u5217\u7684\u9519\u8bef\u6761\u4ef6\u3002\u82e5\u63a7\u5236\u6d41\u6210\u529f\u7ee7\u7eed\uff0c \u5219\u8bf4\u660e\u7a0b\u5e8f\u5df2\u6392\u9664\u9519\u8bef\u3002\u7531\u4e8e\u51fa\u9519\u65f6\u5c06\u4ee5 return \u7ed3\u675f\uff0c \u4e4b\u540e\u7684\u4ee3\u7801\u4e5f\u5c31\u65e0\u9700 else \u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"f, err := os.Open(name)\nif err != nil {\n\treturn err\n}\nd, err := f.Stat()\nif err != nil {\n\tf.Close()\n\treturn err\n}\ncodeUsing(f, d)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"redeclaration-and-reassignment",children:"Redeclaration and reassignment"}),"\n",(0,i.jsx)(n.h3,{id:"\u91cd\u65b0\u58f0\u660e\u4e0e\u518d\u6b21\u8d4b\u503c",children:"\u91cd\u65b0\u58f0\u660e\u4e0e\u518d\u6b21\u8d4b\u503c"}),"\n",(0,i.jsx)(n.p,{children:"An aside: The last example in the previous section demonstrates a detail of how the := short declaration form works. The declaration that calls os.Open reads,"}),"\n",(0,i.jsx)(n.p,{children:"\u9898\u5916\u8bdd\uff1a\u4e0a\u4e00\u8282\u4e2d\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u77ed\u58f0\u660e := \u5982\u4f55\u4f7f\u7528\u3002 \u8c03\u7528\u4e86 os.Open \u7684\u58f0\u660e\u4e3a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"f, err := os.Open(name)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This statement declares two variables, f and err. A few lines later, the call to f.Stat reads,"}),"\n",(0,i.jsx)(n.p,{children:"\u8be5\u8bed\u53e5\u58f0\u660e\u4e86\u4e24\u4e2a\u53d8\u91cf f \u548c err\u3002\u5728\u51e0\u884c\u4e4b\u540e\uff0c\u53c8\u901a\u8fc7"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"d, err := f.Stat()\n"})}),"\n",(0,i.jsx)(n.p,{children:"which looks as if it declares d and err. Notice, though, that err appears in both statements. This duplication is legal: err is declared by the first statement, but only re-assigned in the second. This means that the call to f.Stat uses the existing err variable declared above, and just gives it a new value."}),"\n",(0,i.jsx)(n.p,{children:"\u8c03\u7528\u4e86 f.Stat\u3002\u5b83\u770b\u8d77\u6765\u4f3c\u4e4e\u662f\u58f0\u660e\u4e86 d \u548c err\u3002 \u6ce8\u610f\uff0c\u5c3d\u7ba1\u4e24\u4e2a\u8bed\u53e5\u4e2d\u90fd\u51fa\u73b0\u4e86 err\uff0c\u4f46\u8fd9\u79cd\u91cd\u590d\u4ecd\u7136\u662f\u5408\u6cd5\u7684\uff1aerr \u5728\u7b2c\u4e00\u6761\u8bed\u53e5\u4e2d\u88ab\u58f0\u660e\uff0c\u4f46\u5728\u7b2c\u4e8c\u6761\u8bed\u53e5\u4e2d\u53ea\u662f\u88ab\u518d\u6b21\u8d4b\u503c\u7f62\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8c03\u7528 f.Stat \u4f7f\u7528\u7684\u662f\u524d\u9762\u5df2\u7ecf\u58f0\u660e\u7684 err\uff0c\u5b83\u53ea\u662f\u88ab\u91cd\u65b0\u8d4b\u503c\u4e86\u800c\u5df2\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In a := declaration a variable v may appear even if it has already been declared, provided:"}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u65f6\uff0c\u5df2\u88ab\u58f0\u660e\u7684\u53d8\u91cf v \u53ef\u51fa\u73b0\u5728:= \u58f0\u660e\u4e2d\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"this declaration is in the same scope as the existing declaration of v (if v is already declared in an outer scope, the declaration will create a new variable \xa7),"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"the corresponding value in the initialization is assignable to v, and"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"there is at least one other variable in the declaration that is being declared anew."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u672c\u6b21\u58f0\u660e\u4e0e\u5df2\u58f0\u660e\u7684 v \u5904\u4e8e\u540c\u4e00\u4f5c\u7528\u57df\u4e2d\uff08\u82e5 v \u5df2\u5728\u5916\u5c42\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\u8fc7\uff0c\u5219\u6b64\u6b21\u58f0\u660e\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf \xa7\uff09\uff0c"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u5728\u521d\u59cb\u5316\u4e2d\u4e0e\u5176\u7c7b\u578b\u76f8\u5e94\u7684\u503c\u624d\u80fd\u8d4b\u4e88 v\uff0c\u4e14"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u5728\u6b64\u6b21\u58f0\u660e\u4e2d\u81f3\u5c11\u53e6\u6709\u4e00\u4e2a\u53d8\u91cf\u662f\u65b0\u58f0\u660e\u7684\u3002"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This unusual property is pure pragmatism, making it easy to use a single err value, for example, in a long if-else chain. You'll see it used often."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e2a\u7279\u6027\u7b80\u76f4\u5c31\u662f\u7eaf\u7cb9\u7684\u5b9e\u7528\u4e3b\u4e49\u4f53\u73b0\uff0c\u5b83\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u53ea\u4f7f\u7528\u4e00\u4e2a err \u503c\uff0c\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u76f8\u5f53\u957f\u7684 if-else \u8bed\u53e5\u94fe\u4e2d\uff0c \u4f60\u4f1a\u53d1\u73b0\u5b83\u7528\u5f97\u5f88\u9891\u7e41\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\xa7 It's worth noting here that in Go the scope of function parameters and return values is the same as the function body, even though they appear lexically outside the braces that enclose the body."}),"\n",(0,i.jsx)(n.p,{children:"\xa7 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5373\u4fbf Go \u4e2d\u7684\u51fd\u6570\u5f62\u53c2\u548c\u8fd4\u56de\u503c\u5728\u8bcd\u6cd5\u4e0a\u5904\u4e8e\u5927\u62ec\u53f7\u4e4b\u5916\uff0c \u4f46\u5b83\u4eec\u7684\u4f5c\u7528\u57df\u548c\u8be5\u51fd\u6570\u4f53\u4ecd\u7136\u76f8\u540c\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"for",children:"For"}),"\n",(0,i.jsx)(n.p,{children:"The Go for loop is similar to\u2014but not the same as\u2014C's. It unifies for and while and there is no do-while. There are three forms, only one of which has semicolons."}),"\n",(0,i.jsx)(n.p,{children:"Go \u7684 for \u5faa\u73af\u7c7b\u4f3c\u4e8e C\uff0c\u4f46\u5374\u4e0d\u5c3d\u76f8\u540c\u3002\u5b83\u7edf\u4e00\u4e86 for \u548c while\uff0c\u4e0d\u518d\u6709 do-while \u4e86\u3002\u5b83\u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u4f46\u53ea\u6709\u4e00\u79cd\u9700\u8981\u5206\u53f7\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Like a C for\nfor init; condition; post { }\n\n// Like a C while\nfor condition { }\n\n// Like a C for(;;)\nfor { }\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// \u5982\u540c C \u7684 for \u5faa\u73af\nfor init; condition; post { }\n\n// \u5982\u540c C \u7684 while \u5faa\u73af\nfor condition { }\n\n// \u5982\u540c C \u7684 for(;;) \u5faa\u73af\nfor { }\n"})}),"\n",(0,i.jsx)(n.p,{children:"Short declarations make it easy to declare the index variable right in the loop."}),"\n",(0,i.jsx)(n.p,{children:"\u7b80\u77ed\u58f0\u660e\u80fd\u8ba9\u6211\u4eec\u66f4\u5bb9\u6613\u5728\u5faa\u73af\u4e2d\u58f0\u660e\u4e0b\u6807\u53d8\u91cf\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"sum := 0\nfor i := 0; i < 10; i++ {\n\tsum += i\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you're looping over an array, slice, string, or map, or reading from a channel, a range clause can manage the loop."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u4f60\u60f3\u904d\u5386\u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6620\u5c04\uff0c\u6216\u4ece\u4fe1\u9053\u4e2d\u8bfb\u53d6\u6d88\u606f\uff0c range \u5b50\u53e5\u80fd\u591f\u5e2e\u4f60\u8f7b\u677e\u5b9e\u73b0\u5faa\u73af\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for key, value := range oldMap {\n\tnewMap[key] = value\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you only need the first item in the range (the key or index), drop the second:"}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u4f60\u53ea\u9700\u8981\u8be5\u904d\u5386\u4e2d\u7684\u7b2c\u4e00\u4e2a\u9879\uff08\u952e\u6216\u4e0b\u6807\uff09\uff0c\u53bb\u6389\u7b2c\u4e8c\u4e2a\u5c31\u884c\u4e86\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for key := range m {\n\tif key.expired() {\n\t\tdelete(m, key)\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you only need the second item in the range (the value), use the blank identifier, an underscore, to discard the first:"}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u4f60\u53ea\u9700\u8981\u8be5\u904d\u5386\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u9879\uff08\u503c\uff09\uff0c\u8bf7\u4f7f\u7528\u7a7a\u767d\u6807\u8bc6\u7b26\uff0c\u5373\u4e0b\u5212\u7ebf\u6765\u4e22\u5f03\u7b2c\u4e00\u4e2a\u503c\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"sum := 0\nfor _, value := range array {\n\tsum += value\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The blank identifier has many uses, as described in a later section."}),"\n",(0,i.jsx)(n.p,{children:"\u7a7a\u767d\u6807\u8bc6\u7b26\u8fd8\u6709\u591a\u79cd\u7528\u6cd5\uff0c\u5b83\u4f1a\u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d\u63cf\u8ff0\u3002"}),"\n",(0,i.jsx)(n.p,{children:"For strings, the range does more work for you, breaking out individual Unicode code points by parsing the UTF-8. Erroneous encodings consume one byte and produce the replacement rune U+FFFD. (The name (with associated builtin type) rune is Go terminology for a single Unicode code point. See the language specification for details.) The loop"}),"\n",(0,i.jsx)(n.p,{children:"\u5bf9\u4e8e\u5b57\u7b26\u4e32\uff0crange \u80fd\u591f\u63d0\u4f9b\u66f4\u591a\u4fbf\u5229\u3002\u5b83\u80fd\u901a\u8fc7\u89e3\u6790 UTF-8\uff0c \u5c06\u6bcf\u4e2a\u72ec\u7acb\u7684 Unicode \u7801\u70b9\u5206\u79bb\u51fa\u6765\u3002\u9519\u8bef\u7684\u7f16\u7801\u5c06\u5360\u7528\u4e00\u4e2a\u5b57\u8282\uff0c\u5e76\u4ee5\u7b26\u6587 U+FFFD \u6765\u4ee3\u66ff\u3002 \uff08\u540d\u79f0 \u201c\u7b26\u6587\u201d \u548c\u5185\u5efa\u7c7b\u578b rune \u662f Go \u5bf9\u5355\u4e2a Unicode \u7801\u70b9\u7684\u79f0\u8c13\u3002 \u8be6\u60c5\u89c1\u8bed\u8a00\u89c4\u8303\uff09\u3002\u5faa\u73af"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'for pos, char := range "\u65e5\u672c \\ x80 \u8a9e" { // \\x80 is an illegal UTF-8 encoding\n\tfmt.Printf("character %#U starts at byte position %d\\n", char, pos)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"prints"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"character U+65E5 '\u65e5' starts at byte position 0\ncharacter U+672C '\u672c' starts at byte position 3\ncharacter U+FFFD '\ufffd' starts at byte position 6\ncharacter U+8A9E '\u8a9e' starts at byte position 7\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'for pos, char := range "\u65e5\u672c\\x80\u8a9e" { // \\x80 \u662f\u4e2a\u975e\u6cd5\u7684UTF-8\u7f16\u7801\n\tfmt.Printf("\u5b57\u7b26 %#U \u59cb\u4e8e\u5b57\u8282\u4f4d\u7f6e %d\\n", char, pos)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u5c06\u6253\u5370"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\u5b57\u7b26 U+65E5 '\u65e5' \u59cb\u4e8e\u5b57\u8282\u4f4d\u7f6e 0\n\u5b57\u7b26 U+672C '\u672c' \u59cb\u4e8e\u5b57\u8282\u4f4d\u7f6e 3\n\u5b57\u7b26 U+FFFD '\ufffd' \u59cb\u4e8e\u5b57\u8282\u4f4d\u7f6e 6\n\u5b57\u7b26 U+8A9E '\u8a9e' \u59cb\u4e8e\u5b57\u8282\u4f4d\u7f6e 7\n"})}),"\n",(0,i.jsx)(n.p,{children:"Finally, Go has no comma operator and ++ and -- are statements not expressions. Thus if you want to run multiple variables in a for you should use parallel assignment (although that precludes ++ and --)."}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u540e\uff0cGo \u6ca1\u6709\u9017\u53f7\u64cd\u4f5c\u7b26\uff0c\u800c ++ \u548c -- \u4e3a\u8bed\u53e5\u800c\u975e\u8868\u8fbe\u5f0f\u3002 \u56e0\u6b64\uff0c\u82e5\u4f60\u60f3\u8981\u5728 for \u4e2d\u4f7f\u7528\u591a\u4e2a\u53d8\u91cf\uff0c\u5e94\u91c7\u7528\u5e73\u884c\u8d4b\u503c\u7684\u65b9\u5f0f \uff08\u56e0\u4e3a\u5b83\u4f1a\u62d2\u7edd ++ \u548c --\uff09."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Reverse a\nfor i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {\n\ta[i], a[j] = a[j], a[i]\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// \u53cd\u8f6c a\nfor i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {\n\ta[i], a[j] = a[j], a[i]\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"switch",children:"Switch"}),"\n",(0,i.jsx)(n.p,{children:"Go's switch is more general than C's. The expressions need not be constants or even integers, the cases are evaluated top to bottom until a match is found, and if the switch has no expression it switches on true. It's therefore possible\u2014and idiomatic\u2014to write an if-else-if-else chain as a switch."}),"\n",(0,i.jsx)(n.p,{children:"Go \u7684 switch \u6bd4 C \u7684\u66f4\u901a\u7528\u3002\u5176\u8868\u8fbe\u5f0f\u65e0\u9700\u4e3a\u5e38\u91cf\u6216\u6574\u6570\uff0ccase \u8bed\u53e5\u4f1a\u81ea\u4e0a\u800c\u4e0b\u9010\u4e00\u8fdb\u884c\u6c42\u503c\u76f4\u5230\u5339\u914d\u4e3a\u6b62\u3002\u82e5 switch \u540e\u9762\u6ca1\u6709\u8868\u8fbe\u5f0f\uff0c\u5b83\u5c06\u5339\u914d true\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 if-else-if-else \u94fe\u5199\u6210\u4e00\u4e2a switch\uff0c\u8fd9\u4e5f\u66f4\u7b26\u5408 Go \u7684\u98ce\u683c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func unhex(c byte) byte {\n\tswitch {\n\tcase '0' <= c && c <= '9':\n\t\treturn c - '0'\n\tcase 'a' <= c && c <= 'f':\n\t\treturn c - 'a' + 10\n\tcase 'A' <= c && c <= 'F':\n\t\treturn c - 'A' + 10\n\t}\n\treturn 0\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"There is no automatic fall through, but cases can be presented in comma-separated lists."}),"\n",(0,i.jsx)(n.p,{children:"switch \u5e76\u4e0d\u4f1a\u81ea\u52a8\u4e0b\u6eaf\uff0c\u4f46 case \u53ef\u901a\u8fc7\u9017\u53f7\u5206\u9694\u6765\u5217\u4e3e\u76f8\u540c\u7684\u5904\u7406\u6761\u4ef6\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func shouldEscape(c byte) bool {\n\tswitch c {\n\tcase ' ', '?', '&', '=', '#', '+', '%':\n\t\treturn true\n\t}\n\treturn false\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'Although they are not nearly as common in Go as some other C-like languages, break statements can be used to terminate a switch early. Sometimes, though, it\'s necessary to break out of a surrounding loop, not the switch, and in Go that can be accomplished by putting a label on the loop and"breaking" to that label. This example shows both uses.'}),"\n",(0,i.jsx)(n.p,{children:"\u5c3d\u7ba1\u5b83\u4eec\u5728 Go \u4e2d\u7684\u7528\u6cd5\u548c\u5176\u5b83\u7c7b C \u8bed\u8a00\u5dee\u4e0d\u591a\uff0c\u4f46 break \u8bed\u53e5\u53ef\u4ee5\u4f7f switch \u63d0\u524d\u7ec8\u6b62\u3002\u4e0d\u4ec5\u662f switch\uff0c \u6709\u65f6\u5019\u4e5f\u5fc5\u987b\u6253\u7834\u5c42\u5c42\u7684\u5faa\u73af\u3002\u5728 Go \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u6807\u7b7e\u653e\u7f6e\u5230\u5faa\u73af\u5916\uff0c\u7136\u540e \u201c\u8e66\u201d \u5230\u90a3\u91cc\u5373\u53ef\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u4e8c\u8005\u7684\u7528\u6cd5\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Loop:\n\tfor n := 0; n < len(src); n += size {\n\t\tswitch {\n\t\tcase src[n] < sizeOne:\n\t\t\tif validateOnly {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tsize = 1\n\t\t\tupdate(src[n])\n\n\t\tcase src[n] < sizeTwo:\n\t\t\tif n+1 >= len(src) {\n\t\t\t\terr = errShortInput\n\t\t\t\tbreak Loop\n\t\t\t}\n\t\t\tif validateOnly {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tsize = 2\n\t\t\tupdate(src[n] + src[n+1]<<shift)\n\t\t}\n\t}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Of course, the continue statement also accepts an optional label but it applies only to loops."}),"\n",(0,i.jsx)(n.p,{children:"\u5f53\u7136\uff0ccontinue \u8bed\u53e5\u4e5f\u80fd\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u6807\u7b7e\uff0c\u4e0d\u8fc7\u5b83\u53ea\u80fd\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u3002"}),"\n",(0,i.jsx)(n.p,{children:"To close this section, here's a comparison routine for byte slices that uses two switch statements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Compare returns an integer comparing the two byte slices,\n// lexicographically.\n// The result will be 0 if a == b, -1 if a < b, and +1 if a > b\nfunc Compare(a, b []byte) int {\n\tfor i := 0; i < len(a) && i < len(b); i++ {\n\t\tswitch {\n\t\tcase a[i] > b[i]:\n\t\t\treturn 1\n\t\tcase a[i] < b[i]:\n\t\t\treturn -1\n\t\t}\n\t}\n\tswitch {\n\tcase len(a) > len(b):\n\t\treturn 1\n\tcase len(a) < len(b):\n\t\treturn -1\n\t}\n\treturn 0\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u4f5c\u4e3a\u8fd9\u4e00\u8282\u7684\u7ed3\u675f\uff0c\u6b64\u7a0b\u5e8f\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a switch \u8bed\u53e5\u5bf9\u5b57\u8282\u6570\u7ec4\u8fdb\u884c\u6bd4\u8f83\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Compare \u6309\u5b57\u5178\u987a\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5b57\u8282\u5207\u7247\u5e76\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002\n// \u82e5 a == b\uff0c\u5219\u7ed3\u679c\u4e3a\u96f6\uff1b\u82e5 a < b\uff1b\u5219\u7ed3\u679c\u4e3a -1\uff1b\u82e5 a > b\uff0c\u5219\u7ed3\u679c\u4e3a +1\u3002\nfunc Compare(a, b []byte) int {\n\tfor i := 0; i < len(a) && i < len(b); i++ {\n\t\tswitch {\n\t\tcase a[i] > b[i]:\n\t\t\treturn 1\n\t\tcase a[i] < b[i]:\n\t\t\treturn -1\n\t\t}\n\t}\n\tswitch {\n\tcase len(a) > len(b):\n\t\treturn 1\n\tcase len(a) < len(b):\n\t\treturn -1\n\t}\n\treturn 0\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-switch",children:"Type switch"}),"\n",(0,i.jsx)(n.h3,{id:"\u7c7b\u578b\u9009\u62e9",children:"\u7c7b\u578b\u9009\u62e9"}),"\n",(0,i.jsx)(n.p,{children:"A switch can also be used to discover the dynamic type of an interface variable. Such a type switch uses the syntax of a type assertion with the keyword type inside the parentheses. If the switch declares a variable in the expression, the variable will have the corresponding type in each clause. It's also idiomatic to reuse the name in such cases, in effect declaring a new variable with the same name but a different type in each case."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n\tfmt.Printf("unexpected type %T", t)       // %T prints whatever type t has\ncase bool:\n\tfmt.Printf("boolean %t\\n", t)             // t has type bool\ncase int:\n\tfmt.Printf("integer %d\\n", t)             // t has type int\ncase *bool:\n\tfmt.Printf("pointer to boolean %t\\n", *t) // t has type *bool\ncase *int:\n\tfmt.Printf("pointer to integer %d\\n", *t) // t has type *int\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"switch \u4e5f\u53ef\u7528\u4e8e\u5224\u65ad\u63a5\u53e3\u53d8\u91cf\u7684\u52a8\u6001\u7c7b\u578b\u3002\u5982 \u7c7b\u578b\u9009\u62e9 \u901a\u8fc7\u5706\u62ec\u53f7\u4e2d\u7684\u5173\u952e\u5b57 type \u4f7f\u7528\u7c7b\u578b\u65ad\u8a00\u8bed\u6cd5\u3002\u82e5 switch \u5728\u8868\u8fbe\u5f0f\u4e2d\u58f0\u660e\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u90a3\u4e48\u8be5\u53d8\u91cf\u7684\u6bcf\u4e2a\u5b50\u53e5\u4e2d\u90fd\u5c06\u6709\u8be5\u53d8\u91cf\u5bf9\u5e94\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u4e9b case \u4e2d\u91cd\u7528\u4e00\u4e2a\u540d\u5b57\u4e5f\u662f\u7b26\u5408\u8bed\u4e49\u7684\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u6bcf\u4e2a case \u91cc\u58f0\u660e\u4e86\u4e00\u4e2a\u4e0d\u540c\u7c7b\u578b\u4f46\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n\tfmt.Printf("unexpected type %T", t)       // %T \u8f93\u51fa t \u662f\u4ec0\u4e48\u7c7b\u578b\ncase bool:\n\tfmt.Printf("boolean %t\\n", t)             // t \u662f bool \u7c7b\u578b\ncase int:\n\tfmt.Printf("integer %d\\n", t)             // t \u662f int \u7c7b\u578b\ncase *bool:\n\tfmt.Printf("pointer to boolean %t\\n", *t) // t \u662f *bool \u7c7b\u578b\ncase *int:\n\tfmt.Printf("pointer to integer %d\\n", *t) // t \u662f *int \u7c7b\u578b\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h2,{id:"\u51fd\u6570",children:"\u51fd\u6570"}),"\n",(0,i.jsx)(n.h3,{id:"multiple-return-values",children:"Multiple return values"}),"\n",(0,i.jsx)(n.h3,{id:"\u591a\u503c\u8fd4\u56de",children:"\u591a\u503c\u8fd4\u56de"}),"\n",(0,i.jsx)(n.p,{children:"One of Go's unusual features is that functions and methods can return multiple values. This form can be used to improve on a couple of clumsy idioms in C programs: in-band error returns such as -1 for EOF and modifying an argument passed by address."}),"\n",(0,i.jsx)(n.p,{children:"Go \u4e0e\u4f17\u4e0d\u540c\u7684\u7279\u6027\u4e4b\u4e00\u5c31\u662f\u51fd\u6570\u548c\u65b9\u6cd5\u53ef\u8fd4\u56de\u591a\u4e2a\u503c\u3002\u8fd9\u79cd\u5f62\u5f0f\u53ef\u4ee5\u6539\u5584 C \u4e2d\u4e00\u4e9b\u7b28\u62d9\u7684\u4e60\u60ef\uff1a \u5c06\u9519\u8bef\u503c\u8fd4\u56de\uff08\u4f8b\u5982\u7528 -1 \u8868\u793a EOF\uff09\u548c\u4fee\u6539\u901a\u8fc7\u5730\u5740\u4f20\u5165\u7684\u5b9e\u53c2\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In C, a write error is signaled by a negative count with the error code secreted away in a volatile location. In Go, Write can return a count and an error: \u201cYes, you wrote some bytes but not all of them because you filled the device\u201d. The signature of the Write method on files from package os is:"}),"\n",(0,i.jsx)(n.p,{children:"\u5728 C \u4e2d\uff0c\u5199\u5165\u64cd\u4f5c\u53d1\u751f\u7684\u9519\u8bef\u4f1a\u7528\u4e00\u4e2a\u8d1f\u6570\u6807\u8bb0\uff0c\u800c\u9519\u8bef\u7801\u4f1a\u9690\u85cf\u5728\u67d0\u4e2a\u4e0d\u786e\u5b9a\u7684\u4f4d\u7f6e\u3002 \u800c\u5728 Go \u4e2d\uff0cWrite \u4f1a\u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\u6570\u4ee5\u53ca\u4e00\u4e2a\u9519\u8bef\uff1a \u201c\u662f\u7684\uff0c\u60a8\u5199\u5165\u4e86\u4e00\u4e9b\u5b57\u8282\uff0c\u4f46\u5e76\u672a\u5168\u90e8\u5199\u5165\uff0c\u56e0\u4e3a\u8bbe\u5907\u5df2\u6ee1\u201d\u3002 \u5728 os \u5305\u4e2d\uff0cFile.Write \u7684\u7b7e\u540d\u4e3a\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (file *File) Write(b []byte) (n int, err error)\n"})}),"\n",(0,i.jsx)(n.p,{children:"and as the documentation says, it returns the number of bytes written and a non-nil error when n != len(b). This is a common style; see the section on error handling for more examples."}),"\n",(0,i.jsx)(n.p,{children:"\u6b63\u5982\u6587\u6863\u6240\u8ff0\uff0c\u5b83\u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u5e76\u5728 n != len(b) \u65f6\u8fd4\u56de\u4e00\u4e2a\u975e nil \u7684 error \u9519\u8bef\u503c\u3002 \u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u7f16\u7801\u98ce\u683c\uff0c\u66f4\u591a\u793a\u4f8b\u89c1\u9519\u8bef\u5904\u7406\u4e00\u8282\u3002"}),"\n",(0,i.jsx)(n.p,{children:"A similar approach obviates the need to pass a pointer to a return value to simulate a reference parameter. Here's a simple-minded function to grab a number from a position in a byte slice, returning the number and the next position."}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u6765\u907f\u514d\u4e3a\u6a21\u62df\u5f15\u7528\u53c2\u6570\u800c\u4f20\u5165\u6307\u9488\u3002 \u4ee5\u4e0b\u7b80\u5355\u7684\u51fd\u6570\u53ef\u4ece\u5b57\u8282\u6570\u7ec4\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u83b7\u53d6\u5176\u503c\uff0c\u5e76\u8fd4\u56de\u8be5\u6570\u503c\u548c\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func nextInt(b []byte, i int) (int, int) {\n\tfor ; i < len(b) && !isDigit(b[i]); i++ {\n\t}\n\tx := 0\n\tfor ; i < len(b) && isDigit(b[i]); i++ {\n\t\tx = x*10 + int(b[i]) - '0'\n\t}\n\treturn x, i\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You could use it to scan the numbers in an input slice b like this:"}),"\n",(0,i.jsx)(n.p,{children:"\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\uff0c\u901a\u8fc7\u5b83\u626b\u63cf\u8f93\u5165\u7684\u5207\u7247 b \u6765\u83b7\u53d6\u6570\u5b57\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\tfor i := 0; i < len(b); {\n\t\tx, i = nextInt(b, i)\n\t\tfmt.Println(x)\n\t}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"named-result-parameters",children:"Named result parameters"}),"\n",(0,i.jsx)(n.h3,{id:"\u53ef\u547d\u540d\u7ed3\u679c\u5f62\u53c2",children:"\u53ef\u547d\u540d\u7ed3\u679c\u5f62\u53c2"}),"\n",(0,i.jsx)(n.p,{children:'The return or result "parameters" of a Go function can be given names and used as regular variables, just like the incoming parameters. When named, they are initialized to the zero values for their types when the function begins; if the function executes a return statement with no arguments, the current values of the result parameters are used as the returned values.'}),"\n",(0,i.jsx)(n.p,{children:"Go \u51fd\u6570\u7684\u8fd4\u56de\u503c\u6216\u7ed3\u679c \u201c\u5f62\u53c2\u201d \u53ef\u88ab\u547d\u540d\uff0c\u5e76\u4f5c\u4e3a\u5e38\u89c4\u53d8\u91cf\u4f7f\u7528\uff0c\u5c31\u50cf\u4f20\u5165\u7684\u5f62\u53c2\u4e00\u6837\u3002 \u547d\u540d\u540e\uff0c\u4e00\u65e6\u8be5\u51fd\u6570\u5f00\u59cb\u6267\u884c\uff0c\u5b83\u4eec\u5c31\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a\u4e0e\u5176\u7c7b\u578b\u76f8\u5e94\u7684\u96f6\u503c\uff1b \u82e5\u8be5\u51fd\u6570\u6267\u884c\u4e86\u4e00\u6761\u4e0d\u5e26\u5b9e\u53c2\u7684 return \u8bed\u53e5\uff0c\u5219\u7ed3\u679c\u5f62\u53c2\u7684\u5f53\u524d\u503c\u5c06\u88ab\u8fd4\u56de\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The names are not mandatory but they can make code shorter and clearer: they're documentation. If we name the results of nextInt it becomes obvious which returned int is which."}),"\n",(0,i.jsx)(n.p,{children:"\u6b64\u540d\u79f0\u4e0d\u662f\u5f3a\u5236\u6027\u7684\uff0c\u4f46\u5b83\u4eec\u80fd\u4f7f\u4ee3\u7801\u66f4\u52a0\u7b80\u77ed\u6e05\u6670\uff1a\u5b83\u4eec\u5c31\u662f\u6587\u6863\u3002\u82e5\u6211\u4eec\u547d\u540d\u4e86 nextInt \u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u5b83\u8fd4\u56de\u7684 int \u5c31\u503c\u5982\u5176\u610f\u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func nextInt(b []byte, pos int) (value, nextPos int) {\n"})}),"\n",(0,i.jsx)(n.p,{children:"Because named results are initialized and tied to an unadorned return, they can simplify as well as clarify. Here's a version of io.ReadFull that uses them well:"}),"\n",(0,i.jsx)(n.p,{children:"\u7531\u4e8e\u88ab\u547d\u540d\u7684\u7ed3\u679c\u5df2\u7ecf\u521d\u59cb\u5316\uff0c\u4e14\u5df2\u7ecf\u5173\u8054\u81f3\u65e0\u53c2\u6570\u7684\u8fd4\u56de\uff0c\u5b83\u4eec\u5c31\u80fd\u8ba9\u4ee3\u7801\u7b80\u5355\u800c\u6e05\u6670\u3002 \u4e0b\u9762\u7684 io.ReadFull \u5c31\u662f\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func ReadFull(r Reader, buf []byte) (n int, err error) {\n\tfor len(buf) > 0 && err == nil {\n\t\tvar nr int\n\t\tnr, err = r.Read(buf)\n\t\tn += nr\n\t\tbuf = buf[nr:]\n\t}\n\treturn\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"defer",children:"Defer"}),"\n",(0,i.jsx)(n.p,{children:"Go's defer statement schedules a function call (the deferred function) to be run immediately before the function executing the defer returns. It's an unusual but effective way to deal with situations such as resources that must be released regardless of which path a function takes to return. The canonical examples are unlocking a mutex or closing a file."}),"\n",(0,i.jsx)(n.p,{children:"Go \u7684 defer \u8bed\u53e5\u7528\u4e8e\u9884\u8bbe\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff08\u5373\u63a8\u8fdf\u6267\u884c\u51fd\u6570\uff09\uff0c \u8be5\u51fd\u6570\u4f1a\u5728\u6267\u884c defer \u7684\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u7acb\u5373\u6267\u884c\u3002\u5b83\u663e\u5f97\u975e\u6bd4\u5bfb\u5e38\uff0c \u4f46\u5374\u662f\u5904\u7406\u4e00\u4e9b\u4e8b\u60c5\u7684\u6709\u6548\u65b9\u5f0f\uff0c\u4f8b\u5982\u65e0\u8bba\u4ee5\u4f55\u79cd\u8def\u5f84\u8fd4\u56de\uff0c\u90fd\u5fc5\u987b\u91ca\u653e\u8d44\u6e90\u7684\u51fd\u6570\u3002 \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u89e3\u9501\u4e92\u65a5\u548c\u5173\u95ed\u6587\u4ef6\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Contents returns the file\'s contents as a string.\nfunc Contents(filename string) (string, error) {\n\tf, err := os.Open(filename)\n\tif err != nil {\n\t\treturn "", err\n\t}\n\tdefer f.Close()  // f.Close will run when we\'re finished.\n\n\tvar result []byte\n\tbuf := make([]byte, 100)\n\tfor {\n\t\tn, err := f.Read(buf[0:])\n\t\tresult = append(result, buf[0:n]...) // append is discussed later.\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn "", err  // f will be closed if we return here.\n\t\t}\n\t}\n\treturn string(result), nil // f will be closed if we return here.\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Contents \u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8fd4\u56de\u3002\nfunc Contents(filename string) (string, error) {\n\tf, err := os.Open(filename)\n\tif err != nil {\n\t\treturn "", err\n\t}\n\tdefer f.Close()  // f.Close \u4f1a\u5728\u6211\u4eec\u7ed3\u675f\u540e\u8fd0\u884c\u3002\n\n\tvar result []byte\n\tbuf := make([]byte, 100)\n\tfor {\n\t\tn, err := f.Read(buf[0:])\n\t\tresult = append(result, buf[0:n]...) // append \u5c06\u5728\u540e\u9762\u8ba8\u8bba\u3002\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn "", err  // \u6211\u4eec\u5728\u8fd9\u91cc\u8fd4\u56de\u540e\uff0cf \u5c31\u4f1a\u88ab\u5173\u95ed\u3002\n\t\t}\n\t}\n\treturn string(result), nil // \u6211\u4eec\u5728\u8fd9\u91cc\u8fd4\u56de\u540e\uff0cf \u5c31\u4f1a\u88ab\u5173\u95ed\u3002\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Deferring a call to a function such as Close has two advantages. First, it guarantees that you will never forget to close the file, a mistake that's easy to make if you later edit the function to add a new return path. Second, it means that the close sits near the open, which is much clearer than placing it at the end of the function."}),"\n",(0,i.jsx)(n.p,{children:"\u63a8\u8fdf\u8bf8\u5982 Close \u4e4b\u7c7b\u7684\u51fd\u6570\u8c03\u7528\u6709\u4e24\u70b9\u597d\u5904\uff1a\u7b2c\u4e00\uff0c \u5b83\u80fd\u786e\u4fdd\u4f60\u4e0d\u4f1a\u5fd8\u8bb0\u5173\u95ed\u6587\u4ef6\u3002\u5982\u679c\u4f60\u4ee5\u540e\u53c8\u4e3a\u8be5\u51fd\u6570\u6dfb\u52a0\u4e86\u65b0\u7684\u8fd4\u56de\u8def\u5f84\u65f6\uff0c \u8fd9\u79cd\u60c5\u51b5\u5f80\u5f80\u5c31\u4f1a\u53d1\u751f\u3002\u7b2c\u4e8c\uff0c\u5b83\u610f\u5473\u7740 \u201c\u5173\u95ed\u201d \u79bb \u201c\u6253\u5f00\u201d \u5f88\u8fd1\uff0c \u8fd9\u603b\u6bd4\u5c06\u5b83\u653e\u5728\u51fd\u6570\u7ed3\u5c3e\u5904\u8981\u6e05\u6670\u660e\u4e86\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The arguments to the deferred function (which include the receiver if the function is a method) are evaluated when the defer executes, not when the call executes. Besides avoiding worries about variables changing values as the function executes, this means that a single deferred call site can defer multiple function executions. Here's a silly example."}),"\n",(0,i.jsx)(n.p,{children:"\u88ab\u63a8\u8fdf\u51fd\u6570\u7684\u5b9e\u53c2\uff08\u5982\u679c\u8be5\u51fd\u6570\u4e3a\u65b9\u6cd5\u5219\u8fd8\u5305\u62ec\u63a5\u6536\u8005\uff09\u5728\u63a8\u8fdf\u6267\u884c\u65f6\u5c31\u4f1a\u88ab\u6c42\u503c\uff0c \u800c\u4e0d\u662f\u5728\u8c03\u7528\u6267\u884c\u65f6\u624d\u6c42\u503c\u3002\u8fd9\u6837\u4e0d\u4ec5\u65e0\u9700\u62c5\u5fc3\u53d8\u91cf\u503c\u5728\u51fd\u6570\u6267\u884c\u65f6\u88ab\u6539\u53d8\uff0c \u540c\u65f6\u8fd8\u610f\u5473\u7740\u5355\u4e2a\u88ab\u63a8\u8fdf\u7684\u8c03\u7528\u53ef\u63a8\u8fdf\u591a\u4e2a\u51fd\u6570\u7684\u6267\u884c\u3002\u4e0b\u9762\u662f\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'for i := 0; i < 5; i++ {\n\tdefer fmt.Printf("%d ", i)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Deferred functions are executed in LIFO order, so this code will cause 4 3 2 1 0 to be printed when the function returns. A more plausible example is a simple way to trace function execution through the program. We could write a couple of simple tracing routines like this:"}),"\n",(0,i.jsx)(n.p,{children:"\u88ab\u63a8\u8fdf\u7684\u51fd\u6570\u6309\u7167\u540e\u8fdb\u5148\u51fa\uff08LIFO\uff09\u7684\u987a\u5e8f\u6267\u884c\uff0c\u56e0\u6b64\u4ee5\u4e0a\u4ee3\u7801\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u6253\u5370 4 3 2 1 0\u3002\u4e00\u4e2a\u66f4\u5177\u5b9e\u9645\u610f\u4e49\u7684\u4f8b\u5b50\u662f\u901a\u8fc7\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c \u7528\u7a0b\u5e8f\u6765\u8ddf\u8e2a\u51fd\u6570\u7684\u6267\u884c\u3002\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u5bf9\u7b80\u5355\u7684\u8ddf\u8e2a\u4f8b\u7a0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func trace(s string)   { fmt.Println("entering:", s) }\nfunc untrace(s string) { fmt.Println("leaving:", s) }\n\n// Use them like this:\nfunc a() {\n\ttrace("a")\n\tdefer untrace("a")\n\t// do something....\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func trace(s string)   { fmt.Println("entering:", s) }\nfunc untrace(s string) { fmt.Println("leaving:", s) }\n\n// \u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\u4eec\uff1a\nfunc a() {\n\ttrace("a")\n\tdefer untrace("a")\n\t// \u505a\u4e00\u4e9b\u4e8b\u60c5....\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"We can do better by exploiting the fact that arguments to deferred functions are evaluated when the defer executes. The tracing routine can set up the argument to the untracing routine. This example:"}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u53ef\u4ee5\u5145\u5206\u5229\u7528\u8fd9\u4e2a\u7279\u70b9\uff0c\u5373\u88ab\u63a8\u8fdf\u51fd\u6570\u7684\u5b9e\u53c2\u5728 defer \u6267\u884c\u65f6\u5c31\u4f1a\u88ab\u6c42\u503c\u3002 \u8ddf\u8e2a\u4f8b\u7a0b\u53ef\u9488\u5bf9\u53cd\u8ddf\u8e2a\u4f8b\u7a0b\u8bbe\u7f6e\u5b9e\u53c2\u3002\u4ee5\u4e0b\u4f8b\u5b50\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func trace(s string) string {\n\tfmt.Println("entering:", s)\n\treturn s\n}\n\nfunc un(s string) {\n\tfmt.Println("leaving:", s)\n}\n\nfunc a() {\n\tdefer un(trace("a"))\n\tfmt.Println("in a")\n}\n\nfunc b() {\n\tdefer un(trace("b"))\n\tfmt.Println("in b")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"prints"}),"\n",(0,i.jsx)(n.p,{children:"\u4f1a\u6253\u5370"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"entering: b\nin b\nentering: a\nin a\nleaving: a\nleaving: b\n"})}),"\n",(0,i.jsx)(n.p,{children:"For programmers accustomed to block-level resource management from other languages, defer may seem peculiar, but its most interesting and powerful applications come precisely from the fact that it's not block-based but function-based. In the section on panic and recover we'll see another example of its possibilities."}),"\n",(0,i.jsx)(n.p,{children:"\u5bf9\u4e8e\u4e60\u60ef\u5176\u5b83\u8bed\u8a00\u4e2d\u5757\u7ea7\u8d44\u6e90\u7ba1\u7406\u7684\u7a0b\u5e8f\u5458\uff0cdefer \u4f3c\u4e4e\u6709\u70b9\u602a\u5f02\uff0c \u4f46\u5b83\u6700\u6709\u8da3\u800c\u5f3a\u5927\u7684\u5e94\u7528\u6070\u6070\u6765\u81ea\u4e8e\u5176\u57fa\u4e8e\u51fd\u6570\u800c\u975e\u5757\u7684\u7279\u70b9\u3002\u5728 panic \u548c recover \u8fd9\u4e24\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5173\u4e8e\u5b83\u53ef\u80fd\u6027\u7684\u5176\u5b83\u4f8b\u5b50\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"data",children:"Data"}),"\n",(0,i.jsx)(n.h2,{id:"\u6570\u636e",children:"\u6570\u636e"}),"\n",(0,i.jsx)(n.h3,{id:"allocation-with-new",children:"Allocation with new"}),"\n",(0,i.jsx)(n.h3,{id:"new-\u5206\u914d",children:"new \u5206\u914d"}),"\n",(0,i.jsxs)(n.p,{children:["Go has two allocation primitives, the built-in functions new and make. They do different things and apply to different types, which can be confusing, but the rules are simple. Let's talk about new first. It's a built-in function that allocates memory, but unlike its namesakes in some other languages it does not initialize the memory, it only zeros it. That is, new(T) allocates zeroed storage for a new item of type T and returns its address, a value of type ",(0,i.jsx)(n.code,{children:"*T"}),". In Go terminology, it returns a pointer to a newly allocated zero value of type T."]}),"\n",(0,i.jsxs)(n.p,{children:["Go \u63d0\u4f9b\u4e86\u4e24\u79cd\u5206\u914d\u539f\u8bed\uff0c\u5373\u5185\u5efa\u51fd\u6570 new \u548c make\u3002 \u5b83\u4eec\u6240\u505a\u7684\u4e8b\u60c5\u4e0d\u540c\uff0c\u6240\u5e94\u7528\u7684\u7c7b\u578b\u4e5f\u4e0d\u540c\u3002\u5b83\u4eec\u53ef\u80fd\u4f1a\u5f15\u8d77\u6df7\u6dc6\uff0c\u4f46\u89c4\u5219\u5374\u5f88\u7b80\u5355\u3002 \u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b new\u3002\u8fd9\u662f\u4e2a\u7528\u6765\u5206\u914d\u5185\u5b58\u7684\u5185\u5efa\u51fd\u6570\uff0c \u4f46\u4e0e\u5176\u5b83\u8bed\u8a00\u4e2d\u7684\u540c\u540d\u51fd\u6570\u4e0d\u540c\uff0c\u5b83\u4e0d\u4f1a\u521d\u59cb\u5316\u5185\u5b58\uff0c\u53ea\u4f1a\u5c06\u5185\u5b58\u7f6e\u96f6\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0cnew(T) \u4f1a\u4e3a\u7c7b\u578b\u4e3a T \u7684\u65b0\u9879\u5206\u914d\u5df2\u7f6e\u96f6\u7684\u5185\u5b58\u7a7a\u95f4\uff0c \u5e76\u8fd4\u56de\u5b83\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a ",(0,i.jsx)(n.code,{children:"*T"})," \u7684\u503c\u3002\u7528 Go \u7684\u672f\u8bed\u6765\u8bf4\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c \u8be5\u6307\u9488\u6307\u5411\u65b0\u5206\u914d\u7684\uff0c\u7c7b\u578b\u4e3a T \u7684\u96f6\u503c\u3002"]}),"\n",(0,i.jsx)(n.p,{children:'Since the memory returned by new is zeroed, it\'s helpful to arrange when designing your data structures that the zero value of each type can be used without further initialization. This means a user of the data structure can create one with new and get right to work. For example, the documentation for bytes.Buffer states that "the zero value for Buffer is an empty buffer ready to use." Similarly, sync.Mutex does not have an explicit constructor or Init method. Instead, the zero value for a sync.Mutex is defined to be an unlocked mutex.'}),"\n",(0,i.jsx)(n.p,{children:'\u65e2\u7136 new \u8fd4\u56de\u7684\u5185\u5b58\u5df2\u7f6e\u96f6\uff0c\u90a3\u4e48\u5f53\u4f60\u8bbe\u8ba1\u6570\u636e\u7ed3\u6784\u65f6\uff0c \u6bcf\u79cd\u7c7b\u578b\u7684\u96f6\u503c\u5c31\u4e0d\u5fc5\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u6570\u636e\u7ed3\u6784\u7684\u4f7f\u7528\u8005\u53ea\u9700\u7528 new \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u4f8b\u5982\uff0cbytes.Buffer \u7684\u6587\u6863\u4e2d\u63d0\u5230 \u201c\u96f6\u503c\u7684 Buffer \u5c31\u662f\u5df2\u51c6\u5907\u5c31\u7eea\u7684\u7f13\u51b2\u533a\u3002" \u540c\u6837\uff0csync.Mutex \u5e76\u6ca1\u6709\u663e\u5f0f\u7684\u6784\u9020\u51fd\u6570\u6216 Init \u65b9\u6cd5\uff0c \u800c\u662f\u96f6\u503c\u7684 sync.Mutex \u5c31\u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e3a\u5df2\u89e3\u9501\u7684\u4e92\u65a5\u9501\u4e86\u3002'}),"\n",(0,i.jsx)(n.p,{children:"The zero-value-is-useful property works transitively. Consider this type declaration."}),"\n",(0,i.jsx)(n.p,{children:"\u201c\u96f6\u503c\u5c5e\u6027\u201d \u662f\u4f20\u9012\u6027\u7684\u3002\u8003\u8651\u4ee5\u4e0b\u7c7b\u578b\u58f0\u660e\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type SyncedBuffer struct {\n\tlock    sync.Mutex\n\tbuffer  bytes.Buffer\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Values of type SyncedBuffer are also ready to use immediately upon allocation or just declaration. In the next snippet, both p and v will work correctly without further arrangement."}),"\n",(0,i.jsx)(n.p,{children:"SyncedBuffer \u7c7b\u578b\u7684\u503c\u4e5f\u662f\u5728\u58f0\u660e\u65f6\u5c31\u5206\u914d\u597d\u5185\u5b58\u5c31\u7eea\u4e86\u3002\u540e\u7eed\u4ee3\u7801\u4e2d\uff0c p \u548c v \u65e0\u9700\u8fdb\u4e00\u6b65\u5904\u7406\u5373\u53ef\u6b63\u786e\u5de5\u4f5c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"p := new(SyncedBuffer)  // type *SyncedBuffer\nvar v SyncedBuffer      // type  SyncedBuffer\n"})}),"\n",(0,i.jsx)(n.h3,{id:"constructors-and-composite-literals",children:"Constructors and composite literals"}),"\n",(0,i.jsx)(n.h3,{id:"\u6784\u9020\u51fd\u6570\u4e0e\u590d\u5408\u5b57\u9762\u91cf",children:"\u6784\u9020\u51fd\u6570\u4e0e\u590d\u5408\u5b57\u9762\u91cf"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes the zero value isn't good enough and an initializing constructor is necessary, as in this example derived from package os."}),"\n",(0,i.jsx)(n.p,{children:"\u6709\u65f6\u96f6\u503c\u8fd8\u4e0d\u591f\u597d\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u4e00\u4e2a\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\uff0c\u5982\u6765\u81ea os \u5305\u4e2d\u7684\u8fd9\u6bb5\u4ee3\u7801\u6240\u793a\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func NewFile(fd int, name string) *File {\n\tif fd < 0 {\n\t\treturn nil\n\t}\n\tf := new(File)\n\tf.fd = fd\n\tf.name = name\n\tf.dirinfo = nil\n\tf.nepipe = 0\n\treturn f\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"There's a lot of boiler plate in there. We can simplify it using a composite literal, which is an expression that creates a new instance each time it is evaluated."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u91cc\u663e\u5f97\u4ee3\u7801\u8fc7\u4e8e\u5197\u957f\u3002\u6211\u4eec\u53ef\u901a\u8fc7\u590d\u5408\u5b57\u9762\u91cf\u6765\u7b80\u5316\u5b83\uff0c \u8be5\u8868\u8fbe\u5f0f\u5728\u6bcf\u6b21\u6c42\u503c\u65f6\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func NewFile(fd int, name string) *File {\n\tif fd < 0 {\n\t\treturn nil\n\t}\n\tf := File{fd, name, nil, 0}\n\treturn &f\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note that, unlike in C, it's perfectly OK to return the address of a local variable; the storage associated with the variable survives after the function returns. In fact, taking the address of a composite literal allocates a fresh instance each time it is evaluated, so we can combine these last two lines."}),"\n",(0,i.jsx)(n.p,{children:"\u8bf7\u6ce8\u610f\uff0c\u8fd4\u56de\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u8fd9\u70b9\u4e0e C \u4e0d\u540c\u3002\u8be5\u5c40\u90e8\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u636e \u5728\u51fd\u6570\u8fd4\u56de\u540e\u4f9d\u7136\u6709\u6548\u3002\u5b9e\u9645\u4e0a\uff0c\u6bcf\u5f53\u83b7\u53d6\u4e00\u4e2a\u590d\u5408\u5b57\u9762\u91cf\u7684\u5730\u5740\u65f6\uff0c\u90fd\u5c06\u4e3a\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u5206\u914d\u5185\u5b58\uff0c \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0a\u9762\u7684\u6700\u540e\u4e24\u884c\u4ee3\u7801\u5408\u5e76\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\treturn &File{fd, name, nil, 0}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The fields of a composite literal are laid out in order and must all be present. However, by labeling the elements explicitly as field",":value"," pairs, the initializers can appear in any order, with the missing ones left as their respective zero values. Thus we could say"]}),"\n",(0,i.jsx)(n.p,{children:"\u590d\u5408\u5b57\u9762\u91cf\u7684\u5b57\u6bb5\u5fc5\u987b\u6309\u987a\u5e8f\u5168\u90e8\u5217\u51fa\u3002\u4f46\u5982\u679c\u4ee5 \u5b57\u6bb5: \u503c \u5bf9\u7684\u5f62\u5f0f\u660e\u786e\u5730\u6807\u51fa\u5143\u7d20\uff0c\u521d\u59cb\u5316\u5b57\u6bb5\u65f6\u5c31\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u51fa\u73b0\uff0c\u672a\u7ed9\u51fa\u7684\u5b57\u6bb5\u503c\u5c06\u8d4b\u4e88\u96f6\u503c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u5f62\u5f0f\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\treturn &File{fd: fd, name: name}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As a limiting case, if a composite literal contains no fields at all, it creates a zero value for the type. The expressions new(File) and &File"," are equivalent."]}),"\n",(0,i.jsxs)(n.p,{children:["\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u82e5\u590d\u5408\u5b57\u9762\u91cf\u4e0d\u5305\u62ec\u4efb\u4f55\u5b57\u6bb5\uff0c\u5b83\u5c06\u521b\u5efa\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002\u8868\u8fbe\u5f0f new(File) \u548c &File"," \u662f\u7b49\u4ef7\u7684\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Composite literals can also be created for arrays, slices, and maps, with the field labels being indices or map keys as appropriate. In these examples, the initializations work regardless of the values of Enone, Eio, and Einval, as long as they are distinct."}),"\n",(0,i.jsx)(n.p,{children:"\u590d\u5408\u5b57\u9762\u91cf\u540c\u6837\u53ef\u7528\u4e8e\u521b\u5efa\u6570\u7ec4\u3001\u5207\u7247\u4ee5\u53ca\u6620\u5c04\uff0c\u5b57\u6bb5\u6807\u7b7e\u662f\u7d22\u5f15\u8fd8\u662f\u6620\u5c04\u952e\u5219\u89c6\u60c5\u51b5\u800c\u5b9a\u3002 \u5728\u4e0b\u4f8b\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u8bba Enone\u3001Eio \u548c Einval \u7684\u503c\u662f\u4ec0\u4e48\uff0c\u53ea\u8981\u5b83\u4eec\u7684\u6807\u7b7e\u4e0d\u540c\u5c31\u884c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'a := [...]string   {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}\ns := []string      {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}\nm := map[int]string{Enone: "no error", Eio: "Eio", Einval: "invalid argument"}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"allocation-with-make",children:"Allocation with make"}),"\n",(0,i.jsx)(n.h3,{id:"make-\u5206\u914d",children:"make \u5206\u914d"}),"\n",(0,i.jsxs)(n.p,{children:["Back to allocation. The built-in function make(T, args) serves a purpose different from new(T). It creates slices, maps, and channels only, and it returns an initialized (not zeroed) value of type T (not ",(0,i.jsx)(n.code,{children:"*T"}),"). The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use. A slice, for example, is a three-item descriptor containing a pointer to the data (inside an array), the length, and the capacity, and until those items are initialized, the slice is nil. For slices, maps, and channels, make initializes the internal data structure and prepares the value for use. For instance,"]}),"\n",(0,i.jsxs)(n.p,{children:["\u518d\u56de\u5230\u5185\u5b58\u5206\u914d\u4e0a\u6765\u3002\u5185\u5efa\u51fd\u6570 make(T, args) \u7684\u76ee\u7684\u4e0d\u540c\u4e8e new(T)\u3002\u5b83\u53ea\u7528\u4e8e\u521b\u5efa\u5207\u7247\u3001\u6620\u5c04\u548c\u4fe1\u9053\uff0c\u5e76\u8fd4\u56de\u7c7b\u578b\u4e3a T\uff08\u800c\u975e ",(0,i.jsx)(n.code,{children:"*T"}),"\uff09\u7684\u4e00\u4e2a\u5df2\u521d\u59cb\u5316 \uff08\u800c\u975e\u7f6e\u96f6\uff09\u7684\u503c\u3002 \u51fa\u73b0\u8fd9\u79cd\u5dee\u5f02\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u8fd9\u4e09\u79cd\u7c7b\u578b\u672c\u8d28\u4e0a\u4e3a\u5f15\u7528\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u4eec\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u521d\u59cb\u5316\u3002 \u4f8b\u5982\uff0c\u5207\u7247\u662f\u4e00\u4e2a\u5177\u6709\u4e09\u9879\u5185\u5bb9\u7684\u63cf\u8ff0\u7b26\uff0c\u5305\u542b\u4e00\u4e2a\u6307\u5411\uff08\u6570\u7ec4\u5185\u90e8\uff09\u6570\u636e\u7684\u6307\u9488\u3001\u957f\u5ea6\u4ee5\u53ca\u5bb9\u91cf\uff0c \u5728\u8fd9\u4e09\u9879\u88ab\u521d\u59cb\u5316\u4e4b\u524d\uff0c\u8be5\u5207\u7247\u4e3a nil\u3002\u5bf9\u4e8e\u5207\u7247\u3001\u6620\u5c04\u548c\u4fe1\u9053\uff0cmake \u7528\u4e8e\u521d\u59cb\u5316\u5176\u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\u5e76\u51c6\u5907\u597d\u5c06\u8981\u4f7f\u7528\u7684\u503c\u3002\u4f8b\u5982\uff0c"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"make([]int, 10, 100)\n"})}),"\n",(0,i.jsx)(n.p,{children:"allocates an array of 100 ints and then creates a slice structure with length 10 and a capacity of 100 pointing at the first 10 elements of the array. (When making a slice, the capacity can be omitted; see the section on slices for more information.) In contrast, new([]int) returns a pointer to a newly allocated, zeroed slice structure, that is, a pointer to a nil slice value."}),"\n",(0,i.jsx)(n.p,{children:"\u4f1a\u5206\u914d\u4e00\u4e2a\u5177\u6709 100 \u4e2a int \u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u63a5\u7740\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a 10\uff0c \u5bb9\u91cf\u4e3a 100 \u5e76\u6307\u5411\u8be5\u6570\u7ec4\u4e2d\u524d 10 \u4e2a\u5143\u7d20\u7684\u5207\u7247\u7ed3\u6784\u3002\uff08\u751f\u6210\u5207\u7247\u65f6\uff0c\u5176\u5bb9\u91cf\u53ef\u4ee5\u7701\u7565\uff0c\u66f4\u591a\u4fe1\u606f\u89c1\u5207\u7247\u4e00\u8282\u3002\uff09 \u4e0e\u6b64\u76f8\u53cd\uff0cnew([]int) \u4f1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u65b0\u5206\u914d\u7684\uff0c\u5df2\u7f6e\u96f6\u7684\u5207\u7247\u7ed3\u6784\uff0c \u5373\u4e00\u4e2a\u6307\u5411 nil \u5207\u7247\u503c\u7684\u6307\u9488\u3002"}),"\n",(0,i.jsx)(n.p,{children:"These examples illustrate the difference between new and make."}),"\n",(0,i.jsx)(n.p,{children:"\u4e0b\u9762\u7684\u4f8b\u5b50\u9610\u660e\u4e86 new \u548c make \u4e4b\u95f4\u7684\u533a\u522b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful\nvar v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints\n\n// Unnecessarily complex:\nvar p *[]int = new([]int)\n*p = make([]int, 100, 100)\n\n// Idiomatic:\nv := make([]int, 100)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var p *[]int = new([]int)       // \u5206\u914d\u5207\u7247\u7ed3\u6784\uff1b*p == nil\uff1b\u57fa\u672c\u6ca1\u7528\nvar v  []int = make([]int, 100) // \u5207\u7247 v \u73b0\u5728\u5f15\u7528\u4e86\u4e00\u4e2a\u5177\u6709 100 \u4e2a int \u5143\u7d20\u7684\u65b0\u6570\u7ec4\n\n// \u6ca1\u5fc5\u8981\u7684\u590d\u6742\uff1a\nvar p *[]int = new([]int)\n*p = make([]int, 100, 100)\n\n// \u4e60\u60ef\u7528\u6cd5\uff1a\nv := make([]int, 100)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Remember that make applies only to maps, slices and channels and does not return a pointer. To obtain an explicit pointer allocate with new or take the address of a variable explicitly."}),"\n",(0,i.jsx)(n.p,{children:"\u8bf7\u8bb0\u4f4f\uff0cmake \u53ea\u9002\u7528\u4e8e\u6620\u5c04\u3001\u5207\u7247\u548c\u4fe1\u9053\u4e14\u4e0d\u8fd4\u56de\u6307\u9488\u3002\u82e5\u8981\u83b7\u5f97\u660e\u786e\u7684\u6307\u9488\uff0c \u8bf7\u4f7f\u7528 new \u5206\u914d\u5185\u5b58\u6216\u663e\u5f0f\u5730\u83b7\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,i.jsx)(n.h3,{id:"\u6570\u7ec4",children:"\u6570\u7ec4"}),"\n",(0,i.jsx)(n.p,{children:"Arrays are useful when planning the detailed layout of memory and sometimes can help avoid allocation, but primarily they are a building block for slices, the subject of the next section. To lay the foundation for that topic, here are a few words about arrays."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u8be6\u7ec6\u89c4\u5212\u5185\u5b58\u5e03\u5c40\u65f6\uff0c\u6570\u7ec4\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u6709\u65f6\u8fd8\u80fd\u907f\u514d\u8fc7\u591a\u7684\u5185\u5b58\u5206\u914d\uff0c \u4f46\u5b83\u4eec\u4e3b\u8981\u7528\u4f5c\u5207\u7247\u7684\u6784\u4ef6\u3002\u8fd9\u662f\u4e0b\u4e00\u8282\u7684\u4e3b\u9898\u4e86\uff0c\u4e0d\u8fc7\u8981\u5148\u8bf4\u4e0a\u51e0\u53e5\u6765\u4e3a\u5b83\u505a\u94fa\u57ab\u3002"}),"\n",(0,i.jsx)(n.p,{children:"There are major differences between the ways arrays work in Go and C. In Go,"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Arrays are values. Assigning one array to another copies all the elements."}),"\n",(0,i.jsx)(n.li,{children:"In particular, if you pass an array to a function, it will receive a copy of the array, not a pointer to it."}),"\n",(0,i.jsx)(n.li,{children:"The size of an array is part of its type. The types [10]int and [20]int are distinct."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u4e3a\u6570\u7ec4\u5728 Go \u548c C \u4e2d\u7684\u4e3b\u8981\u533a\u522b\u3002\u5728 Go \u4e2d\uff0c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6570\u7ec4\u662f\u503c\u3002\u5c06\u4e00\u4e2a\u6570\u7ec4\u8d4b\u4e88\u53e6\u4e00\u4e2a\u6570\u7ec4\u4f1a\u590d\u5236\u5176\u6240\u6709\u5143\u7d20\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u7279\u522b\u5730\uff0c\u82e5\u5c06\u67d0\u4e2a\u6570\u7ec4\u4f20\u5165\u67d0\u4e2a\u51fd\u6570\uff0c\u5b83\u5c06\u63a5\u6536\u5230\u8be5\u6570\u7ec4\u7684\u4e00\u4efd\u526f\u672c\u800c\u975e\u6307\u9488\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u5176\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002\u7c7b\u578b [10]int \u548c [20]int \u662f\u4e0d\u540c\u7684\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The value property can be useful but also expensive; if you want C-like behavior and efficiency, you can pass a pointer to the array."}),"\n",(0,i.jsx)(n.p,{children:"\u6570\u7ec4\u4e3a\u503c\u7684\u5c5e\u6027\u5f88\u6709\u7528\uff0c\u4f46\u4ee3\u4ef7\u9ad8\u6602\uff1b\u82e5\u4f60\u60f3\u8981 C \u90a3\u6837\u7684\u884c\u4e3a\u548c\u6548\u7387\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6307\u5411\u8be5\u6570\u7ec4\u7684\u6307\u9488\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Sum(a *[3]float64) (sum float64) {\n\tfor _, v := range *a {\n\t\tsum += v\n\t}\n\treturn\n}\n\narray := [...]float64{7.0, 8.5, 9.1}\nx := Sum(&array)  // Note the explicit address-of operator\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Sum(a *[3]float64) (sum float64) {\n\tfor _, v := range *a {\n\t\tsum += v\n\t}\n\treturn\n}\n\narray := [...]float64{7.0, 8.5, 9.1}\nx := Sum(&array)  // \u6ce8\u610f\u663e\u5f0f\u7684\u53d6\u5740\u64cd\u4f5c\n"})}),"\n",(0,i.jsx)(n.p,{children:"But even this style isn't idiomatic Go. Use slices instead."}),"\n",(0,i.jsx)(n.p,{children:"\u4f46\u8fd9\u5e76\u4e0d\u662f Go \u7684\u4e60\u60ef\u7528\u6cd5\uff0c\u5207\u7247\u624d\u662f\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"slices",children:"Slices"}),"\n",(0,i.jsx)(n.h3,{id:"\u5207\u7247",children:"\u5207\u7247"}),"\n",(0,i.jsx)(n.p,{children:"Slices wrap arrays to give a more general, powerful, and convenient interface to sequences of data. Except for items with explicit dimension such as transformation matrices, most array programming in Go is done with slices rather than simple arrays."}),"\n",(0,i.jsx)(n.p,{children:"\u5207\u7247\u901a\u8fc7\u5bf9\u6570\u7ec4\u8fdb\u884c\u5c01\u88c5\uff0c\u4e3a\u6570\u636e\u5e8f\u5217\u63d0\u4f9b\u4e86\u66f4\u901a\u7528\u3001\u5f3a\u5927\u800c\u65b9\u4fbf\u7684\u63a5\u53e3\u3002 \u9664\u4e86\u77e9\u9635\u53d8\u6362\u8fd9\u7c7b\u9700\u8981\u660e\u786e\u7ef4\u5ea6\u7684\u60c5\u51b5\u5916\uff0cGo \u4e2d\u7684\u5927\u90e8\u5206\u6570\u7ec4\u7f16\u7a0b\u90fd\u662f\u901a\u8fc7\u5207\u7247\u6765\u5b8c\u6210\u7684\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array. If a function takes a slice argument, changes it makes to the elements of the slice will be visible to the caller, analogous to passing a pointer to the underlying array. A Read function can therefore accept a slice argument rather than a pointer and a count; the length within the slice sets an upper limit of how much data to read. Here is the signature of the Read method of the File type in package os:"}),"\n",(0,i.jsx)(n.p,{children:"\u5207\u7247\u4fdd\u5b58\u4e86\u5bf9\u5e95\u5c42\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u82e5\u4f60\u5c06\u67d0\u4e2a\u5207\u7247\u8d4b\u4e88\u53e6\u4e00\u4e2a\u5207\u7247\uff0c\u5b83\u4eec\u4f1a\u5f15\u7528\u540c\u4e00\u4e2a\u6570\u7ec4\u3002 \u82e5\u67d0\u4e2a\u51fd\u6570\u5c06\u4e00\u4e2a\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u5219\u5b83\u5bf9\u8be5\u5207\u7247\u5143\u7d20\u7684\u4fee\u6539\u5bf9\u8c03\u7528\u8005\u800c\u8a00\u540c\u6837\u53ef\u89c1\uff0c \u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a\u4f20\u9012\u4e86\u5e95\u5c42\u6570\u7ec4\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0cRead \u51fd\u6570\u53ef\u63a5\u53d7\u4e00\u4e2a\u5207\u7247\u5b9e\u53c2 \u800c\u975e\u4e00\u4e2a\u6307\u9488\u548c\u4e00\u4e2a\u8ba1\u6570\uff1b\u5207\u7247\u7684\u957f\u5ea6\u51b3\u5b9a\u4e86\u53ef\u8bfb\u53d6\u6570\u636e\u7684\u4e0a\u9650\u3002\u4ee5\u4e0b\u4e3a os \u5305\u4e2d File \u7c7b\u578b\u7684 Read \u65b9\u6cd5\u7b7e\u540d:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (file *File) Read(buf []byte) (n int, err error)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The method returns the number of bytes read and an error value, if any. To read into the first 32 bytes of a larger buffer buf, slice (here used as a verb) the buffer."}),"\n",(0,i.jsx)(n.p,{children:"\u8be5\u65b9\u6cd5\u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u548c\u4e00\u4e2a\u9519\u8bef\u503c\uff08\u82e5\u6709\u7684\u8bdd\uff09\u3002\u82e5\u8981\u4ece\u66f4\u5927\u7684\u7f13\u51b2\u533a b \u4e2d\u8bfb\u53d6\u524d 32 \u4e2a\u5b57\u8282\uff0c\u53ea\u9700\u5bf9\u5176\u8fdb\u884c\u5207\u7247\u5373\u53ef\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\tn, err := f.Read(buf[0:32])\n"})}),"\n",(0,i.jsx)(n.p,{children:"Such slicing is common and efficient. In fact, leaving efficiency aside for the moment, the following snippet would also read the first 32 bytes of the buffer."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u79cd\u5207\u7247\u7684\u65b9\u6cd5\u5e38\u7528\u4e14\u9ad8\u6548\u3002\u82e5\u4e0d\u8c08\u6548\u7387\uff0c\u4ee5\u4e0b\u7247\u6bb5\u540c\u6837\u80fd\u8bfb\u53d6\u8be5\u7f13\u51b2\u533a\u7684\u524d 32 \u4e2a\u5b57\u8282\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\tvar n int\n\tvar err error\n\tfor i := 0; i < 32; i++ {\n\t\tnbytes, e := f.Read(buf[i:i+1])  // Read one byte.\n\t\tif nbytes == 0 || e != nil {\n\t\t\terr = e\n\t\t\tbreak\n\t\t}\n\t\tn += nbytes\n\t}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\tvar n int\n\tvar err error\n\tfor i := 0; i < 32; i++ {\n\t\tnbytes, e := f.Read(buf[i:i+1])  // \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\n\t\tif nbytes == 0 || e != nil {\n\t\t\terr = e\n\t\t\tbreak\n\t\t}\n\t\tn += nbytes\n\t}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The length of a slice may be changed as long as it still fits within the limits of the underlying array; just assign it to a slice of itself. The capacity of a slice, accessible by the built-in function cap, reports the maximum length the slice may assume. Here is a function to append data to a slice. If the data exceeds the capacity, the slice is reallocated. The resulting slice is returned. The function uses the fact that len and cap are legal when applied to the nil slice, and return 0."}),"\n",(0,i.jsx)(n.p,{children:"\u53ea\u8981\u5207\u7247\u4e0d\u8d85\u51fa\u5e95\u5c42\u6570\u7ec4\u7684\u9650\u5236\uff0c\u5b83\u7684\u957f\u5ea6\u5c31\u662f\u53ef\u53d8\u7684\uff0c\u53ea\u9700\u5c06\u5b83\u8d4b\u4e88\u5176\u81ea\u8eab\u7684\u5207\u7247\u5373\u53ef\u3002 \u5207\u7247\u7684\u5bb9\u91cf\u53ef\u901a\u8fc7\u5185\u5efa\u51fd\u6570 cap \u83b7\u5f97\uff0c\u5b83\u5c06\u7ed9\u51fa\u8be5\u5207\u7247\u53ef\u53d6\u5f97\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4ee5\u4e0b\u662f\u5c06\u6570\u636e\u8ffd\u52a0\u5230\u5207\u7247\u7684\u51fd\u6570\u3002\u82e5\u6570\u636e\u8d85\u51fa\u5176\u5bb9\u91cf\uff0c\u5219\u4f1a\u91cd\u65b0\u5206\u914d\u8be5\u5207\u7247\u3002\u8fd4\u56de\u503c\u5373\u4e3a\u6240\u5f97\u7684\u5207\u7247\u3002 \u8be5\u51fd\u6570\u4e2d\u6240\u4f7f\u7528\u7684 len \u548c cap \u5728\u5e94\u7528\u4e8e nil \u5207\u7247\u65f6\u662f\u5408\u6cd5\u7684\uff0c\u5b83\u4f1a\u8fd4\u56de 0."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Append(slice, data[]byte) []byte {\n\tl := len(slice)\n\tif l + len(data) > cap(slice) {  // reallocate\n\t\t// Allocate double what's needed, for future growth.\n\t\tnewSlice := make([]byte, (l+len(data))*2)\n\t\t// The copy function is predeclared and works for any slice type.\n\t\tcopy(newSlice, slice)\n\t\tslice = newSlice\n\t}\n\tslice = slice[0:l+len(data)]\n\tfor i, c := range data {\n\t\tslice[l+i] = c\n\t}\n\treturn slice\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Append(slice, data[]byte) []byte {\n\tl := len(slice)\n\tif l + len(data) > cap(slice) {  // \u91cd\u65b0\u5206\u914d\n\t\t// \u4e3a\u4e86\u540e\u9762\u7684\u589e\u957f\uff0c\u9700\u5206\u914d\u4e24\u4efd\u3002\n\t\tnewSlice := make([]byte, (l+len(data))*2)\n\t\t// copy \u51fd\u6570\u662f\u9884\u58f0\u660e\u7684\uff0c\u4e14\u53ef\u7528\u4e8e\u4efb\u4f55\u5207\u7247\u7c7b\u578b\u3002\n\t\tcopy(newSlice, slice)\n\t\tslice = newSlice\n\t}\n\tslice = slice[0:l+len(data)]\n\tfor i, c := range data {\n\t\tslice[l+i] = c\n\t}\n\treturn slice\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We must return the slice afterwards because, although Append can modify the elements of slice, the slice itself (the run-time data structure holding the pointer, length, and capacity) is passed by value."}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u7ec8\u6211\u4eec\u5fc5\u987b\u8fd4\u56de\u5207\u7247\uff0c\u56e0\u4e3a\u5c3d\u7ba1 Append \u53ef\u4fee\u6539 slice \u7684\u5143\u7d20\uff0c\u4f46\u5207\u7247\u81ea\u8eab\uff08\u5176\u8fd0\u884c\u65f6\u6570\u636e\u7ed3\u6784\u5305\u542b\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\uff09\u662f\u901a\u8fc7\u503c\u4f20\u9012\u7684\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The idea of appending to a slice is so useful it's captured by the append built-in function. To understand that function's design, though, we need a little more information, so we'll return to it later."}),"\n",(0,i.jsx)(n.p,{children:"\u5411\u5207\u7247\u8ffd\u52a0\u4e1c\u897f\u7684\u60f3\u6cd5\u975e\u5e38\u6709\u7528\uff0c\u56e0\u6b64\u6709\u4e13\u95e8\u7684\u5185\u5efa\u51fd\u6570 append\u3002 \u8981\u7406\u89e3\u8be5\u51fd\u6570\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5c06\u7a0d\u540e\u518d\u4ecb\u7ecd\u5b83\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"two-dimensional-slices",children:"Two-dimensional slices"}),"\n",(0,i.jsx)(n.h3,{id:"\u4e8c\u7ef4\u5207\u7247",children:"\u4e8c\u7ef4\u5207\u7247"}),"\n",(0,i.jsx)(n.p,{children:"Go's arrays and slices are one-dimensional. To create the equivalent of a 2D array or slice, it is necessary to define an array-of-arrays or slice-of-slices, like this:"}),"\n",(0,i.jsx)(n.p,{children:"Go \u7684\u6570\u7ec4\u548c\u5207\u7247\u90fd\u662f\u4e00\u7ef4\u7684\u3002\u8981\u521b\u5efa\u7b49\u4ef7\u7684\u4e8c\u7ef4\u6570\u7ec4\u6216\u5207\u7247\uff0c\u5c31\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u7684\u6570\u7ec4\uff0c \u6216\u5207\u7247\u7684\u5207\u7247\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Transform [3][3]float64  // A 3x3 array, really an array of arrays.\ntype LinesOfText [][]byte     // A slice of byte slices.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Transform [3][3]float64  // \u4e00\u4e2a 3x3 \u7684\u6570\u7ec4\uff0c\u5176\u5b9e\u662f\u5305\u542b\u591a\u4e2a\u6570\u7ec4\u7684\u4e00\u4e2a\u6570\u7ec4\u3002\ntype LinesOfText [][]byte     // \u5305\u542b\u591a\u4e2a\u5b57\u8282\u5207\u7247\u7684\u4e00\u4e2a\u5207\u7247\u3002\n"})}),"\n",(0,i.jsx)(n.p,{children:"Because slices are variable-length, it is possible to have each inner slice be a different length. That can be a common situation, as in our LinesOfText example: each line has an independent length."}),"\n",(0,i.jsx)(n.p,{children:"\u7531\u4e8e\u5207\u7247\u957f\u5ea6\u662f\u53ef\u53d8\u7684\uff0c\u56e0\u6b64\u5176\u5185\u90e8\u53ef\u80fd\u62e5\u6709\u591a\u4e2a\u4e0d\u540c\u957f\u5ea6\u7684\u5207\u7247\u3002\u5728\u6211\u4eec\u7684 LinesOfText \u4f8b\u5b50\u4e2d\uff0c\u8fd9\u662f\u79cd\u5e38\u89c1\u7684\u60c5\u51b5\uff1a\u6bcf\u884c\u90fd\u6709\u5176\u81ea\u5df1\u7684\u957f\u5ea6\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'text := LinesOfText{\n\t[]byte("Now is the time"),\n\t[]byte("for all good gophers"),\n\t[]byte("to bring some fun to the party."),\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Sometimes it's necessary to allocate a 2D slice, a situation that can arise when processing scan lines of pixels, for instance. There are two ways to achieve this. One is to allocate each slice independently; the other is to allocate a single array and point the individual slices into it. Which to use depends on your application. If the slices might grow or shrink, they should be allocated independently to avoid overwriting the next line; if not, it can be more efficient to construct the object with a single allocation. For reference, here are sketches of the two methods. First, a line at a time:"}),"\n",(0,i.jsx)(n.p,{children:"\u6709\u65f6\u5fc5\u987b\u5206\u914d\u4e00\u4e2a\u4e8c\u7ef4\u5207\u7247\uff0c\u4f8b\u5982\u5728\u5904\u7406\u50cf\u7d20\u7684\u626b\u63cf\u884c\u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u4f1a\u53d1\u751f\u3002 \u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002\u4e00\u79cd\u5c31\u662f\u72ec\u7acb\u5730\u5206\u914d\u6bcf\u4e00\u4e2a\u5207\u7247\uff1b\u800c\u53e6\u4e00\u79cd\u5c31\u662f\u53ea\u5206\u914d\u4e00\u4e2a\u6570\u7ec4\uff0c \u5c06\u5404\u4e2a\u5207\u7247\u90fd\u6307\u5411\u5b83\u3002\u91c7\u7528\u54ea\u79cd\u65b9\u5f0f\u53d6\u51b3\u4e8e\u4f60\u7684\u5e94\u7528\u3002\u82e5\u5207\u7247\u4f1a\u589e\u957f\u6216\u6536\u7f29\uff0c \u5c31\u5e94\u8be5\u901a\u8fc7\u72ec\u7acb\u5206\u914d\u6765\u907f\u514d\u8986\u76d6\u4e0b\u4e00\u884c\uff1b\u82e5\u4e0d\u4f1a\uff0c\u7528\u5355\u6b21\u5206\u914d\u6765\u6784\u9020\u5bf9\u8c61\u4f1a\u66f4\u52a0\u9ad8\u6548\u3002 \u4ee5\u4e0b\u662f\u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u5927\u6982\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\u9996\u5148\u662f\u4e00\u6b21\u4e00\u884c\u7684\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Allocate the top-level slice.\npicture := make([][]uint8, YSize) // One row per unit of y.\n// Loop over the rows, allocating the slice for each row.\nfor i := range picture {\n\tpicture[i] = make([]uint8, XSize)\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// \u5206\u914d\u9876\u5c42\u5207\u7247\u3002\npicture := make([][]uint8, YSize) // \u6bcf y \u4e2a\u5355\u5143\u4e00\u884c\u3002\n// \u904d\u5386\u884c\uff0c\u4e3a\u6bcf\u4e00\u884c\u90fd\u5206\u914d\u5207\u7247\nfor i := range picture {\n\tpicture[i] = make([]uint8, XSize)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"And now as one allocation, sliced into lines:"}),"\n",(0,i.jsx)(n.p,{children:"\u73b0\u5728\u662f\u4e00\u6b21\u5206\u914d\uff0c\u5bf9\u884c\u8fdb\u884c\u5207\u7247\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Allocate the top-level slice, the same as before.\npicture := make([][]uint8, YSize) // One row per unit of y.\n// Allocate one large slice to hold all the pixels.\npixels := make([]uint8, XSize*YSize) // Has type []uint8 even though picture is [][]uint8.\n// Loop over the rows, slicing each row from the front of the remaining pixels slice.\nfor i := range picture {\n\tpicture[i], pixels = pixels[:XSize], pixels[XSize:]\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// \u5206\u914d\u9876\u5c42\u5207\u7247\uff0c\u548c\u524d\u9762\u4e00\u6837\u3002\npicture := make([][]uint8, YSize) // \u6bcf y \u4e2a\u5355\u5143\u4e00\u884c\u3002\n// \u5206\u914d\u4e00\u4e2a\u5927\u7684\u5207\u7247\u6765\u4fdd\u5b58\u6240\u6709\u50cf\u7d20\npixels := make([]uint8, XSize*YSize) // \u62e5\u6709\u7c7b\u578b []uint8\uff0c\u5c3d\u7ba1\u56fe\u7247\u662f [][]uint8.\n// \u904d\u5386\u884c\uff0c\u4ece\u5269\u4f59\u50cf\u7d20\u5207\u7247\u7684\u524d\u9762\u5207\u51fa\u6bcf\u884c\u6765\u3002\nfor i := range picture {\n\tpicture[i], pixels = pixels[:XSize], pixels[XSize:]\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"maps",children:"Maps"}),"\n",(0,i.jsx)(n.h3,{id:"\u6620\u5c04",children:"\u6620\u5c04"}),"\n",(0,i.jsx)(n.p,{children:"Maps are a convenient and powerful built-in data structure that associate values of one type (the key) with values of another type (the element or value) The key can be of any type for which the equality operator is defined, such as integers, floating point and complex numbers, strings, pointers, interfaces (as long as the dynamic type supports equality), structs and arrays. Slices cannot be used as map keys, because equality is not defined on them. Like slices, maps hold references to an underlying data structure. If you pass a map to a function that changes the contents of the map, the changes will be visible in the caller."}),"\n",(0,i.jsx)(n.p,{children:"\u6620\u5c04\u662f\u65b9\u4fbf\u800c\u5f3a\u5927\u7684\u5185\u5efa\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u5173\u8054\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u3002\u5176\u952e\u53ef\u4ee5\u662f\u4efb\u4f55\u76f8\u7b49\u6027\u64cd\u4f5c\u7b26\u652f\u6301\u7684\u7c7b\u578b\uff0c \u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u5b57\u7b26\u4e32\u3001\u6307\u9488\u3001\u63a5\u53e3\uff08\u53ea\u8981\u5176\u52a8\u6001\u7c7b\u578b\u652f\u6301\u76f8\u7b49\u6027\u5224\u65ad\uff09\u3001\u7ed3\u6784\u4ee5\u53ca\u6570\u7ec4\u3002 \u5207\u7247\u4e0d\u80fd\u7528\u4f5c\u6620\u5c04\u952e\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u76f8\u7b49\u6027\u8fd8\u672a\u5b9a\u4e49\u3002\u4e0e\u5207\u7247\u4e00\u6837\uff0c\u6620\u5c04\u4e5f\u662f\u5f15\u7528\u7c7b\u578b\u3002 \u82e5\u5c06\u6620\u5c04\u4f20\u5165\u51fd\u6570\u4e2d\uff0c\u5e76\u66f4\u6539\u4e86\u8be5\u6620\u5c04\u7684\u5185\u5bb9\uff0c\u5219\u6b64\u4fee\u6539\u5bf9\u8c03\u7528\u8005\u540c\u6837\u53ef\u89c1\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Maps can be constructed using the usual composite literal syntax with colon-separated key-value pairs, so it's easy to build them during initialization."}),"\n",(0,i.jsx)(n.p,{children:"\u6620\u5c04\u53ef\u4f7f\u7528\u4e00\u822c\u7684\u590d\u5408\u5b57\u9762\u8bed\u6cd5\u8fdb\u884c\u6784\u5efa\uff0c\u5176\u952e - \u503c\u5bf9\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u56e0\u6b64\u53ef\u5728\u521d\u59cb\u5316\u65f6\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u5b83\u4eec\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var timeZone = map[string]int{\n\t"UTC":  0*60*60,\n\t"EST": -5*60*60,\n\t"CST": -6*60*60,\n\t"MST": -7*60*60,\n\t"PST": -8*60*60,\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Assigning and fetching map values looks syntactically just like doing the same for arrays and slices except that the index doesn't need to be an integer."}),"\n",(0,i.jsx)(n.p,{children:"\u8d4b\u503c\u548c\u83b7\u53d6\u6620\u5c04\u503c\u7684\u8bed\u6cd5\u7c7b\u4f3c\u4e8e\u6570\u7ec4\uff0c\u4e0d\u540c\u7684\u662f\u6620\u5c04\u7684\u7d22\u5f15\u4e0d\u5fc5\u4e3a\u6574\u6570\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'offset := timeZone["EST"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"An attempt to fetch a map value with a key that is not present in the map will return the zero value for the type of the entries in the map. For instance, if the map contains integers, looking up a non-existent key will return 0. A set can be implemented as a map with value type bool. Set the map entry to true to put the value in the set, and then test it by simple indexing."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u8bd5\u56fe\u901a\u8fc7\u6620\u5c04\u4e2d\u4e0d\u5b58\u5728\u7684\u952e\u6765\u53d6\u503c\uff0c\u5c31\u4f1a\u8fd4\u56de\u4e0e\u8be5\u6620\u5c04\u4e2d\u9879\u7684\u7c7b\u578b\u5bf9\u5e94\u7684\u96f6\u503c\u3002 \u4f8b\u5982\uff0c\u82e5\u67d0\u4e2a\u6620\u5c04\u5305\u542b\u6574\u6570\uff0c\u5f53\u67e5\u627e\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\u65f6\u4f1a\u8fd4\u56de 0\u3002 \u96c6\u5408\u53ef\u5b9e\u73b0\u6210\u4e00\u4e2a\u503c\u7c7b\u578b\u4e3a bool \u7684\u6620\u5c04\u3002\u5c06\u8be5\u6620\u5c04\u4e2d\u7684\u9879\u7f6e\u4e3a true \u53ef\u5c06\u8be5\u503c\u653e\u5165\u96c6\u5408\u4e2d\uff0c\u6b64\u540e\u901a\u8fc7\u7b80\u5355\u7684\u7d22\u5f15\u64cd\u4f5c\u5373\u53ef\u5224\u65ad\u662f\u5426\u5b58\u5728\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'attended := map[string]bool{\n\t"Ann": true,\n\t"Joe": true,\n\t...\n}\n\nif attended[person] { // will be false if person is not in the map\n\tfmt.Println(person, "was at the meeting")\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'attended := map[string]bool{\n\t"Ann": true,\n\t"Joe": true,\n\t...\n}\n\nif attended[person] { // \u82e5\u67d0\u4eba\u4e0d\u5728\u6b64\u6620\u5c04\u4e2d\uff0c\u5219\u4e3a false\n\tfmt.Println(person, "\u6b63\u5728\u5f00\u4f1a")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:'Sometimes you need to distinguish a missing entry from a zero value. Is there an entry for "UTC" or is that the empty string because it\'s not in the map at all? You can discriminate with a form of multiple assignment.'}),"\n",(0,i.jsx)(n.p,{children:'\u6709\u65f6\u4f60\u9700\u8981\u533a\u5206\u67d0\u9879\u662f\u4e0d\u5b58\u5728\u8fd8\u662f\u5176\u503c\u4e3a\u96f6\u503c\u3002\u5982\u5bf9\u4e8e\u4e00\u4e2a\u503c\u672c\u5e94\u4e3a\u96f6\u7684 "UTC" \u6761\u76ee\uff0c\u4e5f\u53ef\u80fd\u662f\u7531\u4e8e\u4e0d\u5b58\u5728\u8be5\u9879\u800c\u5f97\u5230\u96f6\u503c\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u591a\u91cd\u8d4b\u503c\u7684\u5f62\u5f0f\u6765\u5206\u8fa8\u8fd9\u79cd\u60c5\u51b5\u3002'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var seconds int\nvar ok bool\nseconds, ok = timeZone[tz]\n"})}),"\n",(0,i.jsx)(n.p,{children:"For obvious reasons this is called the \u201ccomma ok\u201d idiom. In this example, if tz is present, seconds will be set appropriately and ok will be true; if not, seconds will be set to zero and ok will be false. Here's a function that puts it together with a nice error report:"}),"\n",(0,i.jsx)(n.p,{children:"\u663e\u7136\uff0c\u6211\u4eec\u53ef\u79f0\u4e4b\u4e3a \u201c\u9017\u53f7 ok\u201d \u60ef\u7528\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u82e5 tz \u5b58\u5728\uff0c seconds \u5c31\u4f1a\u88ab\u8d4b\u4e88\u9002\u5f53\u7684\u503c\uff0c\u4e14 ok \u4f1a\u88ab\u7f6e\u4e3a true\uff1b \u82e5\u4e0d\u5b58\u5728\uff0cseconds \u5219\u4f1a\u88ab\u7f6e\u4e3a\u96f6\uff0c\u800c ok \u4f1a\u88ab\u7f6e\u4e3a false\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u5c06\u8fd9\u4e9b\u7ed3\u5408\u8d77\u6765\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u9519\u8bef\u62a5\u544a\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func offset(tz string) int {\n\tif seconds, ok := timeZone[tz]; ok {\n\t\treturn seconds\n\t}\n\tlog.Println("unknown time zone:", tz)\n\treturn 0\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To test for presence in the map without worrying about the actual value, you can use the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#blank",children:"blank identifier"})," (",(0,i.jsx)(n.code,{children:"_"}),") in place of the usual variable for the value."]}),"\n",(0,i.jsxs)(n.p,{children:["\u82e5\u4ec5\u9700\u5224\u65ad\u6620\u5c04\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u9879\u800c\u4e0d\u5173\u5fc3\u5b9e\u9645\u7684\u503c\uff0c\u53ef\u4f7f\u7528 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#blank",children:"\u7a7a\u767d\u6807\u8bc6\u7b26"})," \uff08",(0,i.jsx)(n.code,{children:"_"}),"\uff09\u6765\u4ee3\u66ff\u8be5\u503c\u7684\u4e00\u822c\u53d8\u91cf\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"_, present := timeZone[tz]\n"})}),"\n",(0,i.jsx)(n.p,{children:"To delete a map entry, use the delete built-in function, whose arguments are the map and the key to be deleted. It's safe to do this even if the key is already absent from the map."}),"\n",(0,i.jsx)(n.p,{children:"\u8981\u5220\u9664\u6620\u5c04\u4e2d\u7684\u67d0\u9879\uff0c\u53ef\u4f7f\u7528\u5185\u5efa\u51fd\u6570 delete\uff0c\u5b83\u4ee5\u6620\u5c04\u53ca\u8981\u88ab\u5220\u9664\u7684\u952e\u4e3a\u5b9e\u53c2\u3002 \u5373\u4fbf\u5bf9\u5e94\u7684\u952e\u4e0d\u5728\u8be5\u6620\u5c04\u4e2d\uff0c\u6b64\u64cd\u4f5c\u4e5f\u662f\u5b89\u5168\u7684\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'delete(timeZone, "PDT")  // Now on Standard Time\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'delete(timeZone, "PDT")  // \u73b0\u5728\u7528\u6807\u51c6\u65f6\u95f4\n'})}),"\n",(0,i.jsx)(n.h3,{id:"printing",children:"Printing"}),"\n",(0,i.jsx)(n.h3,{id:"\u6253\u5370",children:"\u6253\u5370"}),"\n",(0,i.jsx)(n.p,{children:"Formatted printing in Go uses a style similar to C's printf family but is richer and more general. The functions live in the fmt package and have capitalized names: fmt.Printf, fmt.Fprintf, fmt.Sprintf and so on. The string functions (Sprintf etc.) return a string rather than filling in a provided buffer."}),"\n",(0,i.jsx)(n.p,{children:"Go \u91c7\u7528\u7684\u683c\u5f0f\u5316\u6253\u5370\u98ce\u683c\u548c C \u7684 printf \u65cf\u7c7b\u4f3c\uff0c\u4f46\u5374\u66f4\u52a0\u4e30\u5bcc\u800c\u901a\u7528\u3002 \u8fd9\u4e9b\u51fd\u6570\u4f4d\u4e8e fmt \u5305\u4e2d\uff0c\u4e14\u51fd\u6570\u540d\u9996\u5b57\u6bcd\u5747\u4e3a\u5927\u5199\uff1a\u5982 fmt.Printf\u3001fmt.Fprintf\uff0cfmt.Sprintf \u7b49\u3002 \u5b57\u7b26\u4e32\u51fd\u6570\uff08Sprintf \u7b49\uff09\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u800c\u975e\u586b\u5145\u7ed9\u5b9a\u7684\u7f13\u51b2\u533a\u3002"}),"\n",(0,i.jsx)(n.p,{children:"You don't need to provide a format string. For each of Printf, Fprintf and Sprintf there is another pair of functions, for instance Print and Println. These functions do not take a format string but instead generate a default format for each argument. The Println versions also insert a blank between arguments and append a newline to the output while the Print versions add blanks only if the operand on neither side is a string. In this example each line produces the same output."}),"\n",(0,i.jsx)(n.p,{children:"\u4f60\u65e0\u9700\u63d0\u4f9b\u4e00\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\u6bcf\u4e2a Printf\u3001Fprintf \u548c Sprintf \u90fd\u5206\u522b\u5bf9\u5e94\u53e6\u5916\u7684\u51fd\u6570\uff0c\u5982 Print \u4e0e Println\u3002 \u8fd9\u4e9b\u51fd\u6570\u5e76\u4e0d\u63a5\u53d7\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4e3a\u6bcf\u4e2a\u5b9e\u53c2\u751f\u6210\u4e00\u79cd\u9ed8\u8ba4\u683c\u5f0f\u3002Println \u7cfb\u5217\u7684\u51fd\u6570\u8fd8\u4f1a\u5728\u5b9e\u53c2\u4e2d\u63d2\u5165\u7a7a\u683c\uff0c\u5e76\u5728\u8f93\u51fa\u65f6\u8ffd\u52a0\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u800c Print \u7248\u672c\u4ec5\u5728\u64cd\u4f5c\u6570\u4e24\u4fa7\u90fd\u6ca1\u6709\u5b57\u7b26\u4e32\u65f6\u624d\u6dfb\u52a0\u7a7a\u767d\u3002\u4ee5\u4e0b\u793a\u4f8b\u4e2d\u5404\u884c\u4ea7\u751f\u7684\u8f93\u51fa\u90fd\u662f\u4e00\u6837\u7684\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'fmt.Printf("Hello %d\\n", 23)\nfmt.Fprint(os.Stdout, "Hello ", 23, "\\n")\nfmt.Println("Hello", 23)\nfmt.Println(fmt.Sprint("Hello ", 23))\n'})}),"\n",(0,i.jsx)(n.p,{children:"The formatted print functions fmt.Fprint and friends take as a first argument any object that implements the io.Writer interface; the variables os.Stdout and os.Stderr are familiar instances."}),"\n",(0,i.jsx)(n.p,{children:"fmt.Fprint \u4e00\u7c7b\u7684\u683c\u5f0f\u5316\u6253\u5370\u51fd\u6570\u53ef\u63a5\u53d7\u4efb\u4f55\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u7684\u5bf9\u8c61\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5b9e\u53c2\uff1b\u53d8\u91cf os.Stdout \u4e0e os.Stderr \u90fd\u662f\u4eba\u4eec\u719f\u77e5\u7684\u4f8b\u5b50\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Here things start to diverge from C. First, the numeric formats such as %d do not take flags for signedness or size; instead, the printing routines use the type of the argument to decide these properties."}),"\n",(0,i.jsx)(n.p,{children:"\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u5c31\u4e0e C \u6709\u4e9b\u4e0d\u540c\u4e86\u3002\u9996\u5148\uff0c\u50cf %d \u8fd9\u6837\u7684\u6570\u503c\u683c\u5f0f\u5e76\u4e0d\u63a5\u53d7\u8868\u793a\u7b26\u53f7\u6216\u5927\u5c0f\u7684\u6807\u8bb0\uff0c \u6253\u5370\u4f8b\u7a0b\u4f1a\u6839\u636e\u5b9e\u53c2\u7684\u7c7b\u578b\u6765\u51b3\u5b9a\u8fd9\u4e9b\u5c5e\u6027\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var x uint64 = 1<<64 - 1\nfmt.Printf("%d %x; %d %x\\n", x, x, int64(x), int64(x))\n'})}),"\n",(0,i.jsx)(n.p,{children:"prints"}),"\n",(0,i.jsx)(n.p,{children:"\u5c06\u6253\u5370"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"18446744073709551615 ffffffffffffffff; -1 -1\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you just want the default conversion, such as decimal for integers, you can use the catchall format %v (for \u201cvalue\u201d); the result is exactly what Print and Println would produce. Moreover, that format can print any value, even arrays, slices, structs, and maps. Here is a print statement for the time zone map defined in the previous section."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u4f60\u53ea\u60f3\u8981\u9ed8\u8ba4\u7684\u8f6c\u6362\uff0c\u5982\u4f7f\u7528\u5341\u8fdb\u5236\u7684\u6574\u6570\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u7684\u683c\u5f0f %v\uff08\u5bf9\u5e94 \u201c\u503c\u201d\uff09\uff1b\u5176\u7ed3\u679c\u4e0e Print \u548c Println \u7684\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u683c\u5f0f\u8fd8\u80fd\u6253\u5370\u4efb\u610f\u503c\uff0c\u751a\u81f3\u5305\u62ec\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u548c\u6620\u5c04\u3002 \u4ee5\u4e0b\u662f\u6253\u5370\u4e0a\u4e00\u8282\u4e2d\u5b9a\u4e49\u7684\u65f6\u533a\u6620\u5c04\u7684\u8bed\u53e5\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'fmt.Printf("%v\\n", timeZone)  // or just fmt.Println(timeZone)\n'})}),"\n",(0,i.jsx)(n.p,{children:"which gives output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"map[CST:-21600 PST:-28800 EST:-18000 UTC:0 MST:-25200]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'fmt.Printf("%v\\n", timeZone)  // \u6216\u53ea\u7528 fmt.Println(timeZone)\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4f1a\u8f93\u51fa"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"map[CST:-21600 PST:-28800 EST:-18000 UTC:0 MST:-25200]\n"})}),"\n",(0,i.jsx)(n.p,{children:"For maps the keys may be output in any order, of course. When printing a struct, the modified format %+v annotates the fields of the structure with their names, and for any value the alternate format %#v prints the value in full Go syntax."}),"\n",(0,i.jsx)(n.p,{children:"\u5f53\u7136\uff0c\u6620\u5c04\u4e2d\u7684\u952e\u53ef\u80fd\u6309\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\u3002\u5f53\u6253\u5370\u7ed3\u6784\u4f53\u65f6\uff0c\u6539\u8fdb\u7684\u683c\u5f0f %+v \u4f1a\u4e3a\u7ed3\u6784\u4f53\u7684\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u4e0a\u5b57\u6bb5\u540d\uff0c\u800c\u53e6\u4e00\u79cd\u683c\u5f0f %#v \u5c06\u5b8c\u5168\u6309\u7167 Go \u7684\u8bed\u6cd5\u6253\u5370\u503c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type T struct {\n\ta int\n\tb float64\n\tc string\n}\nt := &T{ 7, -2.35, "abc\\tdef" }\nfmt.Printf("%v\\n", t)\nfmt.Printf("%+v\\n", t)\nfmt.Printf("%#v\\n", t)\nfmt.Printf("%#v\\n", timeZone)\n'})}),"\n",(0,i.jsx)(n.p,{children:"prints"}),"\n",(0,i.jsx)(n.p,{children:"\u5c06\u6253\u5370"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'&{7 -2.35 abc   def}\n&{a:7 b:-2.35 c:abc     def}\n&main.T{a:7, b:-2.35, c:"abc\\tdef"}\nmap[string] int{"CST":-21600, "PST":-28800, "EST":-18000, "UTC":0, "MST":-25200}\n'})}),"\n",(0,i.jsx)(n.p,{children:"(Note the ampersands.) That quoted string format is also available through %q when applied to a value of type string or []byte. The alternate format %#q will use backquotes instead if possible. (The %q format also applies to integers and runes, producing a single-quoted rune constant.) Also, %x works on strings, byte arrays and byte slices as well as on integers, generating a long hexadecimal string, and with a space in the format (% x) it puts spaces between the bytes."}),"\n",(0,i.jsx)(n.p,{children:"\uff08\u8bf7\u6ce8\u610f\u5176\u4e2d\u7684 & \u7b26\u53f7\uff09\u5f53\u9047\u5230 string \u6216 []byte \u503c\u65f6\uff0c \u53ef\u4f7f\u7528 %q \u4ea7\u751f\u5e26\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\uff1b\u800c\u683c\u5f0f %#q \u4f1a\u5c3d\u53ef\u80fd\u4f7f\u7528\u53cd\u5f15\u53f7\u3002 \uff08%q \u683c\u5f0f\u4e5f\u53ef\u7528\u4e8e\u6574\u6570\u548c\u7b26\u6587\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5e26\u5355\u5f15\u53f7\u7684\u7b26\u6587\u5e38\u91cf\u3002\uff09 \u6b64\u5916\uff0c%x \u8fd8\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u3001\u5b57\u8282\u6570\u7ec4\u4ee5\u53ca\u6574\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5f88\u957f\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c \u800c\u5e26\u7a7a\u683c\u7684\u683c\u5f0f\uff08% x\uff09\u8fd8\u4f1a\u5728\u5b57\u8282\u4e4b\u95f4\u63d2\u5165\u7a7a\u683c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Another handy format is %T, which prints the type of a value."}),"\n",(0,i.jsx)(n.p,{children:"\u53e6\u4e00\u79cd\u5b9e\u7528\u7684\u683c\u5f0f\u662f %T\uff0c\u5b83\u4f1a\u6253\u5370\u67d0\u4e2a\u503c\u7684\u7c7b\u578b."}),"\n",(0,i.jsx)(n.p,{children:'fmt.Printf("%T\\n", timeZone)\nprints'}),"\n",(0,i.jsx)(n.p,{children:"\u4f1a\u6253\u5370"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"map[string] int\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to control the default format for a custom type, all that's required is to define a method with the signature String() string on the type. For our simple type T, that might look like this."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u4f60\u60f3\u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u9ed8\u8ba4\u683c\u5f0f\uff0c\u53ea\u9700\u4e3a\u8be5\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a\u5177\u6709 String() string \u7b7e\u540d\u7684\u65b9\u6cd5\u3002\u5bf9\u4e8e\u6211\u4eec\u7b80\u5355\u7684\u7c7b\u578b T\uff0c\u53ef\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (t *T) String() string {\n\treturn fmt.Sprintf("%d/%g/%q", t.a, t.b, t.c)\n}\nfmt.Printf("%v\\n", t)\n'})}),"\n",(0,i.jsx)(n.p,{children:"to print in the format"}),"\n",(0,i.jsx)(n.p,{children:"\u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u683c\u5f0f\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'7/-2.35/"abc\\tdef"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["(If you need to print values of type T as well as pointers to T, the receiver for String must be of value type; this example used a pointer because that's more efficient and idiomatic for struct types. See the section below on ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#pointers_vs_values",children:"pointers vs. value"})," receivers for more information.)"]}),"\n",(0,i.jsxs)(n.p,{children:["\uff08\u5982\u679c\u4f60\u9700\u8981\u50cf\u6307\u5411 T \u7684\u6307\u9488\u90a3\u6837\u6253\u5370\u7c7b\u578b T \u7684\u503c\uff0c String \u7684\u63a5\u6536\u8005\u5c31\u5fc5\u987b\u662f\u503c\u7c7b\u578b\u7684\uff1b\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u63a5\u6536\u8005\u662f\u4e00\u4e2a\u6307\u9488\uff0c \u56e0\u4e3a\u8fd9\u5bf9\u7ed3\u6784\u6765\u8bf4\u66f4\u9ad8\u6548\u800c\u901a\u7528\u3002\u66f4\u591a\u8be6\u60c5\u89c1 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#pointers_vs_values",children:"\u6307\u9488 vs. \u503c\u63a5\u6536\u8005"})," \u4e00\u8282.\uff09"]}),"\n",(0,i.jsx)(n.p,{children:"Our String method is able to call Sprintf because the print routines are fully reentrant and can be wrapped this way. There is one important detail to understand about this approach, however: don't construct a String method by calling Sprintf in a way that will recur into your String method indefinitely. This can happen if the Sprintf call attempts to print the receiver directly as a string, which in turn will invoke the method again. It's a common and easy mistake to make, as this example shows."}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u7684 String \u65b9\u6cd5\u4e5f\u53ef\u8c03\u7528 Sprintf\uff0c \u56e0\u4e3a\u6253\u5370\u4f8b\u7a0b\u53ef\u4ee5\u5b8c\u5168\u91cd\u5165\u5e76\u6309\u8fd9\u79cd\u65b9\u5f0f\u5c01\u88c5\u3002\u4e0d\u8fc7\u8981\u7406\u89e3\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u7ec6\u8282\uff1a \u8bf7\u52ff\u901a\u8fc7\u8c03\u7528 Sprintf \u6765\u6784\u9020 String \u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4f1a\u65e0\u9650\u9012\u5f52\u4f60\u7684\u7684 String \u65b9\u6cd5\u3002\u5f53 Sprintf \u8bd5\u56fe\u5c06\u4e00\u4e2a\u63a5\u6536\u8005\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u800c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u53cd\u8fc7\u6765\u53c8\u8c03\u7528\u4e86 Sprintf \u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u4f1a\u51fa\u73b0\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5e38\u89c1\u7684\u9519\u8bef\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type MyString string\n\nfunc (m MyString) String() string {\n\treturn fmt.Sprintf("MyString=%s", m) // Error: will recur forever.\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type MyString string\n\nfunc (m MyString) String() string {\n\treturn fmt.Sprintf("MyString=%s", m) // \u9519\u8bef\uff1a\u4f1a\u65e0\u9650\u9012\u5f52\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"It's also easy to fix: convert the argument to the basic string type, which does not have the method."}),"\n",(0,i.jsx)(n.p,{children:"\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e5f\u5f88\u7b80\u5355\uff1a\u5c06\u8be5\u5b9e\u53c2\u8f6c\u6362\u4e3a\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u6ca1\u6709\u8fd9\u4e2a\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type MyString string\nfunc (m MyString) String() string {\n\treturn fmt.Sprintf("MyString=%s", string(m)) // OK: note conversion.\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type MyString string\nfunc (m MyString) String() string {\n\treturn fmt.Sprintf("MyString=%s", string(m)) // \u53ef\u4ee5\uff1a\u6ce8\u610f\u8f6c\u6362\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#initialization",children:"initialization section"})," we'll see another technique that avoids this recursion."]}),"\n",(0,i.jsxs)(n.p,{children:["\u5728 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#initialization",children:"\u521d\u59cb\u5316"})," \u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u907f\u514d\u8fd9\u79cd\u9012\u5f52\u7684\u53e6\u4e00\u79cd\u6280\u672f\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["Another printing technique is to pass a print routine's arguments directly to another such routine. The signature of Printf uses the type ...interface"," for its final argument to specify that an arbitrary number of parameters (of arbitrary type) can appear after the format."]}),"\n",(0,i.jsxs)(n.p,{children:["\u53e6\u4e00\u79cd\u6253\u5370\u6280\u672f\u5c31\u662f\u5c06\u6253\u5370\u4f8b\u7a0b\u7684\u5b9e\u53c2\u76f4\u63a5\u4f20\u5165\u53e6\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u7a0b\u3002Printf \u7684\u7b7e\u540d\u4e3a\u5176\u6700\u540e\u7684\u5b9e\u53c2\u4f7f\u7528\u4e86 ...interface"," \u7c7b\u578b\uff0c\u8fd9\u6837\u683c\u5f0f\u7684\u540e\u9762\u5c31\u80fd\u51fa\u73b0\u4efb\u610f\u6570\u91cf\uff0c\u4efb\u610f\u7c7b\u578b\u7684\u5f62\u53c2\u4e86\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Printf(format string, v ...interface{}) (n int, err error) {\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Within the function Printf, v acts like a variable of type []interface"," but if it is passed to another variadic function, it acts like a regular list of arguments. Here is the implementation of the function log.Println we used above. It passes its arguments directly to fmt.Sprintln for the actual formatting."]}),"\n",(0,i.jsxs)(n.p,{children:["\u5728 Printf \u51fd\u6570\u4e2d\uff0cv \u770b\u8d77\u6765\u66f4\u50cf\u662f []interface"," \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4f46\u5982\u679c\u5c06\u5b83\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u53d8\u53c2\u51fd\u6570\u4e2d\uff0c\u5b83\u5c31\u50cf\u662f\u5e38\u89c4\u5b9e\u53c2\u5217\u8868\u4e86\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u4e4b\u524d\u7528\u8fc7\u7684 log.Println \u7684\u5b9e\u73b0\u3002\u5b83\u76f4\u63a5\u5c06\u5176\u5b9e\u53c2\u4f20\u9012\u7ed9 fmt.Sprintln \u8fdb\u884c\u5b9e\u9645\u7684\u683c\u5f0f\u5316\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Println prints to the standard logger in the manner of fmt.Println.\nfunc Println(v ...interface{}) {\n\tstd.Output(2, fmt.Sprintln(v...))  // Output takes parameters (int, string)\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Println \u901a\u8fc7 fmt.Println \u7684\u65b9\u5f0f\u5c06\u65e5\u5fd7\u6253\u5370\u5230\u6807\u51c6\u8bb0\u5f55\u5668\u3002\nfunc Println(v ...interface{}) {\n\tstd.Output(2, fmt.Sprintln(v...))  // Output \u63a5\u53d7\u5f62\u53c2 (int, string)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We write ... after v in the nested call to Sprintln to tell the compiler to treat v as a list of arguments; otherwise it would just pass v as a single slice argument."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u8be5 Sprintln \u5d4c\u5957\u8c03\u7528\u4e2d\uff0c\u6211\u4eec\u5c06 ... \u5199\u5728 v \u4e4b\u540e\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u5c06 v \u89c6\u4f5c\u4e00\u4e2a\u5b9e\u53c2\u5217\u8868\uff0c\u5426\u5219\u5b83\u4f1a\u5c06 v \u5f53\u505a\u5355\u4e00\u7684\u5207\u7247\u5b9e\u53c2\u6765\u4f20\u9012\u3002"}),"\n",(0,i.jsx)(n.p,{children:"There's even more to printing than we've covered here. See the godoc documentation for package fmt for the details."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd8\u6709\u5f88\u591a\u5173\u4e8e\u6253\u5370\u77e5\u8bc6\u70b9\u6ca1\u6709\u63d0\u53ca\u3002\u8be6\u60c5\u8bf7\u53c2\u9605 godoc \u5bf9 fmt \u5305\u7684\u8bf4\u660e\u6587\u6863\u3002"}),"\n",(0,i.jsx)(n.p,{children:"By the way, a ... parameter can be of a specific type, for instance ...int for a min function that chooses the least of a list of integers:"}),"\n",(0,i.jsx)(n.p,{children:"\u987a\u4fbf\u4e00\u63d0\uff0c... \u5f62\u53c2\u53ef\u6307\u5b9a\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u4ece\u6574\u6570\u5217\u8868\u4e2d\u9009\u51fa\u6700\u5c0f\u503c\u7684\u51fd\u6570 min\uff0c\u5176\u5f62\u53c2\u53ef\u4e3a ...int \u7c7b\u578b\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Min(a ...int) int {\n\tmin := int(^uint(0) >> 1)  // largest int\n\tfor _, i := range a {\n\t\tif i < min {\n\t\t\tmin = i\n\t\t}\n\t}\n\treturn min\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Min(a ...int) int {\n\tmin := int(^uint(0) >> 1)  // \u6700\u5927\u7684 int\n\tfor _, i := range a {\n\t\tif i < min {\n\t\t\tmin = i\n\t\t}\n\t}\n\treturn min\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"append",children:"Append"}),"\n",(0,i.jsx)(n.h3,{id:"\u8ffd\u52a0",children:"\u8ffd\u52a0"}),"\n",(0,i.jsx)(n.p,{children:"Now we have the missing piece we needed to explain the design of the append built-in function. The signature of append is different from our custom Append function above. Schematically, it's like this:"}),"\n",(0,i.jsx)(n.p,{children:"\u73b0\u5728\u6211\u4eec\u8981\u5bf9\u5185\u5efa\u51fd\u6570 append \u7684\u8bbe\u8ba1\u8fdb\u884c\u8865\u5145\u8bf4\u660e\u3002append \u51fd\u6570\u7684\u7b7e\u540d\u4e0d\u540c\u4e8e\u524d\u9762\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 Append \u51fd\u6570\u3002\u5927\u81f4\u6765\u8bf4\uff0c\u5b83\u5c31\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func append(slice []T, elements ...T) []T\n"})}),"\n",(0,i.jsx)(n.p,{children:"where T is a placeholder for any given type. You can't actually write a function in Go where the type T is determined by the caller. That's why append is built in: it needs support from the compiler."}),"\n",(0,i.jsx)(n.p,{children:"\u5176\u4e2d\u7684 T \u4e3a\u4efb\u610f\u7ed9\u5b9a\u7c7b\u578b\u7684\u5360\u4f4d\u7b26\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u65e0\u6cd5\u5728 Go \u4e2d\u7f16\u5199\u4e00\u4e2a\u7c7b\u578b T \u7531\u8c03\u7528\u8005\u51b3\u5b9a\u7684\u51fd\u6570\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55 append \u4e3a\u5185\u5efa\u51fd\u6570\u7684\u539f\u56e0\uff1a\u5b83\u9700\u8981\u7f16\u8bd1\u5668\u7684\u652f\u6301\u3002"}),"\n",(0,i.jsx)(n.p,{children:"What append does is append the elements to the end of the slice and return the result. The result needs to be returned because, as with our hand-written Append, the underlying array may change. This simple example"}),"\n",(0,i.jsx)(n.p,{children:"append \u4f1a\u5728\u5207\u7247\u672b\u5c3e\u8ffd\u52a0\u5143\u7d20\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u6211\u4eec\u5fc5\u987b\u8fd4\u56de\u7ed3\u679c\uff0c \u539f\u56e0\u4e0e\u6211\u4eec\u624b\u5199\u7684 Append \u4e00\u6837\uff0c\u5373\u5e95\u5c42\u6570\u7ec4\u53ef\u80fd\u4f1a\u88ab\u6539\u53d8\u3002\u4ee5\u4e0b\u7b80\u5355\u7684\u4f8b\u5b50"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"x := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n"})}),"\n",(0,i.jsx)(n.p,{children:"prints [1 2 3 4 5 6]. So append works a little like Printf, collecting an arbitrary number of arguments."}),"\n",(0,i.jsx)(n.p,{children:"\u5c06\u6253\u5370 [1 2 3 4 5 6]\u3002\u56e0\u6b64 append \u6709\u70b9\u50cf Printf \u90a3\u6837\uff0c\u53ef\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u5b9e\u53c2\u3002"}),"\n",(0,i.jsx)(n.p,{children:"But what if we wanted to do what our Append does and append a slice to a slice? Easy: use ... at the call site, just as we did in the call to Output above. This snippet produces identical output to the one above."}),"\n",(0,i.jsx)(n.p,{children:"\u4f46\u5982\u679c\u6211\u4eec\u8981\u50cf Append \u90a3\u6837\u5c06\u4e00\u4e2a\u5207\u7247\u8ffd\u52a0\u5230\u53e6\u4e00\u4e2a\u5207\u7247\u4e2d\u5462\uff1f \u5f88\u7b80\u5355\uff1a\u5728\u8c03\u7528\u7684\u5730\u65b9\u4f7f\u7528 ...\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u9762\u8c03\u7528 Output \u90a3\u6837\u3002\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u7684\u8f93\u51fa\u4e0e\u4e0a\u4e00\u4e2a\u76f8\u540c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"x := []int{1,2,3}\ny := []int{4,5,6}\nx = append(x, y...)\nfmt.Println(x)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Without that ..., it wouldn't compile because the types would be wrong; y is not of type int."}),"\n",(0,i.jsx)(n.p,{children:"\u5982\u679c\u6ca1\u6709 ...\uff0c\u5b83\u5c31\u4f1a\u7531\u4e8e\u7c7b\u578b\u9519\u8bef\u800c\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a y \u4e0d\u662f int \u7c7b\u578b\u7684\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,i.jsx)(n.h2,{id:"\u521d\u59cb\u5316",children:"\u521d\u59cb\u5316"}),"\n",(0,i.jsx)(n.p,{children:"Although it doesn't look superficially very different from initialization in C or C++, initialization in Go is more powerful. Complex structures can be built during initialization and the ordering issues among initialized objects, even among different packages, are handled correctly."}),"\n",(0,i.jsx)(n.p,{children:"\u5c3d\u7ba1\u4ece\u8868\u9762\u4e0a\u770b\uff0cGo \u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u4e0e C \u6216 C++ \u76f8\u6bd4\u5e76\u65e0\u592a\u5927\u5dee\u522b\uff0c\u4f46\u5b83\u786e\u5b9e\u66f4\u4e3a\u5f3a\u5927\u3002 \u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u6784\u5efa\u590d\u6742\u7684\u7ed3\u6784\uff0c\u8fd8\u80fd\u6b63\u786e\u5904\u7406\u4e0d\u540c\u5305\u5bf9\u8c61\u95f4\u7684\u521d\u59cb\u5316\u987a\u5e8f\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(n.h3,{id:"\u5e38\u91cf",children:"\u5e38\u91cf"}),"\n",(0,i.jsx)(n.p,{children:"Constants in Go are just that\u2014constant. They are created at compile time, even when defined as locals in functions, and can only be numbers, characters (runes), strings or booleans. Because of the compile-time restriction, the expressions that define them must be constant expressions, evaluatable by the compiler. For instance, 1<<3 is a constant expression, while math.Sin(math.Pi/4) is not because the function call to math.Sin needs to happen at run time."}),"\n",(0,i.jsx)(n.p,{children:"Go \u4e2d\u7684\u5e38\u91cf\u5c31\u662f\u4e0d\u53d8\u91cf\u3002\u5b83\u4eec\u5728\u7f16\u8bd1\u65f6\u521b\u5efa\uff0c\u5373\u4fbf\u5b83\u4eec\u53ef\u80fd\u662f\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u5e38\u91cf\u53ea\u80fd\u662f\u6570\u5b57\u3001\u5b57\u7b26\uff08\u7b26\u6587\uff09\u3001\u5b57\u7b26\u4e32\u6216\u5e03\u5c14\u503c\u3002\u7531\u4e8e\u7f16\u8bd1\u65f6\u7684\u9650\u5236\uff0c \u5b9a\u4e49\u5b83\u4eec\u7684\u8868\u8fbe\u5f0f\u5fc5\u987b\u4e5f\u662f\u53ef\u88ab\u7f16\u8bd1\u5668\u6c42\u503c\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982 1<<3 \u5c31\u662f\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c math.Sin(math.Pi/4) \u5219\u4e0d\u662f\uff0c\u56e0\u4e3a\u5bf9 math.Sin \u7684\u51fd\u6570\u8c03\u7528\u5728\u8fd0\u884c\u65f6\u624d\u4f1a\u53d1\u751f\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In Go, enumerated constants are created using the iota enumerator. Since iota can be part of an expression and expressions can be implicitly repeated, it is easy to build intricate sets of values."}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Go \u4e2d\uff0c\u679a\u4e3e\u5e38\u91cf\u4f7f\u7528\u679a\u4e3e\u5668 iota \u521b\u5efa\u3002\u7531\u4e8e iota \u53ef\u4e3a\u8868\u8fbe\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u800c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u88ab\u9690\u5f0f\u5730\u91cd\u590d\uff0c\u8fd9\u6837\u4e5f\u5c31\u66f4\u5bb9\u6613\u6784\u5efa\u590d\u6742\u7684\u503c\u7684\u96c6\u5408\u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type ByteSize float64\n\nconst (\n    // \u901a\u8fc7\u8d4b\u4e88\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u5ffd\u7565\u7b2c\u4e00\u4e2a\u503c\n    _           = iota // ignore first value by assigning to blank identifier\n    KB ByteSize = 1 << (10 * iota)\n    MB\n    GB\n    TB\n    PB\n    EB\n    ZB\n    YB\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The ability to attach a method such as String to any user-defined type makes it possible for arbitrary values to format themselves automatically for printing. Although you'll see it most often applied to structs, this technique is also useful for scalar types such as floating-point types like ByteSize."}),"\n",(0,i.jsx)(n.p,{children:"\u7531\u4e8e\u53ef\u5c06 String \u4e4b\u7c7b\u7684\u65b9\u6cd5\u9644\u52a0\u5728\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0a\uff0c \u56e0\u6b64\u5b83\u5c31\u4e3a\u6253\u5370\u65f6\u81ea\u52a8\u683c\u5f0f\u5316\u4efb\u610f\u503c\u63d0\u4f9b\u4e86\u53ef\u80fd\u6027\uff0c\u5373\u4fbf\u662f\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002 \u5c3d\u7ba1\u4f60\u5e38\u5e38\u4f1a\u770b\u5230\u8fd9\u79cd\u6280\u672f\u5e94\u7528\u4e8e\u7ed3\u6784\u4f53\uff0c\u4f46\u5b83\u5bf9\u4e8e\u50cf ByteSize \u4e4b\u7c7b\u7684\u6d6e\u70b9\u6570\u6807\u91cf\u7b49\u7c7b\u578b\u4e5f\u662f\u6709\u7528\u7684\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (b ByteSize) String() string {\n    switch {\n    case b >= YB:\n        return fmt.Sprintf("%.2fYB", b/YB)\n    case b >= ZB:\n        return fmt.Sprintf("%.2fZB", b/ZB)\n    case b >= EB:\n        return fmt.Sprintf("%.2fEB", b/EB)\n    case b >= PB:\n        return fmt.Sprintf("%.2fPB", b/PB)\n    case b >= TB:\n        return fmt.Sprintf("%.2fTB", b/TB)\n    case b >= GB:\n        return fmt.Sprintf("%.2fGB", b/GB)\n    case b >= MB:\n        return fmt.Sprintf("%.2fMB", b/MB)\n    case b >= KB:\n        return fmt.Sprintf("%.2fKB", b/KB)\n    }\n    return fmt.Sprintf("%.2fB", b)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The expression YB prints as 1.00YB, while ByteSize(1e13) prints as 9.09TB."}),"\n",(0,i.jsx)(n.p,{children:"\u8868\u8fbe\u5f0f YB \u4f1a\u6253\u5370\u51fa 1.00YB\uff0c\u800c ByteSize(1e13) \u5219\u4f1a\u6253\u5370\u51fa 9.09TB\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The use here of Sprintf to implement ByteSize's String method is safe (avoids recurring indefinitely) not because of a conversion but because it calls Sprintf with %f, which is not a string format: Sprintf will only call the String method when it wants a string, and %f wants a floating-point value."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u8fd9\u91cc\u7528 Sprintf \u5b9e\u73b0 ByteSize \u7684 String \u65b9\u6cd5\u5f88\u5b89\u5168\uff08\u4e0d\u4f1a\u65e0\u9650\u9012\u5f52\uff09\uff0c\u8fd9\u5012\u4e0d\u662f\u56e0\u4e3a\u7c7b\u578b\u8f6c\u6362\uff0c\u800c\u662f\u5b83\u4ee5 %f \u8c03\u7528\u4e86 Sprintf\uff0c\u5b83\u5e76\u4e0d\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u683c\u5f0f\uff1aSprintf \u53ea\u4f1a\u5728\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u65f6\u624d\u8c03\u7528 String \u65b9\u6cd5\uff0c\u800c %f \u9700\u8981\u4e00\u4e2a\u6d6e\u70b9\u6570\u503c\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.h3,{id:"\u53d8\u91cf",children:"\u53d8\u91cf"}),"\n",(0,i.jsx)(n.p,{children:"Variables can be initialized just like constants but the initializer can be a general expression computed at run time."}),"\n",(0,i.jsx)(n.p,{children:"\u53d8\u91cf\u7684\u521d\u59cb\u5316\u4e0e\u5e38\u91cf\u7c7b\u4f3c\uff0c\u4f46\u5176\u521d\u59cb\u503c\u4e5f\u53ef\u4ee5\u662f\u5728\u8fd0\u884c\u65f6\u624d\u88ab\u8ba1\u7b97\u7684\u4e00\u822c\u8868\u8fbe\u5f0f\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var (\n\thome   = os.Getenv("HOME")\n\tuser   = os.Getenv("USER")\n\tgopath = os.Getenv("GOPATH")\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"the-init-function",children:"The init function"}),"\n",(0,i.jsx)(n.h3,{id:"init-\u51fd\u6570",children:"init \u51fd\u6570"}),"\n",(0,i.jsx)(n.p,{children:"Finally, each source file can define its own niladic init function to set up whatever state is required. (Actually each file can have multiple init functions.) And finally means finally: init is called after all the variable declarations in the package have evaluated their initializers, and those are evaluated only after all the imported packages have been initialized."}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u540e\uff0c\u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u81ea\u5df1\u7684\u65e0\u53c2\u6570 init \u51fd\u6570\u6765\u8bbe\u7f6e\u4e00\u4e9b\u5fc5\u8981\u7684\u72b6\u6001\u3002 \uff08\u5176\u5b9e\u6bcf\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a init \u51fd\u6570\u3002\uff09\u800c\u5b83\u7684\u7ed3\u675f\u5c31\u610f\u5473\u7740\u521d\u59cb\u5316\u7ed3\u675f\uff1a \u53ea\u6709\u8be5\u5305\u4e2d\u7684\u6240\u6709\u53d8\u91cf\u58f0\u660e\u90fd\u901a\u8fc7\u5b83\u4eec\u7684\u521d\u59cb\u5316\u5668\u6c42\u503c\u540e init \u624d\u4f1a\u88ab\u8c03\u7528\uff0c \u800c\u90a3\u4e9b init \u53ea\u6709\u5728\u6240\u6709\u5df2\u5bfc\u5165\u7684\u5305\u90fd\u88ab\u521d\u59cb\u5316\u540e\u624d\u4f1a\u88ab\u6c42\u503c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Besides initializations that cannot be expressed as declarations, a common use of init functions is to verify or repair correctness of the program state before real execution begins."}),"\n",(0,i.jsx)(n.p,{children:"\u9664\u4e86\u90a3\u4e9b\u4e0d\u80fd\u88ab\u8868\u793a\u6210\u58f0\u660e\u7684\u521d\u59cb\u5316\u5916\uff0cinit \u51fd\u6570\u8fd8\u5e38\u88ab\u7528\u5728\u7a0b\u5e8f\u771f\u6b63\u5f00\u59cb\u6267\u884c\u524d\uff0c\u68c0\u9a8c\u6216\u6821\u6b63\u7a0b\u5e8f\u7684\u72b6\u6001\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func init() {\n\tif user == "" {\n\t\tlog.Fatal("$USER not set")\n\t}\n\tif home == "" {\n\t\thome = "/home/" + user\n\t}\n\tif gopath == "" {\n\t\tgopath = home + "/go"\n\t}\n\t// gopath may be overridden by --gopath flag on command line.\n\tflag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func init() {\n\tif user == "" {\n\t\tlog.Fatal("$USER not set")\n\t}\n\tif home == "" {\n\t\thome = "/home/" + user\n\t}\n\tif gopath == "" {\n\t\tgopath = home + "/go"\n\t}\n\t// gopath \u53ef\u901a\u8fc7\u547d\u4ee4\u884c\u4e2d\u7684 --gopath \u6807\u8bb0\u8986\u76d6\u6389\u3002\n\tflag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h2,{id:"\u65b9\u6cd5",children:"\u65b9\u6cd5"}),"\n",(0,i.jsx)(n.h3,{id:"pointers-vs-values",children:"Pointers vs. Values"}),"\n",(0,i.jsx)(n.h3,{id:"\u6307\u9488-vs-\u503c",children:"\u6307\u9488 vs. \u503c"}),"\n",(0,i.jsx)(n.p,{children:"As we saw with ByteSize, methods can be defined for any named type (except a pointer or an interface); the receiver does not have to be a struct."}),"\n",(0,i.jsx)(n.p,{children:"\u6b63\u5982 ByteSize \u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4efb\u4f55\u5df2\u547d\u540d\u7684\u7c7b\u578b\uff08\u9664\u4e86\u6307\u9488\u6216\u63a5\u53e3\uff09\u5b9a\u4e49\u65b9\u6cd5\uff1b \u63a5\u6536\u8005\u53ef\u4e0d\u5fc5\u4e3a\u7ed3\u6784\u4f53\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In the discussion of slices above, we wrote an Append function. We can define it as a method on slices instead. To do this, we first declare a named type to which we can bind the method, and then make the receiver for the method a value of that type."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u4e4b\u524d\u8ba8\u8bba\u5207\u7247\u65f6\uff0c\u6211\u4eec\u7f16\u5199\u4e86\u4e00\u4e2a Append \u51fd\u6570\u3002 \u6211\u4eec\u4e5f\u53ef\u5c06\u5176\u5b9a\u4e49\u4e3a\u5207\u7247\u7684\u65b9\u6cd5\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9996\u5148\u8981\u58f0\u660e\u4e00\u4e2a\u5df2\u547d\u540d\u7684\u7c7b\u578b\u6765\u7ed1\u5b9a\u8be5\u65b9\u6cd5\uff0c \u7136\u540e\u4f7f\u8be5\u65b9\u6cd5\u7684\u63a5\u6536\u8005\u6210\u4e3a\u8be5\u7c7b\u578b\u7684\u503c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type ByteSlice []byte\n\nfunc (slice ByteSlice) Append(data []byte) []byte {\n\t// Body exactly the same as above\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type ByteSlice []byte\n\nfunc (slice ByteSlice) Append(data []byte) []byte {\n\t// \u4e3b\u4f53\u548c\u524d\u9762\u76f8\u540c\u3002\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This still requires the method to return the updated slice. We can eliminate that clumsiness by redefining the method to take a pointer to a ByteSlice as its receiver, so the method can overwrite the caller's slice."}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8be5\u65b9\u6cd5\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u5207\u7247\u3002\u4e3a\u4e86\u6d88\u9664\u8fd9\u79cd\u4e0d\u4fbf\uff0c\u6211\u4eec\u53ef\u901a\u8fc7\u91cd\u65b0\u5b9a\u4e49\u8be5\u65b9\u6cd5\uff0c \u5c06\u4e00\u4e2a\u6307\u5411 ByteSlice \u7684\u6307\u9488\u4f5c\u4e3a\u8be5\u65b9\u6cd5\u7684\u63a5\u6536\u8005\uff0c \u8fd9\u6837\u8be5\u65b9\u6cd5\u5c31\u80fd\u91cd\u5199\u8c03\u7528\u8005\u63d0\u4f9b\u7684\u5207\u7247\u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (p *ByteSlice) Append(data []byte) {\n\tslice := *p\n\t// Body as above, without the return.\n\t*p = slice\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (p *ByteSlice) Append(data []byte) {\n\tslice := *p\n\t// \u4e3b\u4f53\u548c\u524d\u9762\u76f8\u540c\uff0c\u4f46\u6ca1\u6709 return\u3002\n\t*p = slice\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"In fact, we can do even better. If we modify our function so it looks like a standard Write method, like this,"}),"\n",(0,i.jsx)(n.p,{children:"\u5176\u5b9e\u6211\u4eec\u505a\u5f97\u66f4\u597d\u3002\u82e5\u6211\u4eec\u5c06\u51fd\u6570\u4fee\u6539\u4e3a\u4e0e\u6807\u51c6 Write \u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5c31\u50cf\u8fd9\u6837\uff0c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (p *ByteSlice) Write(data []byte) (n int, err error) {\n\tslice := *p\n\t// Again as above.\n\t*p = slice\n\treturn len(data), nil\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (p *ByteSlice) Write(data []byte) (n int, err error) {\n\tslice := *p\n\t// \u4f9d\u65e7\u548c\u524d\u9762\u76f8\u540c\u3002\n\t*p = slice\n\treturn len(data), nil\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["then the type ",(0,i.jsx)(n.code,{children:"*ByteSlice"})," satisfies the standard interface io.Writer, which is handy. For instance, we can print into one."]}),"\n",(0,i.jsxs)(n.p,{children:["\u90a3\u4e48\u7c7b\u578b ",(0,i.jsx)(n.code,{children:"*ByteSlice"})," \u5c31\u6ee1\u8db3\u4e86\u6807\u51c6\u7684 io.Writer \u63a5\u53e3\uff0c\u8fd9\u5c06\u975e\u5e38\u5b9e\u7528\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5c06\u5185\u5bb9\u5199\u5165\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'\tvar b ByteSlice\n\tfmt.Fprintf(&b, "This hour has %d days\\n", 7)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We pass the address of a ByteSlice because only ",(0,i.jsx)(n.code,{children:"*ByteSlice"})," satisfies io.Writer. The rule about pointers vs. values for receivers is that value methods can be invoked on pointers and values, but pointer methods can only be invoked on pointers."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6211\u4eec\u5c06 ByteSlice \u7684\u5730\u5740\u4f20\u5165\uff0c\u56e0\u4e3a\u53ea\u6709 ",(0,i.jsx)(n.code,{children:"*ByteSlice"})," \u624d\u6ee1\u8db3 io.Writer\u3002\u4ee5\u6307\u9488\u6216\u503c\u4e3a\u63a5\u6536\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a\u503c\u65b9\u6cd5\u53ef\u901a\u8fc7\u6307\u9488\u548c\u503c\u8c03\u7528\uff0c \u800c\u6307\u9488\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u6307\u9488\u6765\u8c03\u7528\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"This rule arises because pointer methods can modify the receiver; invoking them on a value would cause the method to receive a copy of the value, so any modifications would be discarded. The language therefore disallows this mistake. There is a handy exception, though. When the value is addressable, the language takes care of the common case of invoking a pointer method on a value by inserting the address operator automatically. In our example, the variable b is addressable, so we can call its Write method with just b.Write. The compiler will rewrite that to (&b).Write for us."}),"\n",(0,i.jsx)(n.p,{children:"\u4e4b\u6240\u4ee5\u4f1a\u6709\u8fd9\u6761\u89c4\u5219\u662f\u56e0\u4e3a\u6307\u9488\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539\u63a5\u6536\u8005\uff1b\u901a\u8fc7\u503c\u8c03\u7528\u5b83\u4eec\u4f1a\u5bfc\u81f4\u65b9\u6cd5\u63a5\u6536\u5230\u8be5\u503c\u7684\u526f\u672c\uff0c \u56e0\u6b64\u4efb\u4f55\u4fee\u6539\u90fd\u5c06\u88ab\u4e22\u5f03\uff0c\u56e0\u6b64\u8be5\u8bed\u8a00\u4e0d\u5141\u8bb8\u8fd9\u79cd\u9519\u8bef\u3002\u4e0d\u8fc7\u6709\u4e2a\u65b9\u4fbf\u7684\u4f8b\u5916\uff1a\u82e5\u8be5\u503c\u662f\u53ef\u5bfb\u5740\u7684\uff0c \u90a3\u4e48\u8be5\u8bed\u8a00\u5c31\u4f1a\u81ea\u52a8\u63d2\u5165\u53d6\u5740\u64cd\u4f5c\u7b26\u6765\u5bf9\u4ed8\u4e00\u822c\u7684\u901a\u8fc7\u503c\u8c03\u7528\u7684\u6307\u9488\u65b9\u6cd5\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf b \u662f\u53ef\u5bfb\u5740\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u901a\u8fc7 b.Write \u6765\u8c03\u7528\u5b83\u7684 Write \u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06\u5b83\u91cd\u5199\u4e3a (&b).Write\u3002"}),"\n",(0,i.jsx)(n.p,{children:"By the way, the idea of using Write on a slice of bytes is central to the implementation of bytes.Buffer."}),"\n",(0,i.jsx)(n.p,{children:"\u987a\u4fbf\u4e00\u63d0\uff0c\u5728\u5b57\u8282\u5207\u7247\u4e0a\u4f7f\u7528 Write \u7684\u60f3\u6cd5\u5df2\u88ab bytes.Buffer \u6240\u5b9e\u73b0\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"interfaces-and-other-types",children:"Interfaces and other types"}),"\n",(0,i.jsx)(n.h2,{id:"\u63a5\u53e3\u4e0e\u5176\u5b83\u7c7b\u578b",children:"\u63a5\u53e3\u4e0e\u5176\u5b83\u7c7b\u578b"}),"\n",(0,i.jsx)(n.h3,{id:"\u63a5\u53e3",children:"\u63a5\u53e3"}),"\n",(0,i.jsx)(n.p,{children:"Interfaces in Go provide a way to specify the behavior of an object: if something can do this, then it can be used here. We've seen a couple of simple examples already; custom printers can be implemented by a String method while Fprintf can generate output to anything with a Write method. Interfaces with only one or two methods are common in Go code, and are usually given a name derived from the method, such as io.Writer for something that implements Write."}),"\n",(0,i.jsx)(n.p,{children:"Go \u4e2d\u7684\u63a5\u53e3\u4e3a\u6307\u5b9a\u5bf9\u8c61\u7684\u884c\u4e3a\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\uff1a\u5982\u679c\u67d0\u6837\u4e1c\u897f\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\uff0c \u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u7528\u5728\u8fd9\u91cc\u3002\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u8bb8\u591a\u7b80\u5355\u7684\u793a\u4f8b\u4e86\uff1b\u901a\u8fc7\u5b9e\u73b0 String \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6253\u5370\u51fd\u6570\uff0c\u800c\u901a\u8fc7 Write \u65b9\u6cd5\uff0cFprintf \u5219\u80fd\u5bf9\u4efb\u4f55\u5bf9\u8c61\u4ea7\u751f\u8f93\u51fa\u3002\u5728 Go \u4ee3\u7801\u4e2d\uff0c \u4ec5\u5305\u542b\u4e00\u4e24\u79cd\u65b9\u6cd5\u7684\u63a5\u53e3\u5f88\u5e38\u89c1\uff0c\u4e14\u5176\u540d\u79f0\u901a\u5e38\u6765\u81ea\u4e8e\u5b9e\u73b0\u5b83\u7684\u65b9\u6cd5\uff0c \u5982 io.Writer \u5c31\u662f\u5b9e\u73b0\u4e86 Write \u7684\u4e00\u7c7b\u5bf9\u8c61\u3002"}),"\n",(0,i.jsx)(n.p,{children:"A type can implement multiple interfaces. For instance, a collection can be sorted by the routines in package sort if it implements sort.Interface, which contains Len(), Less(i, j int) bool, and Swap(i, j int), and it could also have a custom formatter. In this contrived example Sequence satisfies both."}),"\n",(0,i.jsx)(n.p,{children:"\u6bcf\u79cd\u7c7b\u578b\u90fd\u80fd\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u3002\u4f8b\u5982\u4e00\u4e2a\u5b9e\u73b0\u4e86 sort.Interface \u63a5\u53e3\u7684\u96c6\u5408\u5c31\u53ef\u901a\u8fc7 sort \u5305\u4e2d\u7684\u4f8b\u7a0b\u8fdb\u884c\u6392\u5e8f\u3002\u8be5\u63a5\u53e3\u5305\u62ec Len()\u3001Less(i, j int) bool \u4ee5\u53ca Swap(i, j int)\uff0c\u53e6\u5916\uff0c\u8be5\u96c6\u5408\u4ecd\u7136\u53ef\u4ee5\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u683c\u5f0f\u5316\u5668\u3002 \u4ee5\u4e0b\u7279\u610f\u6784\u5efa\u7684\u4f8b\u5b50 Sequence \u5c31\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Sequence []int\n\n// Methods required by sort.Interface.\n// sort.Interface \u6240\u9700\u7684\u65b9\u6cd5\u3002\nfunc (s Sequence) Len() int {\n    return len(s)\n}\nfunc (s Sequence) Less(i, j int) bool {\n    return s[i] < s[j]\n}\nfunc (s Sequence) Swap(i, j int) {\n    s[i], s[j] = s[j], s[i]\n}\n\n// Method for printing - sorts the elements before printing.\n// \u7528\u4e8e\u6253\u5370\u7684\u65b9\u6cd5 - \u5728\u6253\u5370\u524d\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\nfunc (s Sequence) String() string {\n    sort.Sort(s)\n    str := "["\n    for i, elem := range s {\n        if i > 0 {\n            str += " "\n        }\n        str += fmt.Sprint(elem)\n    }\n    return str + "]"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"conversions",children:"Conversions"}),"\n",(0,i.jsx)(n.h3,{id:"\u7c7b\u578b\u8f6c\u6362",children:"\u7c7b\u578b\u8f6c\u6362"}),"\n",(0,i.jsx)(n.p,{children:"The String method of Sequence is recreating the work that Sprint already does for slices. We can share the effort if we convert the Sequence to a plain []int before calling Sprint."}),"\n",(0,i.jsx)(n.p,{children:"Sequence \u7684 String \u65b9\u6cd5\u91cd\u65b0\u5b9e\u73b0\u4e86 Sprint \u4e3a\u5207\u7247\u5b9e\u73b0\u7684\u529f\u80fd\u3002\u82e5\u6211\u4eec\u5728\u8c03\u7528 Sprint \u4e4b\u524d\u5c06 Sequence \u8f6c\u6362\u4e3a\u7eaf\u7cb9\u7684 []int\uff0c\u5c31\u80fd\u5171\u4eab\u5df2\u5b9e\u73b0\u7684\u529f\u80fd\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (s Sequence) String() string {\n\tsort.Sort(s)\n\treturn fmt.Sprint([]int(s))\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This method is another example of the conversion technique for calling Sprintf safely from a String method. Because the two types (Sequence and []int) are the same if we ignore the type name, it's legal to convert between them. The conversion doesn't create a new value, it just temporarily acts as though the existing value has a new type. (There are other legal conversions, such as from integer to floating point, that do create a new value.)"}),"\n",(0,i.jsx)(n.p,{children:"\u8be5\u65b9\u6cd5\u662f\u901a\u8fc7\u7c7b\u578b\u8f6c\u6362\u6280\u672f\uff0c\u5728 String \u65b9\u6cd5\u4e2d\u5b89\u5168\u8c03\u7528 Sprintf \u7684\u53e6\u4e2a\u4e00\u4f8b\u5b50\u3002\u82e5\u6211\u4eec\u5ffd\u7565\u7c7b\u578b\u540d\u7684\u8bdd\uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\uff08Sequence \u548c []int\uff09\u5176\u5b9e\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u5728\u4e8c\u8005\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u662f\u5408\u6cd5\u7684\u3002 \u8f6c\u6362\u8fc7\u7a0b\u5e76\u4e0d\u4f1a\u521b\u5efa\u65b0\u503c\uff0c\u5b83\u53ea\u662f\u6682\u65f6\u8ba9\u73b0\u6709\u7684\u503c\u770b\u8d77\u6765\u6709\u4e2a\u65b0\u7c7b\u578b\u800c\u5df2\u3002 \uff08\u8fd8\u6709\u4e9b\u5408\u6cd5\u8f6c\u6362\u5219\u4f1a\u521b\u5efa\u65b0\u503c\uff0c\u5982\u4ece\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u7b49\u3002\uff09"}),"\n",(0,i.jsx)(n.p,{children:"It's an idiom in Go programs to convert the type of an expression to access a different set of methods. As an example, we could use the existing type sort.IntSlice to reduce the entire example to this:"}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Go \u7a0b\u5e8f\u4e2d\uff0c\u4e3a\u8bbf\u95ee\u4e0d\u540c\u7684\u65b9\u6cd5\u96c6\u800c\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u7684\u60c5\u51b5\u975e\u5e38\u5e38\u89c1\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4f7f\u7528\u73b0\u6709\u7684 sort.IntSlice \u7c7b\u578b\u6765\u7b80\u5316\u6574\u4e2a\u793a\u4f8b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Sequence []int\n\n// Method for printing - sorts the elements before printing\nfunc (s Sequence) String() string {\n\tsort.IntSlice(s).Sort()\n\treturn fmt.Sprint([]int(s))\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Sequence []int\n\n// // \u7528\u4e8e\u6253\u5370\u7684\u65b9\u6cd5 - \u5728\u6253\u5370\u524d\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\nfunc (s Sequence) String() string {\n\tsort.IntSlice(s).Sort()\n\treturn fmt.Sprint([]int(s))\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now, instead of having Sequence implement multiple interfaces (sorting and printing), we're using the ability of a data item to be converted to multiple types (Sequence, sort.IntSlice and []int), each of which does some part of the job. That's more unusual in practice but can be effective."}),"\n",(0,i.jsx)(n.p,{children:"\u73b0\u5728\uff0c\u4e0d\u5fc5\u8ba9 Sequence \u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\uff08\u6392\u5e8f\u548c\u6253\u5370\uff09\uff0c \u6211\u4eec\u53ef\u901a\u8fc7\u5c06\u6570\u636e\u6761\u76ee\u8f6c\u6362\u4e3a\u591a\u79cd\u7c7b\u578b\uff08Sequence\u3001sort.IntSlice \u548c []int\uff09\u6765\u4f7f\u7528\u76f8\u5e94\u7684\u529f\u80fd\uff0c\u6bcf\u6b21\u8f6c\u6362\u90fd\u5b8c\u6210\u4e00\u90e8\u5206\u5de5\u4f5c\u3002 \u8fd9\u5728\u5b9e\u8df5\u4e2d\u867d\u7136\u6709\u4e9b\u4e0d\u540c\u5bfb\u5e38\uff0c\u4f46\u5f80\u5f80\u5374\u5f88\u6709\u6548\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"interface-conversions-and-type-assertions",children:"Interface conversions and type assertions"}),"\n",(0,i.jsx)(n.h3,{id:"\u63a5\u53e3\u8f6c\u6362\u4e0e\u7c7b\u578b\u65ad\u8a00",children:"\u63a5\u53e3\u8f6c\u6362\u4e0e\u7c7b\u578b\u65ad\u8a00"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#type_switch",children:"Type switches"})," are a form of conversion: they take an interface and, for each case in the switch, in a sense convert it to the type of that case. Here's a simplified version of how the code under fmt.Printf turns a value into a string using a type switch. If it's already a string, we want the actual string value held by the interface, while if it has a String method we want the result of calling the method."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#type_switch",children:"\u7c7b\u578b\u9009\u62e9"})," \u662f\u7c7b\u578b\u8f6c\u6362\u7684\u4e00\u79cd\u5f62\u5f0f\uff1a\u5b83\u63a5\u53d7\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728\u9009\u62e9 \uff08switch\uff09\u4e2d\u6839\u636e\u5176\u5224\u65ad\u9009\u62e9\u5bf9\u5e94\u7684\u60c5\u51b5\uff08case\uff09\uff0c \u5e76\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u5c06\u5176\u8f6c\u6362\u4e3a\u8be5\u79cd\u7c7b\u578b\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e3a fmt.Printf \u901a\u8fc7\u7c7b\u578b\u9009\u62e9\u5c06\u503c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u7b80\u5316\u7248\u3002\u82e5\u5b83\u5df2\u7ecf\u4e3a\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u9700\u8981\u8be5\u63a5\u53e3\u4e2d\u5b9e\u9645\u7684\u5b57\u7b26\u4e32\u503c\uff1b \u82e5\u5b83\u6709 String \u65b9\u6cd5\uff0c\u6211\u4eec\u5219\u9700\u8981\u8c03\u7528\u8be5\u65b9\u6cd5\u6240\u5f97\u7684\u7ed3\u679c\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Stringer interface {\n\tString() string\n}\n\nvar value interface{} // Value provided by caller.\nswitch str := value.(type) {\ncase string:\n\treturn str\ncase Stringer:\n\treturn str.String()\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Stringer interface {\n\tString() string\n}\n\nvar value interface{} // \u8c03\u7528\u8005\u63d0\u4f9b\u7684\u503c\u3002\nswitch str := value.(type) {\ncase string:\n\treturn str\ncase Stringer:\n\treturn str.String()\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The first case finds a concrete value; the second converts the interface into another interface. It's perfectly fine to mix types this way."}),"\n",(0,i.jsx)(n.p,{children:"\u7b2c\u4e00\u79cd\u60c5\u51b5\u83b7\u53d6\u5177\u4f53\u7684\u503c\uff0c\u7b2c\u4e8c\u79cd\u5c06\u8be5\u63a5\u53e3\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u63a5\u53e3\u3002\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u6df7\u5408\u7c7b\u578b\u6765\u8bf4\u975e\u5e38\u5b8c\u7f8e\u3002"}),"\n",(0,i.jsx)(n.p,{children:"What if there's only one type we care about? If we know the value holds a string and we just want to extract it? A one-case type switch would do, but so would a type assertion. A type assertion takes an interface value and extracts from it a value of the specified explicit type. The syntax borrows from the clause opening a type switch, but with an explicit type rather than the type keyword:"}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u6211\u4eec\u53ea\u5173\u5fc3\u4e00\u79cd\u7c7b\u578b\u5462\uff1f\u82e5\u6211\u4eec\u77e5\u9053\u8be5\u503c\u62e5\u6709\u4e00\u4e2a string \u800c\u60f3\u8981\u63d0\u53d6\u5b83\u5462\uff1f \u53ea\u9700\u4e00\u79cd\u60c5\u51b5\u7684\u7c7b\u578b\u9009\u62e9\u5c31\u884c\uff0c\u4f46\u5b83\u9700\u8981\u7c7b\u578b\u65ad\u8a00\u3002\u7c7b\u578b\u65ad\u8a00\u63a5\u53d7\u4e00\u4e2a\u63a5\u53e3\u503c\uff0c \u5e76\u4ece\u4e2d\u63d0\u53d6\u6307\u5b9a\u7684\u660e\u786e\u7c7b\u578b\u7684\u503c\u3002\u5176\u8bed\u6cd5\u501f\u9274\u81ea\u7c7b\u578b\u9009\u62e9\u5f00\u5934\u7684\u5b50\u53e5\uff0c\u4f46\u5b83\u9700\u8981\u4e00\u4e2a\u660e\u786e\u7684\u7c7b\u578b\uff0c \u800c\u975e type \u5173\u952e\u5b57\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"value.(typeName)\n"})}),"\n",(0,i.jsx)(n.p,{children:"and the result is a new value with the static type typeName. That type must either be the concrete type held by the interface, or a second interface type that the value can be converted to. To extract the string we know is in the value, we could write:"}),"\n",(0,i.jsx)(n.p,{children:"\u800c\u5176\u7ed3\u679c\u5219\u662f\u62e5\u6709\u9759\u6001\u7c7b\u578b typeName \u7684\u65b0\u503c\u3002\u8be5\u7c7b\u578b\u5fc5\u987b\u4e3a\u8be5\u63a5\u53e3\u6240\u62e5\u6709\u7684\u5177\u4f53\u7c7b\u578b\uff0c \u6216\u8005\u8be5\u503c\u53ef\u8f6c\u6362\u6210\u7684\u7b2c\u4e8c\u79cd\u63a5\u53e3\u7c7b\u578b\u3002\u8981\u63d0\u53d6\u6211\u4eec\u77e5\u9053\u5728\u8be5\u503c\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"str := value.(string)\n"})}),"\n",(0,i.jsx)(n.p,{children:'But if it turns out that the value does not contain a string, the program will crash with a run-time error. To guard against that, use the "comma, ok" idiom to test, safely, whether the value is a string:'}),"\n",(0,i.jsx)(n.p,{children:"\u4f46\u82e5\u5b83\u6240\u8f6c\u6362\u7684\u503c\u4e2d\u4e0d\u5305\u542b\u5b57\u7b26\u4e32\uff0c\u8be5\u7a0b\u5e8f\u5c31\u4f1a\u4ee5\u8fd0\u884c\u65f6\u9519\u8bef\u5d29\u6e83\u3002\u4e3a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c \u9700\u4f7f\u7528 \u201c\u9017\u53f7, ok\u201d \u60ef\u7528\u6cd5\u6765\u6d4b\u8bd5\u5b83\u80fd\u5b89\u5168\u5730\u5224\u65ad\u8be5\u503c\u662f\u5426\u4e3a\u5b57\u7b26\u4e32\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'str, ok := value.(string)\nif ok {\n\tfmt.Printf("string value is: %q\\n", str)\n} else {\n\tfmt.Printf("value is not a string\\n")\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'str, ok := value.(string)\nif ok {\n\tfmt.Printf("\u5b57\u7b26\u4e32\u503c\u4e3a %q\\n", str)\n} else {\n\tfmt.Printf("\u8be5\u503c\u975e\u5b57\u7b26\u4e32\\n")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"If the type assertion fails, str will still exist and be of type string, but it will have the zero value, an empty string."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u7c7b\u578b\u65ad\u8a00\u5931\u8d25\uff0cstr \u5c06\u7ee7\u7eed\u5b58\u5728\u4e14\u4e3a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f46\u5b83\u5c06\u62e5\u6709\u96f6\u503c\uff0c\u5373\u7a7a\u5b57\u7b26\u4e32\u3002"}),"\n",(0,i.jsx)(n.p,{children:"As an illustration of the capability, here's an if-else statement that's equivalent to the type switch that opened this section."}),"\n",(0,i.jsx)(n.p,{children:"\u4f5c\u4e3a\u5bf9\u8fd9\u79cd\u80fd\u529b\u7684\u8bf4\u660e\uff0c\u8fd9\u91cc\u6709\u4e2a if-else \u8bed\u53e5\uff0c\u5b83\u7b49\u4ef7\u4e8e\u672c\u8282\u5f00\u5934\u7684\u7c7b\u578b\u9009\u62e9\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if str, ok := value.(string); ok {\n\treturn str\n} else if str, ok := value.(Stringer); ok {\n\treturn str.String()\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u901a\u7528\u6027",children:"\u901a\u7528\u6027"}),"\n",(0,i.jsx)(n.p,{children:"If a type exists only to implement an interface and has no exported methods beyond that interface, there is no need to export the type itself. Exporting just the interface makes it clear that it's the behavior that matters, not the implementation, and that other implementations with different properties can mirror the behavior of the original type. It also avoids the need to repeat the documentation on every instance of a common method."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u67d0\u79cd\u73b0\u6709\u7684\u7c7b\u578b\u4ec5\u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u4e14\u9664\u6b64\u4e4b\u5916\u5e76\u65e0\u53ef\u5bfc\u51fa\u7684\u65b9\u6cd5\uff0c\u5219\u8be5\u7c7b\u578b\u672c\u8eab\u5c31\u65e0\u9700\u5bfc\u51fa\u3002 \u4ec5\u5bfc\u51fa\u8be5\u63a5\u53e3\u80fd\u8ba9\u6211\u4eec\u66f4\u4e13\u6ce8\u4e8e\u5176\u884c\u4e3a\u800c\u975e\u5b9e\u73b0\uff0c\u5176\u5b83\u5c5e\u6027\u4e0d\u540c\u7684\u5b9e\u73b0\u5219\u80fd\u53cd\u6620\u8be5\u539f\u59cb\u7c7b\u578b\u7684\u884c\u4e3a\u3002 \u8fd9\u4e5f\u80fd\u591f\u907f\u514d\u4e3a\u6bcf\u4e2a\u901a\u7528\u63a5\u53e3\u7684\u5b9e\u4f8b\u91cd\u590d\u7f16\u5199\u6587\u6863\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In such cases, the constructor should return an interface value rather than the implementing type. As an example, in the hash libraries both crc32.NewIEEE and adler32.New return the interface type hash.Hash32. Substituting the CRC-32 algorithm for Adler-32 in a Go program requires only changing the constructor call; the rest of the code is unaffected by the change of algorithm."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6784\u9020\u51fd\u6570\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u63a5\u53e3\u503c\u800c\u975e\u5b9e\u73b0\u7684\u7c7b\u578b\u3002\u4f8b\u5982\u5728 hash \u5e93\u4e2d\uff0ccrc32.NewIEEE \u548c adler32.New \u90fd\u8fd4\u56de\u63a5\u53e3\u7c7b\u578b hash.Hash32\u3002\u8981\u5728 Go \u7a0b\u5e8f\u4e2d\u7528 Adler-32 \u7b97\u6cd5\u66ff\u4ee3 CRC-32\uff0c \u53ea\u9700\u4fee\u6539\u6784\u9020\u51fd\u6570\u8c03\u7528\u5373\u53ef\uff0c\u5176\u4f59\u4ee3\u7801\u5219\u4e0d\u53d7\u7b97\u6cd5\u6539\u53d8\u7684\u5f71\u54cd\u3002"}),"\n",(0,i.jsx)(n.p,{children:"A similar approach allows the streaming cipher algorithms in the various crypto packages to be separated from the block ciphers they chain together. The Block interface in the crypto/cipher package specifies the behavior of a block cipher, which provides encryption of a single block of data. Then, by analogy with the bufio package, cipher packages that implement this interface can be used to construct streaming ciphers, represented by the Stream interface, without knowing the details of the block encryption."}),"\n",(0,i.jsx)(n.p,{children:"\u540c\u6837\u7684\u65b9\u5f0f\u80fd\u5c06 crypto \u5305\u4e2d\u591a\u79cd\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u6d41\u5bc6\u7801\u7b97\u6cd5\u4e0e\u5757\u5bc6\u7801\u7b97\u6cd5\u5206\u5f00\u3002 crypto/cipher \u5305\u4e2d\u7684 Block \u63a5\u53e3\u6307\u5b9a\u4e86\u5757\u5bc6\u7801\u7b97\u6cd5\u7684\u884c\u4e3a\uff0c \u5b83\u4e3a\u5355\u72ec\u7684\u6570\u636e\u5757\u63d0\u4f9b\u52a0\u5bc6\u3002\u63a5\u7740\uff0c\u548c bufio \u5305\u7c7b\u4f3c\uff0c\u4efb\u4f55\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u5bc6\u7801\u5305\u90fd\u80fd\u88ab\u7528\u4e8e\u6784\u9020\u4ee5 Stream \u4e3a\u63a5\u53e3\u8868\u793a\u7684\u6d41\u5bc6\u7801\uff0c\u800c\u65e0\u9700\u77e5\u9053\u5757\u52a0\u5bc6\u7684\u7ec6\u8282\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The crypto/cipher interfaces look like this:"}),"\n",(0,i.jsx)(n.p,{children:"crypto/cipher \u63a5\u53e3\u770b\u5176\u6765\u5c31\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Block interface {\n\tBlockSize() int\n\tEncrypt(src, dst []byte)\n\tDecrypt(src, dst []byte)\n}\n\ntype Stream interface {\n\tXORKeyStream(dst, src []byte)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here's the definition of the counter mode (CTR) stream, which turns a block cipher into a streaming cipher; notice that the block cipher's details are abstracted away:"}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u662f\u8ba1\u6570\u5668\u6a21\u5f0f CTR \u6d41\u7684\u5b9a\u4e49\uff0c\u5b83\u5c06\u5757\u52a0\u5bc6\u6539\u4e3a\u6d41\u52a0\u5bc6\uff0c\u6ce8\u610f\u5757\u52a0\u5bc6\u7684\u7ec6\u8282\u5df2\u88ab\u62bd\u8c61\u5316\u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// NewCTR returns a Stream that encrypts/decrypts using the given Block in\n// counter mode. The length of iv must be the same as the Block's block size.\nfunc NewCTR(block Block, iv []byte) Stream\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// NewCTR \u8fd4\u56de\u4e00\u4e2a Stream\uff0c\u5176\u52a0\u5bc6 / \u89e3\u5bc6\u4f7f\u7528\u8ba1\u6570\u5668\u6a21\u5f0f\u4e2d\u7ed9\u5b9a\u7684 Block \u8fdb\u884c\u3002\n// iv \u7684\u957f\u5ea6\u5fc5\u987b\u4e0e Block \u7684\u5757\u5927\u5c0f\u76f8\u540c\u3002\nfunc NewCTR(block Block, iv []byte) Stream\n"})}),"\n",(0,i.jsx)(n.p,{children:"NewCTR applies not just to one specific encryption algorithm and data source but to any implementation of the Block interface and any Stream. Because they return interface values, replacing CTR encryption with other encryption modes is a localized change. The constructor calls must be edited, but because the surrounding code must treat the result only as a Stream, it won't notice the difference."}),"\n",(0,i.jsx)(n.p,{children:"NewCTR \u7684\u5e94\u7528\u5e76\u4e0d\u4ec5\u9650\u4e8e\u7279\u5b9a\u7684\u52a0\u5bc6\u7b97\u6cd5\u548c\u6570\u636e\u6e90\uff0c\u5b83\u9002\u7528\u4e8e\u4efb\u4f55\u5bf9 Block \u63a5\u53e3\u548c Stream \u7684\u5b9e\u73b0\u3002\u56e0\u4e3a\u5b83\u4eec\u8fd4\u56de\u63a5\u53e3\u503c\uff0c \u6240\u4ee5\u7528\u5176\u5b83\u52a0\u5bc6\u6a21\u5f0f\u6765\u4ee3\u66ff CTR \u53ea\u9700\u505a\u5c40\u90e8\u7684\u66f4\u6539\u3002\u6784\u9020\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b\u5fc5\u987b\u88ab\u4fee\u6539\uff0c \u4f46\u7531\u4e8e\u5176\u5468\u56f4\u7684\u4ee3\u7801\u53ea\u80fd\u5c06\u5b83\u770b\u505a Stream\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u6ce8\u610f\u5230\u5176\u4e2d\u7684\u533a\u522b\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"interfaces-and-methods",children:"Interfaces and methods"}),"\n",(0,i.jsx)(n.h3,{id:"\u63a5\u53e3\u548c\u65b9\u6cd5",children:"\u63a5\u53e3\u548c\u65b9\u6cd5"}),"\n",(0,i.jsx)(n.p,{children:"Since almost anything can have methods attached, almost anything can satisfy an interface. One illustrative example is in the http package, which defines the Handler interface. Any object that implements Handler can serve HTTP requests."}),"\n",(0,i.jsx)(n.p,{children:"\u7531\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u90fd\u80fd\u6dfb\u52a0\u65b9\u6cd5\uff0c\u56e0\u6b64\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u90fd\u80fd\u6ee1\u8db3\u4e00\u4e2a\u63a5\u53e3\u3002\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u4f8b\u5b50\u5c31\u662f http \u5305\u4e2d\u5b9a\u4e49\u7684 Handler \u63a5\u53e3\u3002\u4efb\u4f55\u5b9e\u73b0\u4e86 Handler \u7684\u5bf9\u8c61\u90fd\u80fd\u591f\u5904\u7406 HTTP \u8bf7\u6c42\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"ResponseWriter is itself an interface that provides access to the methods needed to return the response to the client. Those methods include the standard Write method, so an http.ResponseWriter can be used wherever an io.Writer can be used. Request is a struct containing a parsed representation of the request from the client."}),"\n",(0,i.jsx)(n.p,{children:"ResponseWriter \u63a5\u53e3\u63d0\u4f9b\u4e86\u5bf9\u65b9\u6cd5\u7684\u8bbf\u95ee\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u9700\u8981\u54cd\u5e94\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 \u7531\u4e8e\u8fd9\u4e9b\u65b9\u6cd5\u5305\u542b\u4e86\u6807\u51c6\u7684 Write \u65b9\u6cd5\uff0c\u56e0\u6b64 http.ResponseWriter \u53ef\u7528\u4e8e\u4efb\u4f55 io.Writer \u9002\u7528\u7684\u573a\u666f\u3002Request \u7ed3\u6784\u4f53\u5305\u542b\u5df2\u89e3\u6790\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002"}),"\n",(0,i.jsx)(n.p,{children:"For brevity, let's ignore POSTs and assume HTTP requests are always GETs; that simplification does not affect the way the handlers are set up. Here's a trivial but complete implementation of a handler to count the number of times the page is visited."}),"\n",(0,i.jsx)(n.p,{children:"\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5047\u8bbe\u6240\u6709\u7684 HTTP \u8bf7\u6c42\u90fd\u662f GET \u65b9\u6cd5\uff0c\u800c\u5ffd\u7565 POST \u65b9\u6cd5\uff0c \u8fd9\u79cd\u7b80\u5316\u4e0d\u4f1a\u5f71\u54cd\u5904\u7406\u7a0b\u5e8f\u7684\u5efa\u7acb\u65b9\u5f0f\u3002\u8fd9\u91cc\u6709\u4e2a\u77ed\u5c0f\u5374\u5b8c\u6574\u7684\u5904\u7406\u7a0b\u5e8f\u5b9e\u73b0\uff0c \u5b83\u7528\u4e8e\u8bb0\u5f55\u67d0\u4e2a\u9875\u9762\u88ab\u8bbf\u95ee\u7684\u6b21\u6570\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Simple counter server.\ntype Counter struct {\n\tn int\n}\n\nfunc (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tctr.n++\n\tfmt.Fprintf(w, "counter = %d\\n", ctr.n)\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u7b80\u5355\u7684\u8ba1\u6570\u5668\u670d\u52a1\u3002\ntype Counter struct {\n\tn int\n}\n\nfunc (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tctr.n++\n\tfmt.Fprintf(w, "counter = %d\\n", ctr.n)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"(Keeping with our theme, note how Fprintf can print to an http.ResponseWriter.) For reference, here's how to attach such a server to a node on the URL tree."}),"\n",(0,i.jsx)(n.p,{children:"\uff08\u7d27\u8ddf\u6211\u4eec\u7684\u4e3b\u9898\uff0c\u6ce8\u610f Fprintf \u5982\u4f55\u80fd\u8f93\u51fa\u5230 http.ResponseWriter\u3002\uff09 \u4f5c\u4e3a\u53c2\u8003\uff0c\u8fd9\u91cc\u6f14\u793a\u4e86\u5982\u4f55\u5c06\u8fd9\u6837\u4e00\u4e2a\u670d\u52a1\u5668\u6dfb\u52a0\u5230 URL \u6811\u7684\u4e00\u4e2a\u8282\u70b9\u4e0a\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "net/http"\n...\nctr := new(Counter)\nhttp.Handle("/counter", ctr)\n'})}),"\n",(0,i.jsx)(n.p,{children:"But why make Counter a struct? An integer is all that's needed. (The receiver needs to be a pointer so the increment is visible to the caller.)"}),"\n",(0,i.jsx)(n.p,{children:"\u4f46\u4e3a\u4ec0\u4e48 Counter \u8981\u662f\u7ed3\u6784\u4f53\u5462\uff1f\u4e00\u4e2a\u6574\u6570\u5c31\u591f\u4e86\u3002\uff08\u63a5\u6536\u8005\u5fc5\u987b\u4e3a\u6307\u9488\uff0c\u589e\u91cf\u64cd\u4f5c\u5bf9\u4e8e\u8c03\u7528\u8005\u624d\u53ef\u89c1\u3002\uff09"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Simpler counter server.\ntype Counter int\n\nfunc (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\t*ctr++\n\tfmt.Fprintf(w, "counter = %d\\n", *ctr)\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u7b80\u5355\u7684\u8ba1\u6570\u5668\u670d\u52a1\u3002\ntype Counter int\n\nfunc (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\t*ctr++\n\tfmt.Fprintf(w, "counter = %d\\n", *ctr)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"What if your program has some internal state that needs to be notified that a page has been visited? Tie a channel to the web page."}),"\n",(0,i.jsx)(n.p,{children:"\u5f53\u9875\u9762\u88ab\u8bbf\u95ee\u65f6\uff0c\u600e\u6837\u901a\u77e5\u4f60\u7684\u7a0b\u5e8f\u53bb\u66f4\u65b0\u4e00\u4e9b\u5185\u90e8\u72b6\u6001\u5462\uff1f\u4e3a Web \u9875\u9762\u7ed1\u5b9a\u4e2a\u4fe1\u9053\u5427\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// A channel that sends a notification on each visit.\n// (Probably want the channel to be buffered.)\ntype Chan chan *http.Request\n\nfunc (ch Chan) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tch <- req\n\tfmt.Fprint(w, "notification sent")\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u6bcf\u6b21\u6d4f\u89c8\u8be5\u4fe1\u9053\u90fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u63d0\u9192\u3002\n// \uff08\u53ef\u80fd\u9700\u8981\u5e26\u7f13\u51b2\u7684\u4fe1\u9053\u3002\uff09\ntype Chan chan *http.Request\n\nfunc (ch Chan) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tch <- req\n\tfmt.Fprint(w, "notification sent")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Finally, let's say we wanted to present on /args the arguments used when invoking the server binary. It's easy to write a function to print the arguments."}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u540e\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u8f93\u51fa\u8c03\u7528\u670d\u52a1\u5668\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u65f6\u4f7f\u7528\u7684\u5b9e\u53c2 /args\u3002 \u5f88\u7b80\u5355\uff0c\u5199\u4e2a\u6253\u5370\u5b9e\u53c2\u7684\u51fd\u6570\u5c31\u884c\u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func ArgServer() {\n\tfmt.Println(os.Args)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"How do we turn that into an HTTP server? We could make ArgServer a method of some type whose value we ignore, but there's a cleaner way. Since we can define a method for any type except pointers and interfaces, we can write a method for a function. The http package contains this code:"}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u5982\u4f55\u5c06\u5b83\u8f6c\u6362\u4e3a HTTP \u670d\u52a1\u5668\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5c06 ArgServer \u5b9e\u73b0\u4e3a\u67d0\u79cd\u53ef\u5ffd\u7565\u503c\u7684\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd8\u6709\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u3002 \u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u4e3a\u9664\u6307\u9488\u548c\u63a5\u53e3\u4ee5\u5916\u7684\u4efb\u4f55\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\uff0c\u540c\u6837\u4e5f\u80fd\u4e3a\u4e00\u4e2a\u51fd\u6570\u5199\u4e00\u4e2a\u65b9\u6cd5\u3002 http \u5305\u5305\u542b\u4ee5\u4e0b\u4ee3\u7801\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// The HandlerFunc type is an adapter to allow the use of\n// ordinary functions as HTTP handlers.  If f is a function\n// with the appropriate signature, HandlerFunc(f) is a\n// Handler object that calls f.\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(c, req).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, req *Request) {\n\tf(w, req)\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// HandlerFunc \u7c7b\u578b\u662f\u4e00\u4e2a\u9002\u914d\u5668\uff0c\u5b83\u5141\u8bb8\u5c06\u666e\u901a\u51fd\u6570\u7528\u505a HTTP \u5904\u7406\u7a0b\u5e8f\u3002\n// \u82e5 f \u662f\u4e2a\u5177\u6709\u9002\u5f53\u7b7e\u540d\u7684\u51fd\u6570\uff0cHandlerFunc(f) \u5c31\u662f\u4e2a\u8c03\u7528 f \u7684\u5904\u7406\u7a0b\u5e8f\u5bf9\u8c61\u3002\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(c, req).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, req *Request) {\n\tf(w, req)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"HandlerFunc is a type with a method, ServeHTTP, so values of that type can serve HTTP requests. Look at the implementation of the method: the receiver is a function, f, and the method calls f. That may seem odd but it's not that different from, say, the receiver being a channel and the method sending on the channel."}),"\n",(0,i.jsx)(n.p,{children:"HandlerFunc \u662f\u4e2a\u5177\u6709 ServeHTTP \u65b9\u6cd5\u7684\u7c7b\u578b\uff0c \u56e0\u6b64\u8be5\u7c7b\u578b\u7684\u503c\u5c31\u80fd\u5904\u7406 HTTP \u8bf7\u6c42\u3002\u6211\u4eec\u6765\u770b\u770b\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\uff1a\u63a5\u6536\u8005\u662f\u4e00\u4e2a\u51fd\u6570 f\uff0c\u800c\u8be5\u65b9\u6cd5\u8c03\u7528 f\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u5947\u602a\uff0c \u4f46\u662f\u8ddf\u524d\u9762\u7684\u4f8b\u5b50\u6ca1\u6709\u592a\u5927\u533a\u522b\uff1a \u63a5\u6536\u8005\u662f\u4e00\u4e2a\u4fe1\u9053\uff0c \uff08ServeHTTP\uff09\u65b9\u6cd5\u5f80\u8be5\u4fe1\u9053\u53d1\u6d88\u606f\u3002"}),"\n",(0,i.jsx)(n.p,{children:"To make ArgServer into an HTTP server, we first modify it to have the right signature."}),"\n",(0,i.jsx)(n.p,{children:"\u4e3a\u4e86\u5c06 ArgServer \u5b9e\u73b0\u6210 HTTP \u670d\u52a1\u5668\uff0c\u9996\u5148\u6211\u4eec\u5f97\u8ba9\u5b83\u62e5\u6709\u5408\u9002\u7684\u7b7e\u540d\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Argument server.\nfunc ArgServer(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintln(w, os.Args)\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// \u5b9e\u53c2\u670d\u52a1\u5668\u3002\nfunc ArgServer(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintln(w, os.Args)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"ArgServer now has same signature as HandlerFunc, so it can be converted to that type to access its methods, just as we converted Sequence to IntSlice to access IntSlice.Sort. The code to set it up is concise:"}),"\n",(0,i.jsx)(n.p,{children:"ArgServer \u548c HandlerFunc \u73b0\u5728\u62e5\u6709\u4e86\u76f8\u540c\u7684\u7b7e\u540d\uff0c \u56e0\u6b64\u6211\u4eec\u53ef\u5c06\u5176\u8f6c\u6362\u4e3a\u8fd9\u79cd\u7c7b\u578b\u4ee5\u8bbf\u95ee\u5b83\u7684\u65b9\u6cd5\uff0c\u5c31\u50cf\u6211\u4eec\u5c06 Sequence \u8f6c\u6362\u4e3a IntSlice \u4ee5\u8bbf\u95ee IntSlice.Sort \u90a3\u6837\u3002 \u5efa\u7acb\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'http.Handle("/args", http.HandlerFunc(ArgServer))\n'})}),"\n",(0,i.jsx)(n.p,{children:"When someone visits the page /args, the handler installed at that page has value ArgServer and type HandlerFunc. The HTTP server will invoke the method ServeHTTP of that type, with ArgServer as the receiver, which will in turn call ArgServer (via the invocation f(c, req) inside HandlerFunc.ServeHTTP). The arguments will then be displayed."}),"\n",(0,i.jsx)(n.p,{children:"\u5f53\u6709\u4eba\u8bbf\u95ee /args \u9875\u9762\u65f6\uff0c\u5b89\u88c5\u5230\u8be5\u9875\u9762\u7684\u5904\u7406\u7a0b\u5e8f\u5c31\u6709\u4e86\u503c ArgServer \u548c\u7c7b\u578b HandlerFunc\u3002 HTTP \u670d\u52a1\u5668\u4f1a\u4ee5 ArgServer \u4e3a\u63a5\u6536\u8005\uff0c\u8c03\u7528\u8be5\u7c7b\u578b\u7684 ServeHTTP \u65b9\u6cd5\uff0c\u5b83\u4f1a\u53cd\u8fc7\u6765\u8c03\u7528 ArgServer\uff08\u901a\u8fc7 f(c, req)\uff09\uff0c\u63a5\u7740\u5b9e\u53c2\u5c31\u4f1a\u88ab\u663e\u793a\u51fa\u6765\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In this section we have made an HTTP server from a struct, an integer, a channel, and a function, all because interfaces are just sets of methods, which can be defined for (almost) any type."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u4e00\u4e2a\u4fe1\u9053\u548c\u4e00\u4e2a\u51fd\u6570\uff0c\u5efa\u7acb\u4e86\u4e00\u4e2a HTTP \u670d\u52a1\u5668\uff0c \u8fd9\u4e00\u5207\u90fd\u662f\u56e0\u4e3a\u63a5\u53e3\u53ea\u662f\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u800c\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u90fd\u80fd\u5b9a\u4e49\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"the-blank-identifier",children:"The blank identifier"}),"\n",(0,i.jsx)(n.h2,{id:"\u7a7a\u767d\u6807\u8bc6\u7b26",children:"\u7a7a\u767d\u6807\u8bc6\u7b26"}),"\n",(0,i.jsxs)(n.p,{children:["We've mentioned the blank identifier a couple of times now, in the context of for ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#for",children:"range loops"})," and ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#maps",children:"maps"}),". The blank identifier can be assigned or declared with any value of any type, with the value discarded harmlessly. It's a bit like writing to the Unix /dev/null file: it represents a write-only value to be used as a place-holder where a variable is needed but the actual value is irrelevant. It has uses beyond those we've seen already."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6211\u4eec\u5728 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#for",children:"for-range"})," \u5faa\u73af\u548c ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#maps",children:"\u6620\u5c04"})," \u4e2d\u63d0\u8fc7\u51e0\u6b21\u7a7a\u767d\u6807\u8bc6\u7b26\u3002 \u7a7a\u767d\u6807\u8bc6\u7b26\u53ef\u88ab\u8d4b\u4e88\u6216\u58f0\u660e\u4e3a\u4efb\u4f55\u7c7b\u578b\u7684\u4efb\u4f55\u503c\uff0c\u800c\u5176\u503c\u4f1a\u88ab\u65e0\u5bb3\u5730\u4e22\u5f03\u3002\u5b83\u6709\u70b9\u50cf Unix \u4e2d\u7684 /dev/null \u6587\u4ef6\uff1a\u5b83\u8868\u793a\u53ea\u5199\u7684\u503c\uff0c\u5728\u9700\u8981\u53d8\u91cf\u4f46\u4e0d\u9700\u8981\u5b9e\u9645\u503c\u7684\u5730\u65b9\u7528\u4f5c\u5360\u4f4d\u7b26\u3002 \u6211\u4eec\u5728\u524d\u9762\u5df2\u7ecf\u89c1\u8fc7\u5b83\u7684\u7528\u6cd5\u4e86\u3002"]}),"\n",(0,i.jsx)(n.h3,{id:"the-blank-identifier-in-multiple-assignment",children:"The blank identifier in multiple assignment"}),"\n",(0,i.jsx)(n.h3,{id:"\u591a\u91cd\u8d4b\u503c\u4e2d\u7684\u7a7a\u767d\u6807\u8bc6\u7b26",children:"\u591a\u91cd\u8d4b\u503c\u4e2d\u7684\u7a7a\u767d\u6807\u8bc6\u7b26"}),"\n",(0,i.jsx)(n.p,{children:"The use of a blank identifier in a for range loop is a special case of a general situation: multiple assignment."}),"\n",(0,i.jsx)(n.p,{children:"for range \u5faa\u73af\u4e2d\u5bf9\u7a7a\u767d\u6807\u8bc6\u7b26\u7684\u7528\u6cd5\u662f\u4e00\u79cd\u5177\u4f53\u60c5\u51b5\uff0c\u66f4\u4e00\u822c\u7684\u60c5\u51b5\u5373\u4e3a\u591a\u91cd\u8d4b\u503c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"If an assignment requires multiple values on the left side, but one of the values will not be used by the program, a blank identifier on the left-hand-side of the assignment avoids the need to create a dummy variable and makes it clear that the value is to be discarded. For instance, when calling a function that returns a value and an error, but only the error is important, use the blank identifier to discard the irrelevant value."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u67d0\u6b21\u8d4b\u503c\u9700\u8981\u5339\u914d\u591a\u4e2a\u5de6\u503c\uff0c\u4f46\u5176\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e0d\u4f1a\u88ab\u7a0b\u5e8f\u4f7f\u7528\uff0c \u90a3\u4e48\u7528\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u4ee3\u66ff\u8be5\u53d8\u91cf\u53ef\u907f\u514d\u521b\u5efa\u65e0\u7528\u7684\u53d8\u91cf\uff0c\u5e76\u80fd\u6e05\u695a\u5730\u8868\u660e\u8be5\u503c\u5c06\u88ab\u4e22\u5f03\u3002 \u4f8b\u5982\uff0c\u5f53\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u9519\u8bef\uff0c\u4f46\u53ea\u6709\u9519\u8bef\u5f88\u91cd\u8981\uff0c \u90a3\u4e48\u53ef\u4f7f\u7528\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u4e22\u5f03\u65e0\u5173\u7684\u503c\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'if _, err := os.Stat(path); os.IsNotExist(err) {\n\tfmt.Printf("%s does not exist\\n", path)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Occasionally you'll see code that discards the error value in order to ignore the error; this is terrible practice. Always check error returns; they're provided for a reason."}),"\n",(0,i.jsx)(n.p,{children:"\u4f60\u5076\u5c14\u4f1a\u770b\u89c1\u4e3a\u5ffd\u7565\u9519\u8bef\u800c\u4e22\u5f03\u9519\u8bef\u503c\u7684\u4ee3\u7801\uff0c\u8fd9\u662f\u79cd\u7cdf\u7cd5\u7684\u5b9e\u8df5\u3002\u8bf7\u52a1\u5fc5\u68c0\u67e5\u9519\u8bef\u8fd4\u56de\uff0c \u5b83\u4eec\u4f1a\u63d0\u4f9b\u9519\u8bef\u7684\u7406\u7531\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Bad! This code will crash if path does not exist.\nfi, _ := os.Stat(path)\nif fi.IsDir() {\n\tfmt.Printf("%s is a directory\\n", path)\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u70c2\u4ee3\u7801\uff01\u82e5\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5b83\u5c31\u4f1a\u5d29\u6e83\u3002\nfi, _ := os.Stat(path)\nif fi.IsDir() {\n\tfmt.Printf("%s is a directory\\n", path)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"unused-imports-and-variables",children:"Unused imports and variables"}),"\n",(0,i.jsx)(n.h3,{id:"\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u548c\u53d8\u91cf",children:"\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u548c\u53d8\u91cf"}),"\n",(0,i.jsx)(n.p,{children:"It is an error to import a package or to declare a variable without using it. Unused imports bloat the program and slow compilation, while a variable that is initialized but not used is at least a wasted computation and perhaps indicative of a larger bug. When a program is under active development, however, unused imports and variables often arise and it can be annoying to delete them just to have the compilation proceed, only to have them be needed again later. The blank identifier provides a workaround."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u5bfc\u5165\u67d0\u4e2a\u5305\u6216\u58f0\u660e\u67d0\u4e2a\u53d8\u91cf\u800c\u4e0d\u4f7f\u7528\u5b83\u5c31\u4f1a\u4ea7\u751f\u9519\u8bef\u3002\u672a\u4f7f\u7528\u7684\u5305\u4f1a\u8ba9\u7a0b\u5e8f\u81a8\u80c0\u5e76\u62d6\u6162\u7f16\u8bd1\u901f\u5ea6\uff0c \u800c\u5df2\u521d\u59cb\u5316\u4f46\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u4e0d\u4ec5\u4f1a\u6d6a\u8d39\u8ba1\u7b97\u80fd\u529b\uff0c\u8fd8\u6709\u53ef\u80fd\u6697\u85cf\u7740\u66f4\u5927\u7684 Bug\u3002 \u7136\u800c\u5728\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u4ea7\u751f\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u548c\u53d8\u91cf\u3002\u867d\u7136\u4ee5\u540e\u4f1a\u7528\u5230\u5b83\u4eec\uff0c \u4f46\u4e3a\u4e86\u5b8c\u6210\u7f16\u8bd1\u53c8\u4e0d\u5f97\u4e0d\u5220\u9664\u5b83\u4eec\u624d\u884c\uff0c\u8fd9\u5f88\u8ba9\u4eba\u70e6\u607c\u3002\u7a7a\u767d\u6807\u8bc6\u7b26\u5c31\u80fd\u63d0\u4f9b\u4e00\u4e2a\u4e34\u65f6\u89e3\u51b3\u65b9\u6848\u3002"}),"\n",(0,i.jsx)(n.p,{children:"This half-written program has two unused imports (fmt and io) and an unused variable (fd), so it will not compile, but it would be nice to see if the code so far is correct."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e2a\u5199\u4e86\u4e00\u534a\u7684\u7a0b\u5e8f\u6709\u4e24\u4e2a\u672a\u4f7f\u7528\u7684\u5bfc\u5165\uff08fmt \u548c io\uff09\u4ee5\u53ca\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u53d8\u91cf\uff08fd\uff09\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u7f16\u8bd1\uff0c \u4f46\u82e5\u5230\u76ee\u524d\u4e3a\u6b62\u4ee3\u7801\u8fd8\u662f\u6b63\u786e\u7684\uff0c\u6211\u4eec\u8fd8\u662f\u5f88\u4e50\u610f\u770b\u5230\u5b83\u4eec\u7684\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "io"\n    "log"\n    "os"\n)\n\nfunc main() {\n    fd, err := os.Open("test.go")\n    if err != nil {\n        log.Fatal(err)\n    }\n    // TODO: use fd.\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"To silence complaints about the unused imports, use a blank identifier to refer to a symbol from the imported package. Similarly, assigning the unused variable fd to the blank identifier will silence the unused variable error. This version of the program does compile."}),"\n",(0,i.jsx)(n.p,{children:"\u8981\u8ba9\u7f16\u8bd1\u5668\u505c\u6b62\u5173\u4e8e\u672a\u4f7f\u7528\u5bfc\u5165\u7684\u62b1\u6028\uff0c\u9700\u8981\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u5f15\u7528\u5df2\u5bfc\u5165\u5305\u4e2d\u7684\u7b26\u53f7\u3002 \u540c\u6837\uff0c\u5c06\u672a\u4f7f\u7528\u7684\u53d8\u91cf fd \u8d4b\u4e88\u7a7a\u767d\u6807\u8bc6\u7b26\u4e5f\u80fd\u5173\u95ed\u672a\u4f7f\u7528\u53d8\u91cf\u9519\u8bef\u3002 \u8be5\u7a0b\u5e8f\u7684\u4ee5\u4e0b\u7248\u672c\u53ef\u4ee5\u7f16\u8bd1\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "io"\n    "log"\n    "os"\n)\n\nvar _ = fmt.Printf // For debugging; delete when done. // \u7528\u4e8e\u8c03\u8bd5\uff0c\u7ed3\u675f\u65f6\u5220\u9664\u3002\nvar _ io.Reader    // For debugging; delete when done. // \u7528\u4e8e\u8c03\u8bd5\uff0c\u7ed3\u675f\u65f6\u5220\u9664\u3002\n\nfunc main() {\n    fd, err := os.Open("test.go")\n    if err != nil {\n        log.Fatal(err)\n    }\n    // TODO: use fd.\n    _ = fd\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"By convention, the global declarations to silence import errors should come right after the imports and be commented, both to make them easy to find and as a reminder to clean things up later."}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u5e94\u5728\u5bfc\u5165\u5e76\u52a0\u4ee5\u6ce8\u91ca\u540e\uff0c\u518d\u4f7f\u5168\u5c40\u58f0\u660e\u5bfc\u5165\u9519\u8bef\u9759\u9ed8\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u5b83\u4eec\u66f4\u6613\u627e\u5230\uff0c \u5e76\u4f5c\u4e3a\u4ee5\u540e\u6e05\u7406\u5b83\u7684\u63d0\u9192\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"import-for-side-effect",children:"Import for side effect"}),"\n",(0,i.jsx)(n.h3,{id:"\u4e3a\u526f\u4f5c\u7528\u800c\u5bfc\u5165",children:"\u4e3a\u526f\u4f5c\u7528\u800c\u5bfc\u5165"}),"\n",(0,i.jsx)(n.p,{children:"An unused import like fmt or io in the previous example should eventually be used or removed: blank assignments identify code as a work in progress. But sometimes it is useful to import a package only for its side effects, without any explicit use. For example, during its init function, the net/http/pprof package registers HTTP handlers that provide debugging information. It has an exported API, but most clients need only the handler registration and access the data through a web page. To import the package only for its side effects, rename the package to the blank identifier:"}),"\n",(0,i.jsx)(n.p,{children:"\u50cf\u524d\u4f8b\u4e2d fmt \u6216 io \u8fd9\u79cd\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u603b\u5e94\u5728\u6700\u540e\u88ab\u4f7f\u7528\u6216\u79fb\u9664\uff1a \u7a7a\u767d\u8d4b\u503c\u4f1a\u5c06\u4ee3\u7801\u6807\u8bc6\u4e3a\u5de5\u4f5c\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\u4f46\u6709\u65f6\u5bfc\u5165\u67d0\u4e2a\u5305\u53ea\u662f\u4e3a\u4e86\u5176\u526f\u4f5c\u7528\uff0c \u800c\u6ca1\u6709\u4efb\u4f55\u660e\u786e\u7684\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5728 net/http/pprof \u5305\u7684 init \u51fd\u6570\u4e2d\u8bb0\u5f55\u4e86 HTTP \u5904\u7406\u7a0b\u5e8f\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u5b83\u6709\u4e2a\u53ef\u5bfc\u51fa\u7684 API\uff0c \u4f46\u5927\u90e8\u5206\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u8be5\u5904\u7406\u7a0b\u5e8f\u7684\u8bb0\u5f55\u548c\u901a\u8fc7 Web \u9875\u9762\u8bbf\u95ee\u6570\u636e\u3002\u6b32\u5bfc\u5165\u4e00\u4e2a\u53ea\u4f7f\u7528\u5176\u526f\u4f5c\u7528\u7684\u5305\uff0c \u53ea\u9700\u5c06\u8be5\u5305\u91cd\u547d\u540d\u4e3a\u7a7a\u767d\u6807\u8bc6\u7b26\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import _ "net/http/pprof"\n'})}),"\n",(0,i.jsx)(n.p,{children:"This form of import makes clear that the package is being imported for its side effects, because there is no other possible use of the package: in this file, it doesn't have a name. (If it did, and we didn't use that name, the compiler would reject the program.)"}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u79cd\u5bfc\u5165\u683c\u5f0f\u80fd\u660e\u786e\u8868\u793a\u8be5\u5305\u662f\u4e3a\u5176\u526f\u4f5c\u7528\u800c\u5bfc\u5165\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u5176\u5b83\u4f7f\u7528\u8be5\u5305\u7684\u53ef\u80fd\uff1a \u5728\u6b64\u6587\u4ef6\u4e2d\uff0c\u5b83\u6ca1\u6709\u540d\u5b57\u3002\uff08\u82e5\u5b83\u6709\u540d\u5b57\u800c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u62d2\u7edd\u8be5\u7a0b\u5e8f\u3002\uff09"}),"\n",(0,i.jsx)(n.h3,{id:"interface-checks",children:"Interface checks"}),"\n",(0,i.jsx)(n.h3,{id:"\u63a5\u53e3\u68c0\u67e5",children:"\u63a5\u53e3\u68c0\u67e5"}),"\n",(0,i.jsxs)(n.p,{children:["As we saw in the discussion of ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#interfaces_and_types",children:"interfaces"})," above, a type need not declare explicitly that it implements an interface. Instead, a type implements the interface just by implementing the interface's methods. In practice, most interface conversions are static and therefore checked at compile time. For example, passing an ",(0,i.jsx)(n.code,{children:"*os.File"})," to a function expecting an io.Reader will not compile unless ",(0,i.jsx)(n.code,{children:"*os.File"})," implements the io.Reader interface."]}),"\n",(0,i.jsxs)(n.p,{children:["\u5c31\u50cf\u6211\u4eec\u5728\u524d\u9762 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#interfaces_and_types",children:"\u63a5\u53e3"})," \u4e2d\u8ba8\u8bba\u7684\u90a3\u6837\uff0c \u4e00\u4e2a\u7c7b\u578b\u65e0\u9700\u663e\u5f0f\u5730\u58f0\u660e\u5b83\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\u3002\u53d6\u800c\u4ee3\u4e4b\uff0c\u8be5\u7c7b\u578b\u53ea\u8981\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c \u5176\u5b9e\u5c31\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u5927\u90e8\u5206\u63a5\u53e3\u8f6c\u6362\u90fd\u662f\u9759\u6001\u7684\uff0c\u56e0\u6b64\u4f1a\u5728\u7f16\u8bd1\u65f6\u68c0\u6d4b\u3002 \u4f8b\u5982\uff0c\u5c06\u4e00\u4e2a ",(0,i.jsx)(n.code,{children:"*os.File"})," \u4f20\u5165\u4e00\u4e2a\u63a5\u6536 io.Reader \u7684\u51fd\u6570\u5c06\u4e0d\u4f1a\u88ab\u7f16\u8bd1\uff0c \u9664\u975e ",(0,i.jsx)(n.code,{children:"*os.File"})," \u5b9e\u73b0\u4e86 io.Reader \u63a5\u53e3\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["Some interface checks do happen at run-time, though. One instance is in the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/encoding/json/",children:"encoding/json"})," package, which defines a ",(0,i.jsx)(n.a,{href:"https://golang.google.cn/pkg/encoding/json/#Marshaler",children:"Marshaler"})," interface. When the JSON encoder receives a value that implements that interface, the encoder invokes the value's marshaling method to convert it to JSON instead of doing the standard conversion. The encoder checks this property at run time with a ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#interface_conversions",children:"type assertion"})," like:"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5c3d\u7ba1\u5982\u6b64\uff0c\u6709\u4e9b\u63a5\u53e3\u68c0\u67e5\u4f1a\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u3002\u4f8b\u5982\uff0c",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/encoding/json/",children:"encoding/json"})," \u5305\u5b9a\u4e49\u4e86\u4e00\u4e2a ",(0,i.jsx)(n.a,{href:"https://golang.google.cn/pkg/encoding/json/#Marshaler",children:"Marshaler"})," \u63a5\u53e3\u3002\u5f53 JSON \u7f16\u7801\u5668\u63a5\u6536\u5230\u4e00\u4e2a\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u503c\uff0c\u90a3\u4e48\u8be5\u7f16\u7801\u5668\u5c31\u4f1a\u8c03\u7528\u8be5\u503c\u7684\u7f16\u7ec4\u65b9\u6cd5\uff0c \u5c06\u5176\u8f6c\u6362\u4e3a JSON\uff0c\u800c\u975e\u8fdb\u884c\u6807\u51c6\u7684\u7c7b\u578b\u8f6c\u6362\u3002 \u7f16\u7801\u5668\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#interface_conversions",children:"\u7c7b\u578b\u65ad\u8a00"})," \u68c0\u67e5\u5176\u5c5e\u6027\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"m, ok := val.(json.Marshaler)\n"})}),"\n",(0,i.jsx)(n.p,{children:"If it's necessary only to ask whether a type implements an interface, without actually using the interface itself, perhaps as part of an error check, use the blank identifier to ignore the type-asserted value:"}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u53ea\u9700\u8981\u5224\u65ad\u67d0\u4e2a\u7c7b\u578b\u662f\u5426\u662f\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff0c\u800c\u4e0d\u9700\u8981\u5b9e\u9645\u4f7f\u7528\u63a5\u53e3\u672c\u8eab \uff08\u53ef\u80fd\u662f\u9519\u8bef\u68c0\u67e5\u90e8\u5206\uff09\uff0c\u5c31\u4f7f\u7528\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u5ffd\u7565\u7c7b\u578b\u65ad\u8a00\u7684\u503c\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'if _, ok := val.(json.Marshaler); ok {\n\tfmt.Printf("value %v of type %T implements json.Marshaler\\n", val, val)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["One place this situation arises is when it is necessary to guarantee within the package implementing the type that it actually satisfies the interface. If a type\u2014for example, ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/encoding/json/#RawMessage",children:"json.RawMessage"}),"\u2014needs a custom JSON representation, it should implement json.Marshaler, but there are no static conversions that would cause the compiler to verify this automatically. If the type inadvertently fails to satisfy the interface, the JSON encoder will still work, but will not use the custom implementation. To guarantee that the implementation is correct, a global declaration using the blank identifier can be used in the package:"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5f53\u9700\u8981\u786e\u4fdd\u67d0\u4e2a\u5305\u4e2d\u5b9e\u73b0\u7684\u7c7b\u578b\u4e00\u5b9a\u6ee1\u8db3\u8be5\u63a5\u53e3\u65f6\uff0c\u5c31\u4f1a\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u82e5\u67d0\u4e2a\u7c7b\u578b\uff08\u4f8b\u5982 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/encoding/json/#RawMessage",children:"json.RawMessage"}),"\uff09 \u9700\u8981\u4e00\u79cd\u5b9a\u5236\u7684 JSON \u8868\u73b0\u65f6\uff0c\u5b83\u5e94\u5f53\u5b9e\u73b0 json.Marshaler\uff0c \u4e0d\u8fc7\u73b0\u5728\u6ca1\u6709\u9759\u6001\u8f6c\u6362\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u53bb\u81ea\u52a8\u9a8c\u8bc1\u5b83\u3002\u82e5\u8be5\u7c7b\u578b\u901a\u8fc7\u5ffd\u7565\u8f6c\u6362\u5931\u8d25\u6765\u6ee1\u8db3\u8be5\u63a5\u53e3\uff0c \u90a3\u4e48 JSON \u7f16\u7801\u5668\u4ecd\u53ef\u5de5\u4f5c\uff0c\u4f46\u5b83\u5374\u4e0d\u4f1a\u4f7f\u7528\u5b9a\u5236\u7684\u5b9e\u73b0\u3002\u4e3a\u786e\u4fdd\u5176\u5b9e\u73b0\u6b63\u786e\uff0c \u53ef\u5728\u8be5\u5305\u4e2d\u7528\u7a7a\u767d\u6807\u8bc6\u7b26\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var _ json.Marshaler = (*RawMessage)(nil)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this declaration, the assignment involving a conversion of a ",(0,i.jsx)(n.code,{children:"*RawMessage"})," to a Marshaler requires that ",(0,i.jsx)(n.code,{children:"*RawMessage"})," implements Marshaler, and that property will be checked at compile time. Should the json.Marshaler interface change, this package will no longer compile and we will be on notice that it needs to be updated."]}),"\n",(0,i.jsxs)(n.p,{children:["\u5728\u6b64\u58f0\u660e\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4e86\u4e00\u4e2a ",(0,i.jsx)(n.code,{children:"*RawMessage"})," \u8f6c\u6362\u5e76\u5c06\u5176\u8d4b\u4e88\u4e86 Marshaler\uff0c\u4ee5\u6b64\u6765\u8981\u6c42 ",(0,i.jsx)(n.code,{children:"*RawMessage"})," \u5b9e\u73b0 Marshaler\uff0c\u8fd9\u65f6\u5176\u5c5e\u6027\u5c31\u4f1a\u5728\u7f16\u8bd1\u65f6\u88ab\u68c0\u6d4b\u3002 \u82e5 json.Marshaler \u63a5\u53e3\u88ab\u66f4\u6539\uff0c\u6b64\u5305\u5c06\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c \u800c\u6211\u4eec\u5219\u4f1a\u6ce8\u610f\u5230\u5b83\u9700\u8981\u66f4\u65b0\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"The appearance of the blank identifier in this construct indicates that the declaration exists only for the type checking, not to create a variable. Don't do this for every type that satisfies an interface, though. By convention, such declarations are only used when there are no static conversions already present in the code, which is a rare event."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u8fd9\u79cd\u7ed3\u6784\u4e2d\u51fa\u73b0\u7a7a\u767d\u6807\u8bc6\u7b26\uff0c\u5373\u8868\u793a\u8be5\u58f0\u660e\u7684\u5b58\u5728\u53ea\u662f\u4e3a\u4e86\u7c7b\u578b\u68c0\u67e5\u3002 \u4e0d\u8fc7\u8bf7\u4e0d\u8981\u4e3a\u6ee1\u8db3\u63a5\u53e3\u5c31\u5c06\u5b83\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u3002\u4f5c\u4e3a\u7ea6\u5b9a\uff0c \u4ec5\u5f53\u4ee3\u7801\u4e2d\u4e0d\u5b58\u5728\u9759\u6001\u7c7b\u578b\u8f6c\u6362\u65f6\u624d\u80fd\u8fd9\u79cd\u58f0\u660e\uff0c\u6bd5\u7adf\u8fd9\u662f\u79cd\u7f55\u89c1\u7684\u60c5\u51b5\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"embedding",children:"Embedding"}),"\n",(0,i.jsx)(n.h2,{id:"\u5185\u5d4c",children:"\u5185\u5d4c"}),"\n",(0,i.jsx)(n.p,{children:"Go does not provide the typical, type-driven notion of subclassing, but it does have the ability to \u201cborrow\u201d pieces of an implementation by embedding types within a struct or interface."}),"\n",(0,i.jsx)(n.p,{children:"Go \u5e76\u4e0d\u63d0\u4f9b\u5178\u578b\u7684\uff0c\u7c7b\u578b\u9a71\u52a8\u7684\u5b50\u7c7b\u5316\u6982\u5ff5\uff0c\u4f46\u901a\u8fc7\u5c06\u7c7b\u578b\u5185\u5d4c\u5230\u7ed3\u6784\u4f53\u6216\u63a5\u53e3\u4e2d\uff0c \u5b83\u5c31\u80fd \u201c\u501f\u9274\u201d \u90e8\u5206\u5b9e\u73b0\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Interface embedding is very simple. We've mentioned the io.Reader and io.Writer interfaces before; here are their definitions."}),"\n",(0,i.jsx)(n.p,{children:"\u63a5\u53e3\u5185\u5d4c\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u8fc7 io.Reader \u548c io.Writer \u63a5\u53e3\uff0c\u8fd9\u91cc\u662f\u5b83\u4eec\u7684\u5b9a\u4e49\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Reader interface {\n\tRead(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n\tWrite(p []byte) (n int, err error)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The io package also exports several other interfaces that specify objects that can implement several such methods. For instance, there is io.ReadWriter, an interface containing both Read and Write. We could specify io.ReadWriter by listing the two methods explicitly, but it's easier and more evocative to embed the two interfaces to form the new one, like this:"}),"\n",(0,i.jsx)(n.p,{children:"io \u5305\u4e5f\u5bfc\u51fa\u4e86\u4e00\u4e9b\u5176\u5b83\u63a5\u53e3\uff0c\u4ee5\u6b64\u6765\u9610\u660e\u5bf9\u8c61\u6240\u9700\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982 io.ReadWriter \u5c31\u662f\u4e2a\u5305\u542b Read \u548c Write \u7684\u63a5\u53e3\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u663e\u793a\u5730\u5217\u51fa\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u6307\u660e io.ReadWriter\uff0c \u4f46\u901a\u8fc7\u5c06\u8fd9\u4e24\u4e2a\u63a5\u53e3\u5185\u5d4c\u5230\u65b0\u7684\u63a5\u53e3\u4e2d\u663e\u7136\u66f4\u5bb9\u6613\u4e14\u66f4\u5177\u542f\u53d1\u6027\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ReadWriter is the interface that combines the Reader and Writer interfaces.\ntype ReadWriter interface {\n\tReader\n\tWriter\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ReadWriter \u63a5\u53e3\u7ed3\u5408\u4e86 Reader \u548c Writer \u63a5\u53e3\u3002\ntype ReadWriter interface {\n\tReader\n\tWriter\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This says just what it looks like: A ReadWriter can do what a Reader does and what a Writer does; it is a union of the embedded interfaces (which must be disjoint sets of methods). Only interfaces can be embedded within interfaces."}),"\n",(0,i.jsx)(n.p,{children:"\u6b63\u5982\u5b83\u770b\u8d77\u6765\u90a3\u6837\uff1aReadWriter \u80fd\u591f\u505a\u4efb\u4f55 Reader \u548c Writer \u53ef\u4ee5\u505a\u5230\u7684\u4e8b\u60c5\uff0c\u5b83\u662f\u5185\u5d4c\u63a5\u53e3\u7684\u8054\u5408\u4f53 \uff08\u5b83\u4eec\u5fc5\u987b\u662f\u4e0d\u76f8\u4ea4\u7684\u65b9\u6cd5\u96c6\uff09\u3002\u53ea\u6709\u63a5\u53e3\u80fd\u88ab\u5d4c\u5165\u5230\u63a5\u53e3\u4e2d\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The same basic idea applies to structs, but with more far-reaching implications. The bufio package has two struct types, bufio.Reader and bufio.Writer, each of which of course implements the analogous interfaces from package io. And bufio also implements a buffered reader/writer, which it does by combining a reader and a writer into one struct using embedding: it lists the types within the struct but does not give them field names."}),"\n",(0,i.jsx)(n.p,{children:"\u540c\u6837\u7684\u57fa\u672c\u60f3\u6cd5\u53ef\u4ee5\u5e94\u7528\u5728\u7ed3\u6784\u4f53\u4e2d\uff0c\u4f46\u5176\u610f\u4e49\u66f4\u52a0\u6df1\u8fdc\u3002bufio \u5305\u4e2d\u6709 bufio.Reader \u548c bufio.Writer \u8fd9\u4e24\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c \u5b83\u4eec\u6bcf\u4e00\u4e2a\u90fd\u5b9e\u73b0\u4e86\u4e0e io \u5305\u4e2d\u76f8\u540c\u610f\u4e49\u7684\u63a5\u53e3\u3002\u6b64\u5916\uff0cbufio \u8fd8\u901a\u8fc7\u7ed3\u5408 reader/writer \u5e76\u5c06\u5176\u5185\u5d4c\u5230\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b9e\u73b0\u4e86\u5e26\u7f13\u51b2\u7684 reader/writer\uff1a\u5b83\u5728\u7ed3\u6784\u4f53\u4e2d\u5217\u51fa\u4e86\u8fd9\u4e9b\u7c7b\u578b\uff0c\u4f46\u5e76\u672a\u7ed9\u4e88\u5b83\u4eec\u5b57\u6bb5\u540d\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ReadWriter stores pointers to a Reader and a Writer.\n// It implements io.ReadWriter.\ntype ReadWriter struct {\n\t*Reader  // *bufio.Reader\n\t*Writer  // *bufio.Writer\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ReadWriter \u5b58\u50a8\u4e86\u6307\u5411 Reader \u548c Writer \u7684\u6307\u9488\u3002\n// \u5b83\u5b9e\u73b0\u4e86 io.ReadWriter\u3002\ntype ReadWriter struct {\n\t*Reader  // *bufio.Reader\n\t*Writer  // *bufio.Writer\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The embedded elements are pointers to structs and of course must be initialized to point to valid structs before they can be used. The ReadWriter struct could be written as"}),"\n",(0,i.jsx)(n.p,{children:"\u5185\u5d4c\u7684\u5143\u7d20\u4e3a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u5f53\u7136\u5b83\u4eec\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a\u6307\u5411\u6709\u6548\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002 ReadWriter \u7ed3\u6784\u4f53\u53ef\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type ReadWriter struct {\n\treader *Reader\n\twriter *Writer\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"but then to promote the methods of the fields and to satisfy the io interfaces, we would also need to provide forwarding methods, like this:"}),"\n",(0,i.jsx)(n.p,{children:"\u4f46\u4e3a\u4e86\u63d0\u5347\u8be5\u5b57\u6bb5\u7684\u65b9\u6cd5\u5e76\u6ee1\u8db3 io \u63a5\u53e3\uff0c\u6211\u4eec\u540c\u6837\u9700\u8981\u63d0\u4f9b\u8f6c\u53d1\u7684\u65b9\u6cd5\uff0c \u5c31\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (rw *ReadWriter) Read(p []byte) (n int, err error) {\n\treturn rw.reader.Read(p)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"By embedding the structs directly, we avoid this bookkeeping. The methods of embedded types come along for free, which means that bufio.ReadWriter not only has the methods of bufio.Reader and bufio.Writer, it also satisfies all three interfaces: io.Reader, io.Writer, and io.ReadWriter."}),"\n",(0,i.jsx)(n.p,{children:"\u800c\u901a\u8fc7\u76f4\u63a5\u5185\u5d4c\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u5c31\u80fd\u907f\u514d\u5982\u6b64\u7e41\u7410\u3002 \u5185\u5d4c\u7c7b\u578b\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\uff0c\u8fd9\u610f\u5473\u7740 bufio.ReadWriter \u4e0d\u4ec5\u5305\u62ec bufio.Reader \u548c bufio.Writer \u7684\u65b9\u6cd5\uff0c\u5b83\u8fd8\u540c\u65f6\u6ee1\u8db3\u4e0b\u5217\u4e09\u4e2a\u63a5\u53e3\uff1a io.Reader\u3001io.Writer \u4ee5\u53ca io.ReadWriter\u3002"}),"\n",(0,i.jsx)(n.p,{children:"There's an important way in which embedding differs from subclassing. When we embed a type, the methods of that type become methods of the outer type, but when they are invoked the receiver of the method is the inner type, not the outer one. In our example, when the Read method of a bufio.ReadWriter is invoked, it has exactly the same effect as the forwarding method written out above; the receiver is the reader field of the ReadWriter, not the ReadWriter itself."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd8\u6709\u79cd\u533a\u5206\u5185\u5d4c\u4e0e\u5b50\u7c7b\u7684\u91cd\u8981\u624b\u6bb5\u3002\u5f53\u5185\u5d4c\u4e00\u4e2a\u7c7b\u578b\u65f6\uff0c\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5\u4f1a\u6210\u4e3a\u5916\u90e8\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c \u4f46\u5f53\u5b83\u4eec\u88ab\u8c03\u7528\u65f6\uff0c\u8be5\u65b9\u6cd5\u7684\u63a5\u6536\u8005\u662f\u5185\u90e8\u7c7b\u578b\uff0c\u800c\u975e\u5916\u90e8\u7684\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53 bufio.ReadWriter \u7684 Read \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c \u5b83\u4e0e\u4e4b\u524d\u5199\u7684\u8f6c\u53d1\u65b9\u6cd5\u5177\u6709\u540c\u6837\u7684\u6548\u679c\uff1b\u63a5\u6536\u8005\u662f ReadWriter \u7684 reader \u5b57\u6bb5\uff0c\u800c\u975e ReadWriter \u672c\u8eab\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Embedding can also be a simple convenience. This example shows an embedded field alongside a regular, named field."}),"\n",(0,i.jsx)(n.p,{children:"\u5185\u5d4c\u540c\u6837\u53ef\u4ee5\u63d0\u4f9b\u4fbf\u5229\u3002\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u4e00\u4e2a\u5185\u5d4c\u5b57\u6bb5\u548c\u4e00\u4e2a\u5e38\u89c4\u7684\u547d\u540d\u5b57\u6bb5\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Job struct {\n\tCommand string\n\t*log.Logger\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The Job type now has the Log, Logf and other methods of ",(0,i.jsx)(n.code,{children:"*log.Logger"}),". We could have given the Logger a field name, of course, but it's not necessary to do so. And now, once initialized, we can log to the Job:"]}),"\n",(0,i.jsxs)(n.p,{children:["Job \u7c7b\u578b\u73b0\u5728\u6709\u4e86 Log\u3001Logf \u548c ",(0,i.jsx)(n.code,{children:"*log.Logger"})," \u7684\u5176\u5b83\u65b9\u6cd5\u3002\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u4e3a Logger \u63d0\u4f9b\u4e00\u4e2a\u5b57\u6bb5\u540d\uff0c\u4f46\u5b8c\u5168\u4e0d\u5fc5\u8fd9\u4e48\u505a\u3002\u73b0\u5728\uff0c\u4e00\u65e6\u521d\u59cb\u5316\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u8bb0\u5f55 Job \u4e86\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'job.Log("starting now...")\n'})}),"\n",(0,i.jsx)(n.p,{children:"The Logger is a regular field of the Job struct, so we can initialize it in the usual way inside the constructor for Job, like this,"}),"\n",(0,i.jsx)(n.p,{children:"Logger \u662f Job \u7ed3\u6784\u4f53\u7684\u5e38\u89c4\u5b57\u6bb5\uff0c \u56e0\u6b64\u6211\u4eec\u53ef\u5728 Job \u7684\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7\u4e00\u822c\u7684\u65b9\u5f0f\u6765\u521d\u59cb\u5316\u5b83\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func NewJob(command string, logger *log.Logger) *Job {\n\treturn &Job{command, logger}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"or with a composite literal,"}),"\n",(0,i.jsx)(n.p,{children:"\u6216\u901a\u8fc7\u590d\u5408\u5b57\u9762\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'job := &Job{command, log.New(os.Stderr, "Job: ", log.Ldate)}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If we need to refer to an embedded field directly, the type name of the field, ignoring the package qualifier, serves as a field name, as it did in the Read method of our ReaderWriter struct. Here, if we needed to access the ",(0,i.jsx)(n.code,{children:"*log.Logger"})," of a Job variable job, we would write job.Logger, which would be useful if we wanted to refine the methods of Logger."]}),"\n",(0,i.jsxs)(n.p,{children:["\u82e5\u6211\u4eec\u9700\u8981\u76f4\u63a5\u5f15\u7528\u5185\u5d4c\u5b57\u6bb5\uff0c\u53ef\u4ee5\u5ffd\u7565\u5305\u9650\u5b9a\u540d\uff0c\u76f4\u63a5\u5c06\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u540d\uff0c \u5c31\u50cf\u6211\u4eec\u5728 ReaderWriter \u7ed3\u6784\u4f53\u7684 Read \u65b9\u6cd5\u4e2d\u505a\u7684\u90a3\u6837\u3002 \u82e5\u6211\u4eec\u9700\u8981\u8bbf\u95ee Job \u7c7b\u578b\u7684\u53d8\u91cf job \u7684 ",(0,i.jsx)(n.code,{children:"*log.Logger"}),"\uff0c \u53ef\u4ee5\u76f4\u63a5\u5199\u4f5c job.Logger\u3002\u82e5\u6211\u4eec\u60f3\u7cbe\u70bc Logger \u7684\u65b9\u6cd5\u65f6\uff0c \u8fd9\u4f1a\u975e\u5e38\u6709\u7528\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (job *Job) Logf(format string, args ...interface{}) {\n\tjob.Logger.Logf("%q: %s", job.Command, fmt.Sprintf(format, args...))\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Embedding types introduces the problem of name conflicts but the rules to resolve them are simple. First, a field or method X hides any other item X in a more deeply nested part of the type. If log.Logger contained a field or method called Command, the Command field of Job would dominate it."}),"\n",(0,i.jsx)(n.p,{children:"\u5185\u5d4c\u7c7b\u578b\u4f1a\u5f15\u5165\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\uff0c\u4f46\u89e3\u51b3\u89c4\u5219\u5374\u5f88\u7b80\u5355\u3002\u9996\u5148\uff0c\u5b57\u6bb5\u6216\u65b9\u6cd5 X \u4f1a\u9690\u85cf\u8be5\u7c7b\u578b\u4e2d\u66f4\u6df1\u5c42\u5d4c\u5957\u7684\u5176\u5b83\u9879 X\u3002\u82e5 log.Logger \u5305\u542b\u4e00\u4e2a\u540d\u4e3a Command \u7684\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0cJob \u7684 Command \u5b57\u6bb5\u4f1a\u8986\u76d6\u5b83\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Second, if the same name appears at the same nesting level, it is usually an error; it would be erroneous to embed log.Logger if the Job struct contained another field or method called Logger. However, if the duplicate name is never mentioned in the program outside the type definition, it is OK. This qualification provides some protection against changes made to types embedded from outside; there is no problem if a field is added that conflicts with another field in another subtype if neither field is ever used."}),"\n",(0,i.jsx)(n.p,{children:"\u5176\u6b21\uff0c\u82e5\u76f8\u540c\u7684\u5d4c\u5957\u5c42\u7ea7\u4e0a\u51fa\u73b0\u540c\u540d\u51b2\u7a81\uff0c\u901a\u5e38\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\u3002\u82e5 Job \u7ed3\u6784\u4f53\u4e2d\u5305\u542b\u540d\u4e3a Logger \u7684\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0c\u518d\u5c06 log.Logger \u5185\u5d4c\u5230\u5176\u4e2d\u7684\u8bdd\u5c31\u4f1a\u4ea7\u751f\u9519\u8bef\u3002\u7136\u800c\uff0c\u82e5\u91cd\u540d\u6c38\u8fdc\u4e0d\u4f1a\u5728\u8be5\u7c7b\u578b\u5b9a\u4e49\u4e4b\u5916\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u90a3\u5c31\u4e0d\u4f1a\u51fa\u9519\u3002 \u8fd9\u79cd\u9650\u5b9a\u80fd\u591f\u5728\u5916\u90e8\u5d4c\u5957\u7c7b\u578b\u53d1\u751f\u4fee\u6539\u65f6\u63d0\u4f9b\u67d0\u79cd\u4fdd\u62a4\u3002 \u56e0\u6b64\uff0c\u5c31\u7b97\u6dfb\u52a0\u7684\u5b57\u6bb5\u4e0e\u53e6\u4e00\u4e2a\u5b50\u7c7b\u578b\u4e2d\u7684\u5b57\u6bb5\u76f8\u51b2\u7a81\uff0c\u53ea\u8981\u8fd9\u4e24\u4e2a\u76f8\u540c\u7684\u5b57\u6bb5\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4f7f\u7528\u5c31\u6ca1\u95ee\u9898\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"concurrency",children:"Concurrency"}),"\n",(0,i.jsx)(n.h2,{id:"\u5e76\u53d1",children:"\u5e76\u53d1"}),"\n",(0,i.jsx)(n.h3,{id:"share-by-communicating",children:"Share by communicating"}),"\n",(0,i.jsx)(n.h3,{id:"\u901a\u8fc7\u901a\u4fe1\u5171\u4eab\u5185\u5b58",children:"\u901a\u8fc7\u901a\u4fe1\u5171\u4eab\u5185\u5b58"}),"\n",(0,i.jsx)(n.p,{children:"Concurrent programming is a large topic and there is space only for some Go-specific highlights here."}),"\n",(0,i.jsx)(n.p,{children:"\u5e76\u53d1\u7f16\u7a0b\u662f\u4e2a\u5f88\u5927\u7684\u8bba\u9898\u3002\u4f46\u9650\u4e8e\u7bc7\u5e45\uff0c\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u4e00\u4e9b Go \u7279\u6709\u7684\u4e1c\u897f\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Concurrent programming in many environments is made difficult by the subtleties required to implement correct access to shared variables. Go encourages a different approach in which shared values are passed around on channels and, in fact, never actively shared by separate threads of execution. Only one goroutine has access to the value at any given time. Data races cannot occur, by design. To encourage this way of thinking we have reduced it to a slogan:"}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u5e76\u53d1\u7f16\u7a0b\u4e2d\uff0c\u4e3a\u5b9e\u73b0\u5bf9\u5171\u4eab\u53d8\u91cf\u7684\u6b63\u786e\u8bbf\u95ee\u9700\u8981\u7cbe\u786e\u7684\u63a7\u5236\uff0c\u8fd9\u5728\u591a\u6570\u73af\u5883\u4e0b\u90fd\u5f88\u56f0\u96be\u3002 Go \u8bed\u8a00\u53e6\u8f9f\u8e4a\u5f84\uff0c\u5b83\u5c06\u5171\u4eab\u7684\u503c\u901a\u8fc7\u4fe1\u9053\u4f20\u9012\uff0c\u5b9e\u9645\u4e0a\uff0c\u591a\u4e2a\u72ec\u7acb\u6267\u884c\u7684\u7ebf\u7a0b\u4ece\u4e0d\u4f1a\u4e3b\u52a8\u5171\u4eab\u3002 \u5728\u4efb\u610f\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a goroutine \u80fd\u591f\u8bbf\u95ee\u8be5\u503c\u3002\u6570\u636e\u7ade\u4e89\u4ece\u8bbe\u8ba1\u4e0a\u5c31\u88ab\u675c\u7edd\u4e86\u3002 \u4e3a\u4e86\u63d0\u5021\u8fd9\u79cd\u601d\u8003\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u5b83\u7b80\u5316\u4e3a\u4e00\u53e5\u53e3\u53f7\uff1a"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Do not communicate by sharing memory; instead, share memory by communicating."}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6765\u901a\u4fe1\uff0c\u800c\u5e94\u901a\u8fc7\u901a\u4fe1\u6765\u5171\u4eab\u5185\u5b58\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach can be taken too far. Reference counts may be best done by putting a mutex around an integer variable, for instance. But as a high-level approach, using channels to control access makes it easier to write clear, correct programs."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u79cd\u65b9\u6cd5\u610f\u4e49\u6df1\u8fdc\u3002\u4f8b\u5982\uff0c\u5f15\u7528\u8ba1\u6570\u901a\u8fc7\u4e3a\u6574\u6570\u53d8\u91cf\u6dfb\u52a0\u4e92\u65a5\u9501\u6765\u5f88\u597d\u5730\u5b9e\u73b0\u3002 \u4f46\u4f5c\u4e3a\u4e00\u79cd\u9ad8\u7ea7\u65b9\u6cd5\uff0c\u901a\u8fc7\u4fe1\u9053\u6765\u63a7\u5236\u8bbf\u95ee\u80fd\u591f\u8ba9\u4f60\u5199\u51fa\u66f4\u7b80\u6d01\uff0c\u6b63\u786e\u7684\u7a0b\u5e8f\u3002"}),"\n",(0,i.jsx)(n.p,{children:"One way to think about this model is to consider a typical single-threaded program running on one CPU. It has no need for synchronization primitives. Now run another such instance; it too needs no synchronization. Now let those two communicate; if the communication is the synchronizer, there's still no need for other synchronization. Unix pipelines, for example, fit this model perfectly. Although Go's approach to concurrency originates in Hoare's Communicating Sequential Processes (CSP), it can also be seen as a type-safe generalization of Unix pipes."}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u53ef\u4ee5\u4ece\u5178\u578b\u7684\u5355\u7ebf\u7a0b\u8fd0\u884c\u5728\u5355 CPU \u4e4b\u4e0a\u7684\u60c5\u5f62\u6765\u5ba1\u89c6\u8fd9\u79cd\u6a21\u578b\u3002\u5b83\u65e0\u9700\u63d0\u4f9b\u540c\u6b65\u539f\u8bed\u3002 \u73b0\u5728\u518d\u8fd0\u884c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5b83\u4e5f\u65e0\u9700\u540c\u6b65\u3002\u73b0\u5728\u8ba9\u5b83\u4eec\u4fe9\u8fdb\u884c\u901a\u4fe1\u3002\u82e5\u5c06\u901a\u4fe1\u8fc7\u7a0b\u770b\u505a\u540c\u6b65\u7740\uff0c \u90a3\u5c31\u5b8c\u5168\u4e0d\u9700\u8981\u5176\u5b83\u540c\u6b65\u4e86\u3002\u4f8b\u5982\uff0cUnix \u7ba1\u9053\u5c31\u4e0e\u8fd9\u79cd\u6a21\u578b\u5b8c\u7f8e\u5951\u5408\u3002 \u5c3d\u7ba1 Go \u7684\u5e76\u53d1\u5904\u7406\u65b9\u5f0f\u6765\u6e90\u4e8e Hoare \u7684\u901a\u4fe1\u987a\u5e8f\u5904\u7406\uff08CSP\uff09\uff0c \u5b83\u4f9d\u7136\u53ef\u4ee5\u770b\u505a\u662f\u7c7b\u578b\u5b89\u5168\u7684 Unix \u7ba1\u9053\u7684\u5b9e\u73b0\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"goroutines",children:"Goroutines"}),"\n",(0,i.jsx)(n.h3,{id:"goroutines-1",children:"Goroutines"}),"\n",(0,i.jsx)(n.p,{children:"They're called goroutines because the existing terms\u2014threads, coroutines, processes, and so on\u2014convey inaccurate connotations. A goroutine has a simple model: it is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. And the stacks start small, so they are cheap, and grow by allocating (and freeing) heap storage as required."}),"\n",(0,i.jsxs)(n.p,{children:["\u6211\u4eec\u79f0\u4e4b\u4e3a ",(0,i.jsx)(n.strong,{children:"goroutine"})," \uff0c\u662f\u56e0\u4e3a\u73b0\u6709\u7684\u672f\u8bed\u2014\u7ebf\u7a0b\u3001\u534f\u7a0b\u3001\u8fdb\u7a0b\u7b49\u7b49\u2014\u65e0\u6cd5\u51c6\u786e\u4f20\u8fbe\u5b83\u7684\u542b\u4e49\u3002 Goroutine \u5177\u6709\u7b80\u5355\u7684\u6a21\u578b\uff1a\u5b83\u662f\u4e0e\u5176\u5b83 goroutine \u5e76\u53d1\u8fd0\u884c\u5728\u540c\u4e00\u5730\u5740\u7a7a\u95f4\u7684\u51fd\u6570\u3002\u5b83\u662f\u8f7b\u91cf\u7ea7\u7684\uff0c \u6240\u6709\u6d88\u8017\u51e0\u4e4e\u5c31\u53ea\u6709\u6808\u7a7a\u95f4\u7684\u5206\u914d\u3002\u800c\u4e14\u6808\u6700\u5f00\u59cb\u662f\u975e\u5e38\u5c0f\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u5f88\u5ec9\u4ef7\uff0c \u4ec5\u5728\u9700\u8981\u65f6\u624d\u4f1a\u968f\u7740\u5806\u7a7a\u95f4\u7684\u5206\u914d\uff08\u548c\u91ca\u653e\uff09\u800c\u53d8\u5316\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Goroutines are multiplexed onto multiple OS threads so if one should block, such as while waiting for I/O, others continue to run. Their design hides many of the complexities of thread creation and management."}),"\n",(0,i.jsx)(n.p,{children:"Goroutine \u5728\u591a\u7ebf\u7a0b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u53ef\u5b9e\u73b0\u591a\u8def\u590d\u7528\uff0c\u56e0\u6b64\u82e5\u4e00\u4e2a\u7ebf\u7a0b\u963b\u585e\uff0c\u6bd4\u5982\u8bf4\u7b49\u5f85 I/O\uff0c \u90a3\u4e48\u5176\u5b83\u7684\u7ebf\u7a0b\u5c31\u4f1a\u8fd0\u884c\u3002Goroutine \u7684\u8bbe\u8ba1\u9690\u85cf\u4e86\u7ebf\u7a0b\u521b\u5efa\u548c\u7ba1\u7406\u7684\u8bf8\u591a\u590d\u6742\u6027\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Prefix a function or method call with the go keyword to run the call in a new goroutine. When the call completes, the goroutine exits, silently. (The effect is similar to the Unix shell's & notation for running a command in the background.)"}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u524d\u6dfb\u52a0 go \u5173\u952e\u5b57\u80fd\u591f\u5728\u65b0\u7684 goroutine \u4e2d\u8c03\u7528\u5b83\u3002\u5f53\u8c03\u7528\u5b8c\u6210\u540e\uff0c \u8be5 goroutine \u4e5f\u4f1a\u5b89\u9759\u5730\u9000\u51fa\u3002\uff08\u6548\u679c\u6709\u70b9\u50cf Unix Shell \u4e2d\u7684 & \u7b26\u53f7\uff0c\u5b83\u80fd\u8ba9\u547d\u4ee4\u5728\u540e\u53f0\u8fd0\u884c\u3002\uff09"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"go list.Sort()  // run list.Sort concurrently; don't wait for it.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"go list.Sort()  // \u5e76\u53d1\u8fd0\u884c list.Sort\uff0c\u65e0\u9700\u7b49\u5b83\u7ed3\u675f\u3002\n"})}),"\n",(0,i.jsx)(n.p,{children:"A function literal can be handy in a goroutine invocation."}),"\n",(0,i.jsx)(n.p,{children:"\u51fd\u6570\u5b57\u9762\u5728 goroutine \u8c03\u7528\u4e2d\u975e\u5e38\u6709\u7528\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Announce(message string, delay time.Duration) {\n\tgo func() {\n\t\ttime.Sleep(delay)\n\t\tfmt.Println(message)\n\t}()  // Note the parentheses - must call the function.\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Announce(message string, delay time.Duration) {\n\tgo func() {\n\t\ttime.Sleep(delay)\n\t\tfmt.Println(message)\n\t}()  // \u6ce8\u610f\u62ec\u53f7 - \u5fc5\u987b\u8c03\u7528\u8be5\u51fd\u6570\u3002\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"In Go, function literals are closures: the implementation makes sure the variables referred to by the function survive as long as they are active."}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Go \u4e2d\uff0c\u51fd\u6570\u5b57\u9762\u90fd\u662f\u95ed\u5305\uff1a\u5176\u5b9e\u73b0\u5728\u4fdd\u8bc1\u4e86\u51fd\u6570\u5185\u5f15\u7528\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4e0e\u51fd\u6570\u7684\u6d3b\u52a8\u65f6\u95f4\u76f8\u540c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"These examples aren't too practical because the functions have no way of signaling completion. For that, we need channels."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e9b\u51fd\u6570\u6ca1\u4ec0\u4e48\u5b9e\u7528\u6027\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u5b9e\u73b0\u5b8c\u6210\u65f6\u7684\u4fe1\u53f7\u5904\u7406\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4fe1\u9053\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"channels",children:"Channels"}),"\n",(0,i.jsx)(n.h3,{id:"\u4fe1\u9053",children:"\u4fe1\u9053"}),"\n",(0,i.jsx)(n.p,{children:"Like maps, channels are allocated with make, and the resulting value acts as a reference to an underlying data structure. If an optional integer parameter is provided, it sets the buffer size for the channel. The default is zero, for an unbuffered or synchronous channel."}),"\n",(0,i.jsx)(n.p,{children:"\u4fe1\u9053\u4e0e\u6620\u5c04\u4e00\u6837\uff0c\u4e5f\u9700\u8981\u901a\u8fc7 make \u6765\u5206\u914d\u5185\u5b58\u3002\u5176\u7ed3\u679c\u503c\u5145\u5f53\u4e86\u5bf9\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u7684\u5f15\u7528\u3002 \u82e5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u9009\u7684\u6574\u6570\u5f62\u53c2\uff0c\u5b83\u5c31\u4f1a\u4e3a\u8be5\u4fe1\u9053\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0f\u3002\u9ed8\u8ba4\u503c\u662f\u96f6\uff0c\u8868\u793a\u4e0d\u5e26\u7f13\u51b2\u7684\u6216\u540c\u6b65\u7684\u4fe1\u9053\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"ci := make(chan int)            // unbuffered channel of integers\ncj := make(chan int, 0)         // unbuffered channel of integers\ncs := make(chan *os.File, 100)  // buffered channel of pointers to Files\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"ci := make(chan int)            // \u6574\u6570\u7c7b\u578b\u7684\u65e0\u7f13\u51b2\u4fe1\u9053\ncj := make(chan int, 0)         // \u6574\u6570\u7c7b\u578b\u7684\u65e0\u7f13\u51b2\u4fe1\u9053\ncs := make(chan *os.File, 100)  // \u6307\u5411\u6587\u4ef6\u6307\u9488\u7684\u5e26\u7f13\u51b2\u4fe1\u9053\n"})}),"\n",(0,i.jsx)(n.p,{children:"Unbuffered channels combine communication\u2014the exchange of a value\u2014with synchronization\u2014guaranteeing that two calculations (goroutines) are in a known state."}),"\n",(0,i.jsx)(n.p,{children:"\u65e0\u7f13\u51b2\u4fe1\u9053\u5728\u901a\u4fe1\u65f6\u4f1a\u540c\u6b65\u4ea4\u6362\u6570\u636e\uff0c\u5b83\u80fd\u786e\u4fdd\uff08\u4e24\u4e2a goroutine\uff09\u8ba1\u7b97\u5904\u4e8e\u786e\u5b9a\u72b6\u6001\u3002"}),"\n",(0,i.jsx)(n.p,{children:"There are lots of nice idioms using channels. Here's one to get us started. In the previous section we launched a sort in the background. A channel can allow the launching goroutine to wait for the sort to complete."}),"\n",(0,i.jsx)(n.p,{children:"\u4fe1\u9053\u6709\u5f88\u591a\u60ef\u7528\u6cd5\uff0c\u6211\u4eec\u4ece\u8fd9\u91cc\u5f00\u59cb\u4e86\u89e3\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5728\u540e\u53f0\u542f\u52a8\u4e86\u6392\u5e8f\u64cd\u4f5c\u3002 \u4fe1\u9053\u4f7f\u5f97\u542f\u52a8\u7684 goroutine \u7b49\u5f85\u6392\u5e8f\u5b8c\u6210\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"c := make(chan int)  // Allocate a channel.\n// Start the sort in a goroutine; when it completes, signal on the channel.\ngo func() {\n\tlist.Sort()\n\tc <- 1  // Send a signal; value does not matter.\n}()\ndoSomethingForAWhile()\n<-c   // Wait for sort to finish; discard sent value.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"c := make(chan int)  // \u5206\u914d\u4e00\u4e2a\u4fe1\u9053\n// \u5728 goroutine \u4e2d\u542f\u52a8\u6392\u5e8f\u3002\u5f53\u5b83\u5b8c\u6210\u540e\uff0c\u5728\u4fe1\u9053\u4e0a\u53d1\u9001\u4fe1\u53f7\u3002\ngo func() {\n\tlist.Sort()\n\tc <- 1  // \u53d1\u9001\u4fe1\u53f7\uff0c\u4ec0\u4e48\u503c\u65e0\u6240\u8c13\u3002\n}()\ndoSomethingForAWhile()\n<-c   // \u7b49\u5f85\u6392\u5e8f\u7ed3\u675f\uff0c\u4e22\u5f03\u53d1\u6765\u7684\u503c\u3002\n"})}),"\n",(0,i.jsx)(n.p,{children:"Receivers always block until there is data to receive. If the channel is unbuffered, the sender blocks until the receiver has received the value. If the channel has a buffer, the sender blocks only until the value has been copied to the buffer; if the buffer is full, this means waiting until some receiver has retrieved a value."}),"\n",(0,i.jsx)(n.p,{children:"\u63a5\u6536\u8005\u5728\u6536\u5230\u6570\u636e\u524d\u4f1a\u4e00\u76f4\u963b\u585e\u3002\u82e5\u4fe1\u9053\u662f\u4e0d\u5e26\u7f13\u51b2\u7684\uff0c\u90a3\u4e48\u5728\u63a5\u6536\u8005\u6536\u5230\u503c\u524d\uff0c \u53d1\u9001\u8005\u4f1a\u4e00\u76f4\u963b\u585e\uff1b\u82e5\u4fe1\u9053\u662f\u5e26\u7f13\u51b2\u7684\uff0c\u5219\u53d1\u9001\u8005\u4ec5\u4ec5\u53ea\u9700\u963b\u585e\u5230\u503c\u88ab\u590d\u5236\u5230\u7f13\u51b2\u533a\uff1b \u82e5\u7f13\u51b2\u533a\u5df2\u6ee1\uff0c\u53d1\u9001\u8005\u4f1a\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u67d0\u4e2a\u63a5\u6536\u8005\u53d6\u51fa\u4e00\u4e2a\u503c\u4e3a\u6b62\u3002"}),"\n",(0,i.jsx)(n.p,{children:"A buffered channel can be used like a semaphore, for instance to limit throughput. In this example, incoming requests are passed to handle, which sends a value into the channel, processes the request, and then receives a value from the channel to ready the \u201csemaphore\u201d for the next consumer. The capacity of the channel buffer limits the number of simultaneous calls to process."}),"\n",(0,i.jsx)(n.p,{children:"\u5e26\u7f13\u51b2\u7684\u4fe1\u9053\u53ef\u88ab\u7528\u4f5c\u4fe1\u53f7\u91cf\uff0c\u4f8b\u5982\u9650\u5236\u541e\u5410\u91cf\u3002\u5728\u6b64\u4f8b\u4e2d\uff0c\u8fdb\u5165\u7684\u8bf7\u6c42\u4f1a\u88ab\u4f20\u9012\u7ed9 handle\uff0c\u5b83\u4ece\u4fe1\u9053\u4e2d\u63a5\u6536\u503c\uff0c\u5904\u7406\u8bf7\u6c42\u540e\u5c06\u503c\u53d1\u56de\u8be5\u4fe1\u9053\u4e2d\uff0c\u4ee5\u4fbf\u8ba9\u8be5 \u201c\u4fe1\u53f7\u91cf\u201d \u51c6\u5907\u8fce\u63a5\u4e0b\u4e00\u6b21\u8bf7\u6c42\u3002\u4fe1\u9053\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u51b3\u5b9a\u4e86\u540c\u65f6\u8c03\u7528 process \u7684\u6570\u91cf\u4e0a\u9650\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var sem = make(chan int, MaxOutstanding)\n\nfunc handle(r *Request) {\n\tsem <- 1    // Wait for active queue to drain.\n\tprocess(r)  // May take a long time.\n\t<-sem       // Done; enable next request to run.\n}\n\nfunc Serve(queue chan *Request) {\n\tfor {\n\t\treq := <-queue\n\t\tgo handle(req)  // Don't wait for handle to finish.\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var sem = make(chan int, MaxOutstanding)\n\nfunc handle(r *Request) {\n\tsem <- 1 // \u7b49\u5f85\u6d3b\u52a8\u961f\u5217\u6e05\u7a7a\u3002\n\tprocess(r)  // \u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\n\t<-sem    // \u5b8c\u6210\uff1b\u4f7f\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u53ef\u4ee5\u8fd0\u884c\u3002\n}\n\nfunc Serve(queue chan *Request) {\n\tfor {\n\t\treq := <-queue\n\t\tgo handle(req)  // \u65e0\u9700\u7b49\u5f85 handle \u7ed3\u675f\u3002\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once MaxOutstanding handlers are executing process, any more will block trying to send into the filled channel buffer, until one of the existing handlers finishes and receives from the buffer."}),"\n",(0,i.jsx)(n.p,{children:"\u4e00\u65e6\u6709 MaxOutstanding \u4e2a\u5904\u7406\u5668\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\uff0c\u5176\u4ed6\u7684\u6240\u6709\u5904\u7406\u5668\u90fd\u4f1a\u5728\u8bd5\u56fe\u53d1\u9001\u503c\u5230\u4fe1\u9053\u7f13\u51b2\u533a\u7684\u65f6\u5019\u963b\u585e\uff0c\u76f4\u5230\u67d0\u4e2a\u5904\u7406\u5668\u5b8c\u6210\u5904\u7406\u5e76\u4ece\u7f13\u51b2\u533a\u53d6\u56de\u4e00\u4e2a\u503c\u4e3a\u6b62\u3002"}),"\n",(0,i.jsx)(n.p,{children:"This design has a problem, though: Serve creates a new goroutine for every incoming request, even though only MaxOutstanding of them can run at any moment. As a result, the program can consume unlimited resources if the requests come in too fast. We can address that deficiency by changing Serve to gate the creation of the goroutines. Here's an obvious solution, but beware it has a bug we'll fix subsequently:"}),"\n",(0,i.jsx)(n.p,{children:"\u7136\u800c\uff0c\u5b83\u5374\u6709\u4e2a\u8bbe\u8ba1\u95ee\u9898\uff1a\u5c3d\u7ba1\u53ea\u6709 MaxOutstanding \u4e2a goroutine \u80fd\u540c\u65f6\u8fd0\u884c\uff0c\u4f46 Serve \u8fd8\u662f\u4e3a\u6bcf\u4e2a\u8fdb\u5165\u7684\u8bf7\u6c42\u90fd\u521b\u5efa\u4e86\u65b0\u7684 goroutine\u3002\u5176\u7ed3\u679c\u5c31\u662f\uff0c\u82e5\u8bf7\u6c42\u6765\u5f97\u5f88\u5feb\uff0c \u8be5\u7a0b\u5e8f\u5c31\u4f1a\u65e0\u9650\u5730\u6d88\u8017\u8d44\u6e90\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u79cd\u4e0d\u8db3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 Serve \u6765\u9650\u5236\u521b\u5efa Go \u7a0b\uff0c\u8fd9\u662f\u4e2a\u660e\u663e\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u8981\u5f53\u5fc3\u6211\u4eec\u4fee\u590d\u540e\u51fa\u73b0\u7684 Bug\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Serve(queue chan *Request) {\n\tfor req := range queue {\n\t\tsem <- 1\n\t\tgo func() {\n\t\t\tprocess(req) // Buggy; see explanation below.\n\t\t\t<-sem\n\t\t}()\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Serve(queue chan *Request) {\n\tfor req := range queue {\n\t\tsem <- 1\n\t\tgo func() {\n\t\t\tprocess(req) // \u8fd9\u513f\u6709 Bug\uff0c\u89e3\u91ca\u89c1\u4e0b\u3002\n\t\t\t<-sem\n\t\t}()\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The bug is that in a Go for loop, the loop variable is reused for each iteration, so the req variable is shared across all goroutines. That's not what we want. We need to make sure that req is unique for each goroutine. Here's one way to do that, passing the value of req as an argument to the closure in the goroutine:"}),"\n",(0,i.jsx)(n.p,{children:"Bug \u51fa\u73b0\u5728 Go \u7684 for \u5faa\u73af\u4e2d\uff0c\u8be5\u5faa\u73af\u53d8\u91cf\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u4f1a\u88ab\u91cd\u7528\uff0c\u56e0\u6b64 req \u53d8\u91cf\u4f1a\u5728\u6240\u6709\u7684 goroutine \u95f4\u5171\u4eab\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u6211\u4eec\u9700\u8981\u786e\u4fdd req \u5bf9\u4e8e\u6bcf\u4e2a goroutine \u6765\u8bf4\u90fd\u662f\u552f\u4e00\u7684\u3002\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u505a\u5230\uff0c\u5c31\u662f\u5c06 req \u7684\u503c\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u5165\u5230\u8be5 goroutine \u7684\u95ed\u5305\u4e2d\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Serve(queue chan *Request) {\n\tfor req := range queue {\n\t\tsem <- 1\n\t\tgo func(req *Request) {\n\t\t\tprocess(req)\n\t\t\t<-sem\n\t\t}(req)\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Compare this version with the previous to see the difference in how the closure is declared and run. Another solution is just to create a new variable with the same name, as in this example:"}),"\n",(0,i.jsx)(n.p,{children:"\u6bd4\u8f83\u524d\u540e\u4e24\u4e2a\u7248\u672c\uff0c\u89c2\u5bdf\u8be5\u95ed\u5305\u58f0\u660e\u548c\u8fd0\u884c\u4e2d\u7684\u5dee\u522b\u3002 \u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u4ee5\u76f8\u540c\u7684\u540d\u5b57\u521b\u5efa\u65b0\u7684\u53d8\u91cf\uff0c\u5982\u4f8b\u4e2d\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Serve(queue chan *Request) {\n\tfor req := range queue {\n\t\treq := req // Create new instance of req for the goroutine.\n\t\tsem <- 1\n\t\tgo func() {\n\t\t\tprocess(req)\n\t\t\t<-sem\n\t\t}()\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Serve(queue chan *Request) {\n\tfor req := range queue {\n\t\treq := req // \u4e3a\u8be5 Go \u7a0b\u521b\u5efa req \u7684\u65b0\u5b9e\u4f8b\u3002\n\t\tsem <- 1\n\t\tgo func() {\n\t\t\tprocess(req)\n\t\t\t<-sem\n\t\t}()\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"It may seem odd to write"}),"\n",(0,i.jsx)(n.p,{children:"\u5b83\u7684\u5199\u6cd5\u770b\u8d77\u6765\u6709\u70b9\u5947\u602a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"req := req\n"})}),"\n",(0,i.jsx)(n.p,{children:"but it's a legal and idiomatic in Go to do this. You get a fresh version of the variable with the same name, deliberately shadowing the loop variable locally but unique to each goroutine."}),"\n",(0,i.jsx)(n.p,{children:"\u4f46\u5728 Go \u4e2d\u8fd9\u6837\u505a\u662f\u5408\u6cd5\u4e14\u60ef\u7528\u7684\u3002\u4f60\u7528\u76f8\u540c\u7684\u540d\u5b57\u83b7\u5f97\u4e86\u8be5\u53d8\u91cf\u7684\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c \u4ee5\u6b64\u6765\u5c40\u90e8\u5730\u523b\u610f\u5c4f\u853d\u5faa\u73af\u53d8\u91cf\uff0c\u4f7f\u5b83\u5bf9\u6bcf\u4e2a goroutine \u4fdd\u6301\u552f\u4e00\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Going back to the general problem of writing the server, another approach that manages resources well is to start a fixed number of handle goroutines all reading from the request channel. The number of goroutines limits the number of simultaneous calls to process. This Serve function also accepts a channel on which it will be told to exit; after launching the goroutines it blocks receiving from that channel."}),"\n",(0,i.jsx)(n.p,{children:"\u56de\u5230\u7f16\u5199\u670d\u52a1\u5668\u7684\u4e00\u822c\u95ee\u9898\u4e0a\u6765\u3002\u53e6\u4e00\u79cd\u7ba1\u7406\u8d44\u6e90\u7684\u597d\u65b9\u6cd5\u5c31\u662f\u542f\u52a8\u56fa\u5b9a\u6570\u91cf\u7684 handle goroutine\uff0c\u4e00\u8d77\u4ece\u8bf7\u6c42\u4fe1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\u3002Goroutine \u7684\u6570\u91cf\u9650\u5236\u4e86\u540c\u65f6\u8c03\u7528 process \u7684\u6570\u91cf\u3002Serve \u540c\u6837\u4f1a\u63a5\u6536\u4e00\u4e2a\u901a\u77e5\u9000\u51fa\u7684\u4fe1\u9053\uff0c \u5728\u542f\u52a8\u6240\u6709 goroutine \u540e\uff0c\u5b83\u5c06\u963b\u585e\u5e76\u6682\u505c\u4ece\u4fe1\u9053\u4e2d\u63a5\u6536\u6d88\u606f\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func handle(queue chan *Request) {\n\tfor r := range queue {\n\t\tprocess(r)\n\t}\n}\n\nfunc Serve(clientRequests chan *Request, quit chan bool) {\n\t// Start handlers\n\tfor i := 0; i < MaxOutstanding; i++ {\n\t\tgo handle(clientRequests)\n\t}\n\t<-quit  // Wait to be told to exit.\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func handle(queue chan *Request) {\n\tfor r := range queue {\n\t\tprocess(r)\n\t}\n}\n\nfunc Serve(clientRequests chan *Request, quit chan bool) {\n\t// \u542f\u52a8\u5904\u7406\u7a0b\u5e8f\n\tfor i := 0; i < MaxOutstanding; i++ {\n\t\tgo handle(clientRequests)\n\t}\n\t<-quit  // \u7b49\u5f85\u901a\u77e5\u9000\u51fa\u3002\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"channels-of-channels",children:"Channels of channels"}),"\n",(0,i.jsx)(n.h3,{id:"\u4fe1\u9053\u4e2d\u7684\u4fe1\u9053",children:"\u4fe1\u9053\u4e2d\u7684\u4fe1\u9053"}),"\n",(0,i.jsx)(n.p,{children:"One of the most important properties of Go is that a channel is a first-class value that can be allocated and passed around like any other. A common use of this property is to implement safe, parallel demultiplexing."}),"\n",(0,i.jsx)(n.p,{children:"Go\u8bed\u8a00\u6700\u91cd\u8981\u7684\u7279\u6027\u4e4b\u4e00\u662f\uff0c\u901a\u9053\u662f\u4e00\u79cd\u4e00\u7b49\u516c\u6c11\u7684\u503c\uff0c\u53ef\u4ee5\u50cf\u5176\u4ed6\u4efb\u4f55\u503c\u4e00\u6837\u88ab\u5206\u914d\u548c\u4f20\u9012\u3002\u8fd9\u79cd\u7279\u6027\u901a\u5e38\u88ab\u7528\u6765\u5b9e\u73b0\u5b89\u5168\u3001\u5e76\u884c\u7684\u591a\u8def\u5206\u89e3\u3002"}),"\n",(0,i.jsx)(n.p,{children:"In the example in the previous section, handle was an idealized handler for a request but we didn't define the type it was handling. If that type includes a channel on which to reply, each client can provide its own path for the answer. Here's a schematic definition of type Request."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u4e0a\u4e00\u8282\u7684\u4f8b\u5b50\u4e2d\uff0chandle \u662f\u4e2a\u975e\u5e38\u7406\u60f3\u5316\u7684\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\uff0c \u4f46\u6211\u4eec\u5e76\u672a\u5b9a\u4e49\u5b83\u6240\u5904\u7406\u7684\u8bf7\u6c42\u7c7b\u578b\u3002\u82e5\u8be5\u7c7b\u578b\u5305\u542b\u4e00\u4e2a\u53ef\u7528\u4e8e\u56de\u590d\u7684\u4fe1\u9053\uff0c \u90a3\u4e48\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u90fd\u80fd\u4e3a\u5176\u56de\u5e94\u63d0\u4f9b\u81ea\u5df1\u7684\u8def\u5f84\u3002\u4ee5\u4e0b\u4e3a Request \u7c7b\u578b\u7684\u5927\u6982\u5b9a\u4e49\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Request struct {\n\targs        []int\n\tf           func([]int) int\n\tresultChan  chan int\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The client provides a function and its arguments, as well as a channel inside the request object on which to receive the answer."}),"\n",(0,i.jsx)(n.p,{children:"\u5ba2\u6237\u7aef\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u53ca\u5176\u5b9e\u53c2\uff0c\u6b64\u5916\u5728\u8bf7\u6c42\u5bf9\u8c61\u4e2d\u8fd8\u6709\u4e2a\u63a5\u6536\u5e94\u7b54\u7684\u4fe1\u9053\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func sum(a []int) (s int) {\n\tfor _, v := range a {\n\t\ts += v\n\t}\n\treturn\n}\n\nrequest := &Request{[]int{3, 4, 5}, sum, make(chan int)}\n// Send request\nclientRequests <- request\n// Wait for response.\nfmt.Printf("answer: %d\\n", <-request.resultChan)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func sum(a []int) (s int) {\n\tfor _, v := range a {\n\t\ts += v\n\t}\n\treturn\n}\n\nrequest := &Request{[]int{3, 4, 5}, sum, make(chan int)}\n// \u53d1\u9001\u8bf7\u6c42\nclientRequests <- request\n// \u7b49\u5f85\u56de\u5e94\nfmt.Printf("answer: %d\\n", <-request.resultChan)\n'})}),"\n",(0,i.jsx)(n.p,{children:"On the server side, the handler function is the only thing that changes."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u670d\u52a1\u7aef\uff0c\u53ea\u9700\u6539\u52a8 handler \u51fd\u6570\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func handle(queue chan *Request) {\n\tfor req := range queue {\n\t\treq.resultChan <- req.f(req.args)\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"There's clearly a lot more to do to make it realistic, but this code is a framework for a rate-limited, parallel, non-blocking RPC system, and there's not a mutex in sight."}),"\n",(0,i.jsx)(n.p,{children:"\u8981\u4f7f\u5176\u5b9e\u9645\u53ef\u7528\u8fd8\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4ec5\u80fd\u5b9e\u73b0\u4e00\u4e2a\u6709\u901f\u7387\u9650\u5236\u3001\u5e76\u884c\u3001\u975e\u963b\u585e\u7684 RPC \u7cfb\u7edf\u7684\u6846\u67b6\uff0c\u800c\u4e14\u5b83\u5e76\u4e0d\u5305\u542b\u4e92\u65a5\u9501\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"parallelization",children:"Parallelization"}),"\n",(0,i.jsx)(n.h3,{id:"\u5e76\u884c\u5316",children:"\u5e76\u884c\u5316"}),"\n",(0,i.jsx)(n.p,{children:"Another application of these ideas is to parallelize a calculation across multiple CPU cores. If the calculation can be broken into separate pieces that can execute independently, it can be parallelized, with a channel to signal when each piece completes."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e9b\u8bbe\u8ba1\u7684\u53e6\u4e00\u4e2a\u5e94\u7528\u662f\u5728\u591a CPU \u6838\u5fc3\u4e0a\u5b9e\u73b0\u5e76\u884c\u8ba1\u7b97\u3002\u5982\u679c\u8ba1\u7b97\u8fc7\u7a0b\u80fd\u591f\u88ab\u5206\u4e3a\u51e0\u5757\u53ef\u72ec\u7acb\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u5b83\u5c31\u53ef\u4ee5\u5728\u6bcf\u5757\u8ba1\u7b97\u7ed3\u675f\u65f6\u5411\u4fe1\u9053\u53d1\u9001\u4fe1\u53f7\uff0c\u4ece\u800c\u5b9e\u73b0\u5e76\u884c\u5904\u7406\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Let's say we have an expensive operation to perform on a vector of items, and that the value of the operation on each item is independent, as in this idealized example."}),"\n",(0,i.jsx)(n.p,{children:"\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u7406\u60f3\u5316\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u5728\u5bf9\u4e00\u7cfb\u5217\u5411\u91cf\u9879\u8fdb\u884c\u6781\u8017\u8d44\u6e90\u7684\u64cd\u4f5c\uff0c \u800c\u6bcf\u4e2a\u9879\u7684\u503c\u8ba1\u7b97\u662f\u5b8c\u5168\u72ec\u7acb\u7684\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Vector []float64\n\n// Apply the operation to v[i], v[i+1] ... up to v[n-1].\nfunc (v Vector) DoSome(i, n int, u Vector, c chan int) {\n\tfor ; i < n; i++ {\n\t\tv[i] += u.Op(v[i])\n\t}\n\tc <- 1    // signal that this piece is done\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Vector []float64\n\n// \u5c06\u6b64\u64cd\u4f5c\u5e94\u7528\u81f3 v[i], v[i+1] ... \u76f4\u5230 v[n-1]\nfunc (v Vector) DoSome(i, n int, u Vector, c chan int) {\n\tfor ; i < n; i++ {\n\t\tv[i] += u.Op(v[i])\n\t}\n\tc <- 1    // \u53d1\u4fe1\u53f7\u8868\u793a\u8fd9\u4e00\u5757\u8ba1\u7b97\u5b8c\u6210\u3002\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We launch the pieces independently in a loop, one per CPU. They can complete in any order but it doesn't matter; we just count the completion signals by draining the channel after launching all the goroutines."}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u5728\u5faa\u73af\u4e2d\u542f\u52a8\u4e86\u72ec\u7acb\u7684\u5904\u7406\u5757\uff0c\u6bcf\u4e2a CPU \u5c06\u6267\u884c\u4e00\u4e2a\u5904\u7406\u3002 \u5b83\u4eec\u6709\u53ef\u80fd\u4ee5\u4e71\u5e8f\u7684\u5f62\u5f0f\u5b8c\u6210\u5e76\u7ed3\u675f\uff0c\u4f46\u8fd9\u6ca1\u6709\u5173\u7cfb\uff1b \u6211\u4eec\u53ea\u9700\u5728\u6240\u6709 goroutine \u5f00\u59cb\u540e\u63a5\u6536\uff0c\u5e76\u7edf\u8ba1\u4fe1\u9053\u4e2d\u7684\u5b8c\u6210\u4fe1\u53f7\u5373\u53ef\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"const NCPU = 4  // number of CPU cores\n\nfunc (v Vector) DoAll(u Vector) {\n\tc := make(chan int, NCPU)  // Buffering optional but sensible.\n\tfor i := 0; i < NCPU; i++ {\n\t\tgo v.DoSome(i*len(v)/NCPU, (i+1)*len(v)/NCPU, u, c)\n\t}\n\t// Drain the channel.\n\tfor i := 0; i < NCPU; i++ {\n\t\t<-c    // wait for one task to complete\n\t}\n\t// All done.\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"const NCPU = 4  // CPU \u6838\u5fc3\u6570\n\nfunc (v Vector) DoAll(u Vector) {\n\tc := make(chan int, NCPU)  // \u7f13\u51b2\u533a\u662f\u53ef\u9009\u7684\uff0c\u4f46\u660e\u663e\u7528\u4e0a\u66f4\u597d\n\tfor i := 0; i < NCPU; i++ {\n\t\tgo v.DoSome(i*len(v)/NCPU, (i+1)*len(v)/NCPU, u, c)\n\t}\n\t// \u6392\u7a7a\u4fe1\u9053\u3002\n\tfor i := 0; i < NCPU; i++ {\n\t\t<-c    // \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\n\t}\n\t// \u4e00\u5207\u5b8c\u6210\u3002\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The current implementation of the Go runtime will not parallelize this code by default. It dedicates only a single core to user-level processing. An arbitrary number of goroutines can be blocked in system calls, but by default only one can be executing user-level code at any time. It should be smarter and one day it will be smarter, but until it is if you want CPU parallelism you must tell the run-time how many goroutines you want executing code simultaneously. There are two related ways to do this. Either run your job with environment variable GOMAXPROCS set to the number of cores to use or import the runtime package and call runtime.GOMAXPROCS(NCPU). A helpful value might be runtime.NumCPU(), which reports the number of logical CPUs on the local machine. Again, this requirement is expected to be retired as the scheduling and run-time improve."}),"\n",(0,i.jsx)(n.p,{children:"\u76ee\u524d Go \u8fd0\u884c\u65f6\u7684\u5b9e\u73b0\u9ed8\u8ba4\u5e76\u4e0d\u4f1a\u5e76\u884c\u6267\u884c\u4ee3\u7801\uff0c\u5b83\u53ea\u4e3a\u7528\u6237\u5c42\u4ee3\u7801\u63d0\u4f9b\u5355\u4e00\u7684\u5904\u7406\u6838\u5fc3\u3002 \u4efb\u610f\u6570\u91cf\u7684 goroutine \u90fd\u53ef\u80fd\u5728\u7cfb\u7edf\u8c03\u7528\u4e2d\u88ab\u963b\u585e\uff0c\u800c\u5728\u4efb\u610f\u65f6\u523b\u9ed8\u8ba4\u53ea\u6709\u4e00\u4e2a\u4f1a\u6267\u884c\u7528\u6237\u5c42\u4ee3\u7801\u3002 \u5b83\u5e94\u5f53\u53d8\u5f97\u66f4\u667a\u80fd\uff0c\u800c\u4e14\u5b83\u5c06\u6765\u80af\u5b9a\u4f1a\u53d8\u5f97\u66f4\u667a\u80fd\u3002\u4f46\u73b0\u5728\uff0c\u82e5\u4f60\u5e0c\u671b CPU \u5e76\u884c\u6267\u884c\uff0c \u5c31\u5fc5\u987b\u544a\u8bc9\u8fd0\u884c\u65f6\u4f60\u5e0c\u671b\u540c\u65f6\u6709\u591a\u5c11 goroutine \u80fd\u6267\u884c\u4ee3\u7801\u3002\u6709\u4e24\u79cd\u9014\u5f84\u53ef\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u8981\u4e48 \u5728\u8fd0\u884c\u4f60\u7684\u5de5\u4f5c\u65f6\u5c06 GOMAXPROCS \u73af\u5883\u53d8\u91cf\u8bbe\u4e3a\u4f60\u8981\u4f7f\u7528\u7684\u6838\u5fc3\u6570\uff0c \u8981\u4e48\u5bfc\u5165 runtime \u5305\u5e76\u8c03\u7528 runtime.GOMAXPROCS(NCPU)\u3002 runtime.NumCPU() \u7684\u503c\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u5b83\u4f1a\u8fd4\u56de\u5f53\u524d\u673a\u5668\u7684\u903b\u8f91 CPU \u6838\u5fc3\u6570\u3002 \u5f53\u7136\uff0c\u968f\u7740\u8c03\u5ea6\u7b97\u6cd5\u548c\u8fd0\u884c\u65f6\u7684\u6539\u8fdb\uff0c\u5c06\u6765\u4f1a\u4e0d\u518d\u9700\u8981\u8fd9\u79cd\u65b9\u6cd5\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["Be sure not to confuse the ideas of concurrency\u2014structuring a program as independently executing components\u2014and parallelism\u2014executing calculations in parallel for efficiency on multiple CPUs. Although the concurrency features of Go can make some problems easy to structure as parallel computations, Go is a concurrent language, not a parallel one, and not all parallelization problems fit Go's model. For a discussion of the distinction, see the talk cited in ",(0,i.jsx)(n.a,{href:"https://blog.golang.org/2013/01/concurrency-is-not-parallelism.html",children:"this blog post"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6ce8\u610f\u4e0d\u8981\u6df7\u6dc6\u5e76\u53d1\u548c\u5e76\u884c\u7684\u6982\u5ff5\uff1a\u5e76\u53d1\u662f\u7528\u53ef\u72ec\u7acb\u6267\u884c\u7684\u7ec4\u4ef6\u6784\u9020\u7a0b\u5e8f\u7684\u65b9\u6cd5\uff0c \u800c\u5e76\u884c\u5219\u662f\u4e3a\u4e86\u6548\u7387\u5728\u591a CPU \u4e0a\u5e73\u884c\u5730\u8fdb\u884c\u8ba1\u7b97\u3002\u5c3d\u7ba1 Go \u7684\u5e76\u53d1\u7279\u6027\u80fd\u591f\u8ba9\u67d0\u4e9b\u95ee\u9898\u66f4\u6613\u6784\u9020\u6210\u5e76\u884c\u8ba1\u7b97\uff0c \u4f46 Go \u4ecd\u7136\u662f\u79cd\u5e76\u53d1\u800c\u975e\u5e76\u884c\u7684\u8bed\u8a00\uff0c\u4e14 Go \u7684\u6a21\u578b\u5e76\u4e0d\u9002\u5408\u6240\u6709\u7684\u5e76\u884c\u95ee\u9898\u3002 \u5173\u4e8e\u5176\u4e2d\u533a\u522b\u7684\u8ba8\u8bba\uff0c\u89c1 ",(0,i.jsx)(n.a,{href:"https://blog.golang.org/2013/01/concurrency-is-not-parallelism.html",children:"\u6b64\u535a\u6587"}),"\u3002"]}),"\n",(0,i.jsx)(n.h3,{id:"a-leaky-buffer",children:"A leaky buffer"}),"\n",(0,i.jsx)(n.h3,{id:"\u6f0f\u6876\u6a21\u578b",children:"\u6f0f\u6876\u6a21\u578b"}),"\n",(0,i.jsx)(n.p,{children:"The tools of concurrent programming can even make non-concurrent ideas easier to express. Here's an example abstracted from an RPC package. The client goroutine loops receiving data from some source, perhaps a network. To avoid allocating and freeing buffers, it keeps a free list, and uses a buffered channel to represent it. If the channel is empty, a new buffer gets allocated. Once the message buffer is ready, it's sent to the server on serverChan."}),"\n",(0,i.jsx)(n.p,{children:"\u5e76\u53d1\u7f16\u7a0b\u7684\u5de5\u5177\u53ef\u4ee5\u7528\u6765\u5f88\u5bb9\u6613\u7684\u8868\u8fbe\u4e00\u4e9b\u5e76\u975e\u662f\u5e76\u53d1\u7684\u601d\u60f3\u3002\u8fd9\u91cc\u6709\u4e2a\u63d0\u53d6\u81ea RPC \u5305\u7684\u4f8b\u5b50\u3002 \u5ba2\u6237\u7aef Go \u7a0b\u4ece\u67d0\u4e9b\u6765\u6e90\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u4e2d\u5faa\u73af\u63a5\u6536\u6570\u636e\u3002\u4e3a\u907f\u514d\u5206\u914d\u548c\u91ca\u653e\u7f13\u51b2\u533a\uff0c \u5b83\u4fdd\u5b58\u4e86\u4e00\u4e2a\u7a7a\u95f2\u5217\u8868\uff0c\u4f7f\u7528\u4e00\u4e2a\u5e26\u7f13\u51b2\u4fe1\u9053\u8868\u793a\u3002\u82e5\u4fe1\u9053\u4e3a\u7a7a\uff0c\u5c31\u4f1a\u5206\u914d\u65b0\u7684\u7f13\u51b2\u533a\u3002 \u4e00\u65e6\u6d88\u606f\u7f13\u51b2\u533a\u5c31\u7eea\uff0c\u5b83\u5c06\u901a\u8fc7 serverChan \u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var freeList = make(chan *Buffer, 100)\nvar serverChan = make(chan *Buffer)\n\nfunc client() {\n\tfor {\n\t\tvar b *Buffer\n\t\t// Grab a buffer if available; allocate if not.\n\t\tselect {\n\t\tcase b = <-freeList:\n\t\t\t// Got one; nothing more to do.\n\t\tdefault:\n\t\t\t// None free, so allocate a new one.\n\t\t\tb = new(Buffer)\n\t\t}\n\t\tload(b)              // Read next message from the net.\n\t\tserverChan <- b      // Send to server.\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var freeList = make(chan *Buffer, 100)\nvar serverChan = make(chan *Buffer)\n\nfunc client() {\n\tfor {\n\t\tvar b *Buffer\n\t\t// \u82e5\u7f13\u51b2\u533a\u53ef\u7528\u5c31\u7528\u5b83\uff0c\u4e0d\u53ef\u7528\u5c31\u5206\u914d\u4e2a\u65b0\u7684\u3002\n\t\tselect {\n\t\tcase b = <-freeList:\n\t\t\t// \u83b7\u53d6\u4e00\u4e2a\uff0c\u4e0d\u505a\u522b\u7684\u3002\n\t\tdefault:\n\t\t\t// \u975e\u7a7a\u95f2\uff0c\u56e0\u6b64\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u3002\n\t\t\tb = new(Buffer)\n\t\t}\n\t\tload(b)              // \u4ece\u7f51\u7edc\u4e2d\u8bfb\u53d6\u4e0b\u4e00\u6761\u6d88\u606f\u3002\n\t\tserverChan <- b   // \u53d1\u9001\u81f3\u670d\u52a1\u5668\u3002\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The server loop receives each message from the client, processes it, and returns the buffer to the free list."}),"\n",(0,i.jsx)(n.p,{children:"\u670d\u52a1\u5668\u4ece\u5ba2\u6237\u7aef\u5faa\u73af\u63a5\u6536\u6bcf\u4e2a\u6d88\u606f\uff0c\u5904\u7406\u5b83\u4eec\uff0c\u5e76\u5c06\u7f13\u51b2\u533a\u8fd4\u56de\u7ed9\u7a7a\u95f2\u5217\u8868\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func server() {\n\tfor {\n\t\tb := <-serverChan    // Wait for work.\n\t\tprocess(b)\n\t\t// Reuse buffer if there's room.\n\t\tselect {\n\t\tcase freeList <- b:\n\t\t\t// Buffer on free list; nothing more to do.\n\t\tdefault:\n\t\t\t// Free list full, just carry on.\n\t\t}\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func server() {\n\tfor {\n\t\tb := <-serverChan    // \u7b49\u5f85\u5de5\u4f5c\u3002\n\t\tprocess(b)\n\t\t// \u82e5\u7f13\u51b2\u533a\u6709\u7a7a\u95f4\u5c31\u91cd\u7528\u5b83\u3002\n\t\tselect {\n\t\tcase freeList <- b:\n\t\t\t// \u5c06\u7f13\u51b2\u533a\u653e\u5927\u7a7a\u95f2\u5217\u8868\u4e2d\uff0c\u4e0d\u505a\u522b\u7684\u3002\n\t\tdefault:\n\t\t\t// \u7a7a\u95f2\u5217\u8868\u5df2\u6ee1\uff0c\u4fdd\u6301\u5c31\u597d\u3002\n\t\t}\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The client attempts to retrieve a buffer from freeList; if none is available, it allocates a fresh one. The server's send to freeList puts b back on the free list unless the list is full, in which case the buffer is dropped on the floor to be reclaimed by the garbage collector. (The default clauses in the select statements execute when no other case is ready, meaning that the selects never block.) This implementation builds a leaky bucket free list in just a few lines, relying on the buffered channel and the garbage collector for bookkeeping."}),"\n",(0,i.jsx)(n.p,{children:"\u5ba2\u6237\u7aef\u8bd5\u56fe\u4ece freeList \u4e2d\u83b7\u53d6\u7f13\u51b2\u533a\uff1b\u82e5\u6ca1\u6709\u7f13\u51b2\u533a\u53ef\u7528\uff0c \u5b83\u5c31\u5c06\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u3002\u670d\u52a1\u5668\u5c06 b \u653e\u56de\u7a7a\u95f2\u5217\u8868 freeList \u4e2d\u76f4\u5230\u5217\u8868\u5df2\u6ee1\uff0c\u6b64\u65f6\u7f13\u51b2\u533a\u5c06\u88ab\u4e22\u5f03\uff0c\u5e76\u88ab\u5783\u573e\u56de\u6536\u5668\u56de\u6536\u3002\uff08select \u8bed\u53e5\u4e2d\u7684 default \u5b50\u53e5\u5728\u6ca1\u6709\u6761\u4ef6\u7b26\u5408\u65f6\u6267\u884c\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740 selects \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u963b\u585e\u3002\uff09\u4f9d\u9760\u5e26\u7f13\u51b2\u7684\u4fe1\u9053\u548c\u5783\u573e\u56de\u6536\u5668\u7684\u8bb0\u5f55\uff0c \u6211\u4eec\u4ec5\u7528\u77ed\u77ed\u51e0\u884c\u4ee3\u7801\u5c31\u6784\u5efa\u4e86\u4e00\u4e2a\u7a7a\u95f2\u5217\u8868\u6f0f\u6876\u6a21\u578b\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"errors",children:"Errors"}),"\n",(0,i.jsx)(n.h2,{id:"\u9519\u8bef",children:"\u9519\u8bef"}),"\n",(0,i.jsx)(n.p,{children:"Library routines must often return some sort of error indication to the caller. As mentioned earlier, Go's multivalue return makes it easy to return a detailed error description alongside the normal return value. It is good style to use this feature to provide detailed error information. For example, as we'll see, os.Open doesn't just return a nil pointer on failure, it also returns an error value that describes what went wrong."}),"\n",(0,i.jsx)(n.p,{children:"\u5e93\u4f8b\u7a0b\u901a\u5e38\u9700\u8981\u5411\u8c03\u7528\u8005\u8fd4\u56de\u67d0\u79cd\u7c7b\u578b\u7684\u9519\u8bef\u63d0\u793a\u3002\u4e4b\u524d\u63d0\u5230\u8fc7\uff0cGo \u8bed\u8a00\u7684\u591a\u503c\u8fd4\u56de\u7279\u6027\uff0c \u4f7f\u5f97\u5b83\u5728\u8fd4\u56de\u5e38\u89c4\u7684\u503c\u65f6\uff0c\u8fd8\u80fd\u8f7b\u677e\u5730\u8fd4\u56de\u8be6\u7ec6\u7684\u9519\u8bef\u63cf\u8ff0\u3002\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u6765\u63d0\u4f9b\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f\u662f\u4e00\u79cd\u826f\u597d\u7684\u98ce\u683c\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c os.Open \u5728\u5931\u8d25\u65f6\u4e0d\u4ec5\u8fd4\u56de\u4e00\u4e2a nil \u6307\u9488\uff0c\u8fd8\u8fd4\u56de\u4e00\u4e2a\u8be6\u7ec6\u63cf\u8ff0\u9519\u8bef\u7684 error \u503c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"By convention, errors have type error, a simple built-in interface."}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u7167\u7ea6\u5b9a\uff0c\u9519\u8bef\u7684\u7c7b\u578b\u901a\u5e38\u4e3a error\uff0c\u8fd9\u662f\u4e00\u4e2a\u5185\u5efa\u7684\u7b80\u5355\u63a5\u53e3\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type error interface {\n\tError() string\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A library writer is free to implement this interface with a richer model under the covers, making it possible not only to see the error but also to provide some context. As mentioned, alongside the usual ",(0,i.jsx)(n.code,{children:"*os.File"})," return value, os.Open also returns an error value. If the file is opened successfully, the error will be nil, but when there is a problem, it will hold an os.PathError:"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5e93\u7684\u7f16\u5199\u8005\u901a\u8fc7\u66f4\u4e30\u5bcc\u7684\u5e95\u5c42\u6a21\u578b\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u8fd9\u6837\u4e0d\u4ec5\u80fd\u770b\u89c1\u9519\u8bef\uff0c\u8fd8\u80fd\u63d0\u4f9b\u4e00\u4e9b\u4e0a\u4e0b\u6587\u3002\u524d\u5df2\u8ff0\u53ca\uff0c\u9664\u4e86\u901a\u5e38\u7684 ",(0,i.jsx)(n.code,{children:"*os.File"})," \u8fd4\u56de\u503c\uff0c os.Open \u8fd8\u8fd4\u56de\u4e00\u4e2a error \u503c\u3002\u82e5\u8be5\u6587\u4ef6\u88ab\u6210\u529f\u6253\u5f00\uff0c error \u503c\u5c31\u662f nil \uff0c\u800c\u5982\u679c\u51fa\u4e86\u95ee\u9898\uff0c\u8be5\u503c\u5c31\u662f\u4e00\u4e2a os.PathError\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// PathError records an error and the operation and\n// file path that caused it.\ntype PathError struct {\n\tOp string    // "open", "unlink", etc.\n\tPath string  // The associated file.\n\tErr error    // Returned by the system call.\n}\n\nfunc (e *PathError) Error() string {\n\treturn e.Op + " " + e.Path + ": " + e.Err.Error()\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// PathError \u8bb0\u5f55\u4e00\u4e2a\u9519\u8bef\u4ee5\u53ca\u4ea7\u751f\u8be5\u9519\u8bef\u7684\u8def\u5f84\u548c\u64cd\u4f5c\u3002\ntype PathError struct {\n\tOp string    // "open"\u3001"unlink" \u7b49\u7b49\u3002\n\tPath string  // \u76f8\u5173\u8054\u7684\u6587\u4ef6\u3002\n\tErr error    // \u7531\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u3002\n}\n\nfunc (e *PathError) Error() string {\n\treturn e.Op + " " + e.Path + ": " + e.Err.Error()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"PathError's Error generates a string like this:"}),"\n",(0,i.jsx)(n.p,{children:"PathError \u7684 Error \u4f1a\u751f\u6210\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"open /etc/passwx: no such file or directory\n"})}),"\n",(0,i.jsx)(n.p,{children:'Such an error, which includes the problematic file name, the operation, and the operating system error it triggered, is useful even if printed far from the call that caused it; it is much more informative than the plain "no such file or directory".'}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u79cd\u9519\u8bef\u5305\u542b\u4e86\u51fa\u9519\u7684\u6587\u4ef6\u540d\u3001\u64cd\u4f5c\u548c\u89e6\u53d1\u7684\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\uff0c\u5373\u4fbf\u5728\u4ea7\u751f\u8be5\u9519\u8bef\u7684\u8c03\u7528\u548c\u8f93\u51fa\u7684\u9519\u8bef\u4fe1\u606f\u76f8\u8ddd\u751a\u8fdc\u65f6\uff0c\u5b83\u4e5f\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u8fd9\u6bd4\u82cd\u767d\u7684 \u201c\u4e0d\u5b58\u5728\u8be5\u6587\u4ef6\u6216\u76ee\u5f55\u201d \u66f4\u5177\u8bf4\u660e\u6027\u3002"}),"\n",(0,i.jsx)(n.p,{children:'When feasible, error strings should identify their origin, such as by having a prefix naming the operation or package that generated the error. For example, in package image, the string representation for a decoding error due to an unknown format is "image: unknown format".'}),"\n",(0,i.jsx)(n.p,{children:"\u9519\u8bef\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u5730\u6307\u660e\u5b83\u4eec\u7684\u6765\u6e90\uff0c\u4f8b\u5982\u4ea7\u751f\u8be5\u9519\u8bef\u7684\u5305\u540d\u524d\u7f00\u3002\u4f8b\u5982\u5728 image \u5305\u4e2d\uff0c\u7531\u4e8e\u672a\u77e5\u683c\u5f0f\u5bfc\u81f4\u89e3\u7801\u9519\u8bef\u7684\u5b57\u7b26\u4e32\u4e3a \u201cimage: unknown format\u201d\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Callers that care about the precise error details can use a type switch or a type assertion to look for specific errors and extract details. For PathErrors this might include examining the internal Err field for recoverable failures."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5\u8c03\u7528\u8005\u5173\u5fc3\u9519\u8bef\u7684\u5b8c\u6574\u7ec6\u8282\uff0c\u53ef\u4f7f\u7528\u7c7b\u578b\u9009\u62e9\u6216\u8005\u7c7b\u578b\u65ad\u8a00\u6765\u67e5\u770b\u7279\u5b9a\u9519\u8bef\uff0c\u5e76\u62bd\u53d6\u5176\u7ec6\u8282\u3002 \u5bf9\u4e8e PathErrors\uff0c\u5b83\u5e94\u8be5\u8fd8\u5305\u542b\u68c0\u67e5\u5185\u90e8\u7684 Err \u5b57\u6bb5\u4ee5\u8fdb\u884c\u53ef\u80fd\u7684\u9519\u8bef\u6062\u590d\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for try := 0; try < 2; try++ {\n\tfile, err = os.Create(filename)\n\tif err == nil {\n\t\treturn\n\t}\n\tif e, ok := err.(*os.PathError); ok && e.Err == syscall.ENOSPC {\n\t\tdeleteTempFiles()  // Recover some space.\n\t\tcontinue\n\t}\n\treturn\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for try := 0; try < 2; try++ {\n\tfile, err = os.Create(filename)\n\tif err == nil {\n\t\treturn\n\t}\n\tif e, ok := err.(*os.PathError); ok && e.Err == syscall.ENOSPC {\n\t\tdeleteTempFiles()  // \u6062\u590d\u4e00\u4e9b\u7a7a\u95f4\u3002\n\t\tcontinue\n\t}\n\treturn\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The second if statement here is another ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#interface_conversions",children:"type assertion"}),". If it fails, ok will be false, and e will be nil. If it succeeds, ok will be true, which means the error was of type ",(0,i.jsx)(n.code,{children:"*os.PathError"}),", and then so is e, which we can examine for more information about the error."]}),"\n",(0,i.jsxs)(n.p,{children:["\u8fd9\u91cc\u7684\u7b2c\u4e8c\u6761 if \u662f\u53e6\u4e00\u79cd ",(0,i.jsx)(n.a,{href:"https://go-zh.org/doc/effective_go.html#interface_conversions",children:"\u7c7b\u578b\u65ad\u8a00"}),"\u3002\u82e5\u5b83\u5931\u8d25\uff0c ok \u5c06\u4e3a false\uff0c\u800c e \u5219\u4e3a nil. \u82e5\u5b83\u6210\u529f\uff0cok \u5c06\u4e3a true\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u9519\u8bef\u5c5e\u4e8e ",(0,i.jsx)(n.code,{children:"*os.PathError"})," \u7c7b\u578b\uff0c\u800c e \u80fd\u591f\u68c0\u6d4b\u5173\u4e8e\u8be5\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"panic",children:"Panic"}),"\n",(0,i.jsx)(n.h2,{id:"panic-1",children:"Panic"}),"\n",(0,i.jsx)(n.p,{children:"The usual way to report an error to a caller is to return an error as an extra return value. The canonical Read method is a well-known instance; it returns a byte count and an error. But what if the error is unrecoverable? Sometimes the program simply cannot continue."}),"\n",(0,i.jsx)(n.p,{children:"\u5411\u8c03\u7528\u8005\u62a5\u544a\u9519\u8bef\u7684\u4e00\u822c\u65b9\u5f0f\u5c31\u662f\u5c06 error \u4f5c\u4e3a\u989d\u5916\u7684\u503c\u8fd4\u56de\u3002 \u6807\u51c6\u7684 Read \u65b9\u6cd5\u5c31\u662f\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u5b9e\u4f8b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282\u8ba1\u6570\u548c\u4e00\u4e2a error\u3002\u4f46\u5982\u679c\u9519\u8bef\u662f\u4e0d\u53ef\u6062\u590d\u7684\u5462\uff1f\u6709\u65f6\u7a0b\u5e8f\u5c31\u662f\u4e0d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"For this purpose, there is a built-in function panic that in effect creates a run-time error that will stop the program (but see the next section). The function takes a single argument of arbitrary type\u2014often a string\u2014to be printed as the program dies. It's also a way to indicate that something impossible has happened, such as exiting an infinite loop."}),"\n",(0,i.jsx)(n.p,{children:"\u4e3a\u6b64\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u5185\u5efa\u7684 panic \u51fd\u6570\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\u5e76\u7ec8\u6b62\u7a0b\u5e8f \uff08\u4f46\u8bf7\u7ee7\u7eed\u770b\u4e0b\u4e00\u8282\uff09\u3002\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4efb\u610f\u7c7b\u578b\u7684\u5b9e\u53c2\uff08\u4e00\u822c\u4e3a\u5b57\u7b26\u4e32\uff09\uff0c\u5e76\u5728\u7a0b\u5e8f\u7ec8\u6b62\u65f6\u6253\u5370\u3002 \u5b83\u8fd8\u80fd\u8868\u660e\u53d1\u751f\u4e86\u610f\u6599\u4e4b\u5916\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u4ece\u65e0\u9650\u5faa\u73af\u4e2d\u9000\u51fa\u4e86\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// A toy implementation of cube root using Newton\'s method.\nfunc CubeRoot(x float64) float64 {\n\tz := x/3   // Arbitrary initial value\n\tfor i := 0; i < 1e6; i++ {\n\t\tprevz := z\n\t\tz -= (z*z*z-x) / (3*z*z)\n\t\tif veryClose(z, prevz) {\n\t\t\treturn z\n\t\t}\n\t}\n\t// A million iterations has not converged; something is wrong.\n\tpanic(fmt.Sprintf("CubeRoot(%g) did not converge", x))\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// \u7528\u725b\u987f\u6cd5\u8ba1\u7b97\u7acb\u65b9\u6839\u7684\u4e00\u4e2a\u73a9\u5177\u5b9e\u73b0\u3002\nfunc CubeRoot(x float64) float64 {\n\tz := x/3   // \u4efb\u610f\u521d\u59cb\u503c\n\tfor i := 0; i < 1e6; i++ {\n\t\tprevz := z\n\t\tz -= (z*z*z-x) / (3*z*z)\n\t\tif veryClose(z, prevz) {\n\t\t\treturn z\n\t\t}\n\t}\n\t// \u4e00\u767e\u4e07\u6b21\u8fed\u4ee3\u5e76\u672a\u6536\u655b\uff0c\u4e8b\u60c5\u51fa\u9519\u4e86\u3002\n\tpanic(fmt.Sprintf("CubeRoot(%g) did not converge", x))\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This is only an example but real library functions should avoid panic. If the problem can be masked or worked around, it's always better to let things continue to run rather than taking down the whole program. One possible counterexample is during initialization: if the library truly cannot set itself up, it might be reasonable to panic, so to speak."}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4ec5\u4ec5\u662f\u4e2a\u793a\u4f8b\uff0c\u5b9e\u9645\u7684\u5e93\u51fd\u6570\u5e94\u907f\u514d panic\u3002\u82e5\u95ee\u9898\u53ef\u4ee5\u88ab\u5c4f\u853d\u6216\u89e3\u51b3\uff0c \u6700\u597d\u5c31\u662f\u8ba9\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\u800c\u4e0d\u662f\u7ec8\u6b62\u6574\u4e2a\u7a0b\u5e8f\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u53cd\u4f8b\u5c31\u662f\u521d\u59cb\u5316\uff1a \u82e5\u67d0\u4e2a\u5e93\u771f\u7684\u4e0d\u80fd\u8ba9\u81ea\u5df1\u5de5\u4f5c\uff0c\u4e14\u6709\u8db3\u591f\u7406\u7531\u4ea7\u751f Panic\uff0c\u90a3\u5c31\u7531\u5b83\u53bb\u5427\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var user = os.Getenv("USER")\n\nfunc init() {\n\tif user == "" {\n\t\tpanic("no value for $USER")\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"recover",children:"Recover"}),"\n",(0,i.jsx)(n.h2,{id:"\u6062\u590d",children:"\u6062\u590d"}),"\n",(0,i.jsx)(n.p,{children:"When panic is called, including implicitly for run-time errors such as indexing a slice out of bounds or failing a type assertion, it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way. If that unwinding reaches the top of the goroutine's stack, the program dies. However, it is possible to use the built-in function recover to regain control of the goroutine and resume normal execution."}),"\n",(0,i.jsx)(n.p,{children:"\u5f53 panic \u88ab\u8c03\u7528\u540e\uff08\u5305\u62ec\u4e0d\u660e\u786e\u7684\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u4f8b\u5982\u5207\u7247\u68c0\u7d22\u8d8a\u754c\u6216\u7c7b\u578b\u65ad\u8a00\u5931\u8d25\uff09\uff0c \u7a0b\u5e8f\u5c06\u7acb\u523b\u7ec8\u6b62\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5f00\u59cb\u56de\u6eaf goroutine \u7684\u6808\uff0c\u8fd0\u884c\u4efb\u4f55\u88ab\u63a8\u8fdf\u7684\u51fd\u6570\u3002 \u82e5\u56de\u6eaf\u5230\u8fbe goroutine \u6808\u7684\u9876\u7aef\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u7ec8\u6b62\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u7528\u5185\u5efa\u7684 recover \u51fd\u6570\u6765\u91cd\u65b0\u53d6\u56de goroutine \u7684\u63a7\u5236\u6743\u9650\u5e76\u4f7f\u5176\u6062\u590d\u6b63\u5e38\u6267\u884c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"A call to recover stops the unwinding and returns the argument passed to panic. Because the only code that runs while unwinding is inside deferred functions, recover is only useful inside deferred functions."}),"\n",(0,i.jsx)(n.p,{children:"\u8c03\u7528 recover \u5c06\u505c\u6b62\u56de\u6eaf\u8fc7\u7a0b\uff0c\u5e76\u8fd4\u56de\u4f20\u5165 panic \u7684\u5b9e\u53c2\u3002 \u7531\u4e8e\u5728\u56de\u6eaf\u65f6\u53ea\u6709\u88ab\u63a8\u8fdf\u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u5728\u8fd0\u884c\uff0c\u56e0\u6b64 recover \u53ea\u80fd\u5728\u88ab\u63a8\u8fdf\u7684\u51fd\u6570\u4e2d\u624d\u6709\u6548\u3002"}),"\n",(0,i.jsx)(n.p,{children:"One application of recover is to shut down a failing goroutine inside a server without killing the other executing goroutines."}),"\n",(0,i.jsx)(n.p,{children:"recover \u7684\u4e00\u4e2a\u5e94\u7528\u5c31\u662f\u5728\u670d\u52a1\u5668\u4e2d\u7ec8\u6b62\u5931\u8d25\u7684 goroutine \u800c\u65e0\u9700\u6740\u6b7b\u5176\u5b83\u6b63\u5728\u6267\u884c\u7684 goroutine\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func server(workChan <-chan *Work) {\n\tfor work := range workChan {\n\t\tgo safelyDo(work)\n\t}\n}\n\nfunc safelyDo(work *Work) {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\tlog.Println("work failed:", err)\n\t\t}\n\t}()\n\tdo(work)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example, if do(work) panics, the result will be logged and the goroutine will exit cleanly without disturbing the others. There's no need to do anything else in the deferred closure; calling recover handles the condition completely."}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u6b64\u4f8b\u4e2d\uff0c\u82e5 do(work) \u89e6\u53d1\u4e86 Panic\uff0c\u5176\u7ed3\u679c\u5c31\u4f1a\u88ab\u8bb0\u5f55\uff0c \u800c\u8be5 Go \u7a0b\u4f1a\u88ab\u5e72\u51c0\u5229\u843d\u5730\u7ed3\u675f\uff0c\u4e0d\u4f1a\u5e72\u6270\u5230\u5176\u5b83 goroutine\u3002\u6211\u4eec\u65e0\u9700\u5728\u63a8\u8fdf\u7684\u95ed\u5305\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c recover \u4f1a\u5904\u7406\u597d\u8fd9\u4e00\u5207\u3002"}),"\n",(0,i.jsx)(n.p,{children:"Because recover always returns nil unless called directly from a deferred function, deferred code can call library routines that themselves use panic and recover without failing. As an example, the deferred function in safelyDo might call a logging function before calling recover, and that logging code would run unaffected by the panicking state."}),"\n",(0,i.jsx)(n.p,{children:"\u7531\u4e8e\u76f4\u63a5\u4ece\u88ab\u63a8\u8fdf\u51fd\u6570\u4e2d\u8c03\u7528 recover \u65f6\u4e0d\u4f1a\u8fd4\u56de nil\uff0c \u56e0\u6b64\u88ab\u63a8\u8fdf\u7684\u4ee3\u7801\u80fd\u591f\u8c03\u7528\u672c\u8eab\u4f7f\u7528\u4e86 panic \u548c recover \u7684\u5e93\u51fd\u6570\u800c\u4e0d\u4f1a\u5931\u8d25\u3002\u4f8b\u5982\u5728 safelyDo \u4e2d\uff0c\u88ab\u63a8\u8fdf\u7684\u51fd\u6570\u53ef\u80fd\u5728\u8c03\u7528 recover \u524d\u5148\u8c03\u7528\u8bb0\u5f55\u51fd\u6570\uff0c\u800c\u8be5\u8bb0\u5f55\u51fd\u6570\u5e94\u5f53\u4e0d\u53d7 Panic \u72b6\u6001\u7684\u4ee3\u7801\u7684\u5f71\u54cd\u3002"}),"\n",(0,i.jsx)(n.p,{children:"With our recovery pattern in place, the do function (and anything it calls) can get out of any bad situation cleanly by calling panic. We can use that idea to simplify error handling in complex software. Let's look at an idealized version of a regexp package, which reports parsing errors by calling panic with a local error type. Here's the definition of Error, an error method, and the Compile function."}),"\n",(0,i.jsx)(n.p,{children:"\u901a\u8fc7\u6070\u5f53\u5730\u4f7f\u7528\u6062\u590d\u6a21\u5f0f\uff0cdo \u51fd\u6570\uff08\u53ca\u5176\u8c03\u7528\u7684\u4efb\u4f55\u4ee3\u7801\uff09\u53ef\u901a\u8fc7\u8c03\u7528 panic \u6765\u907f\u514d\u66f4\u574f\u7684\u7ed3\u679c\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u79cd\u601d\u60f3\u6765\u7b80\u5316\u590d\u6742\u8f6f\u4ef6\u4e2d\u7684\u9519\u8bef\u5904\u7406\u3002 \u8ba9\u6211\u4eec\u770b\u770b regexp \u5305\u7684\u7406\u60f3\u5316\u7248\u672c\uff0c\u5b83\u4f1a\u4ee5\u5c40\u90e8\u7684\u9519\u8bef\u7c7b\u578b\u8c03\u7528 panic \u6765\u62a5\u544a\u89e3\u6790\u9519\u8bef\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a error \u7c7b\u578b\u7684 Error \u65b9\u6cd5\u548c\u4e00\u4e2a Compile \u51fd\u6570\u7684\u5b9a\u4e49\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Error is the type of a parse error; it satisfies the error interface.\ntype Error string\nfunc (e Error) Error() string {\n\treturn string(e)\n}\n\n// error is a method of *Regexp that reports parsing errors by\n// panicking with an Error.\nfunc (regexp *Regexp) error(err string) {\n\tpanic(Error(err))\n}\n\n// Compile returns a parsed representation of the regular expression.\nfunc Compile(str string) (regexp *Regexp, err error) {\n\tregexp = new(Regexp)\n\t// doParse will panic if there is a parse error.\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\tregexp = nil    // Clear return value.\n\t\t\terr = e.(Error) // Will re-panic if not a parse error.\n\t\t}\n\t}()\n\treturn regexp.doParse(str), nil\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Error \u662f\u89e3\u6790\u9519\u8bef\u7684\u7c7b\u578b\uff0c\u5b83\u6ee1\u8db3 error \u63a5\u53e3\u3002\ntype Error string\nfunc (e Error) Error() string {\n\treturn string(e)\n}\n\n// error \u662f *Regexp \u7684\u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7\u7528\u4e00\u4e2a Error \u89e6\u53d1 Panic \u6765\u62a5\u544a\u89e3\u6790\u9519\u8bef\u3002\nfunc (regexp *Regexp) error(err string) {\n\tpanic(Error(err))\n}\n\n// Compile \u8fd4\u56de\u8be5\u6b63\u5219\u8868\u8fbe\u5f0f\u89e3\u6790\u540e\u7684\u8868\u793a\u3002\nfunc Compile(str string) (regexp *Regexp, err error) {\n\tregexp = new(Regexp)\n\t// doParse will panic if there is a parse error.\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\tregexp = nil    // \u6e05\u7406\u8fd4\u56de\u503c\u3002\n\t\t\terr = e.(Error) // \u82e5\u5b83\u4e0d\u662f\u89e3\u6790\u9519\u8bef\uff0c\u5c06\u91cd\u65b0\u89e6\u53d1 Panic\u3002\n\t\t}\n\t}()\n\treturn regexp.doParse(str), nil\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If doParse panics, the recovery block will set the return value to nil\u2014deferred functions can modify named return values. It will then check, in the assignment to err, that the problem was a parse error by asserting that it has the local type Error. If it does not, the type assertion will fail, causing a run-time error that continues the stack unwinding as though nothing had interrupted it. This check means that if something unexpected happens, such as an index out of bounds, the code will fail even though we are using panic and recover to handle parse errors."}),"\n",(0,i.jsx)(n.p,{children:"\u82e5 doParse \u89e6\u53d1\u4e86 Panic\uff0c\u6062\u590d\u5757\u4f1a\u5c06\u8fd4\u56de\u503c\u8bbe\u4e3a nil \u2014\u88ab\u63a8\u8fdf\u7684\u51fd\u6570\u80fd\u591f\u4fee\u6539\u5df2\u547d\u540d\u7684\u8fd4\u56de\u503c\u3002\u5728 err \u7684\u8d4b\u503c\u8fc7\u7a0b\u4e2d\uff0c \u6211\u4eec\u5c06\u901a\u8fc7\u65ad\u8a00\u5b83\u662f\u5426\u62e5\u6709\u5c40\u90e8\u7c7b\u578b Error \u6765\u68c0\u67e5\u5b83\u3002\u82e5\u5b83\u6ca1\u6709\uff0c \u7c7b\u578b\u65ad\u8a00\u5c06\u4f1a\u5931\u8d25\uff0c\u6b64\u65f6\u4f1a\u4ea7\u751f\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u5e76\u7ee7\u7eed\u6808\u7684\u56de\u6eaf\uff0c\u4eff\u4f5b\u4e00\u5207\u4ece\u672a\u4e2d\u65ad\u8fc7\u4e00\u6837\u3002 \u8be5\u68c0\u67e5\u610f\u5473\u7740\u82e5\u53d1\u751f\u4e86\u4e00\u4e9b\u50cf\u7d22\u5f15\u8d8a\u754c\u4e4b\u7c7b\u7684\u610f\u5916\uff0c\u90a3\u4e48\u5373\u4fbf\u6211\u4eec\u4f7f\u7528\u4e86 panic \u548c recover \u6765\u5904\u7406\u89e3\u6790\u9519\u8bef\uff0c\u4ee3\u7801\u4ecd\u7136\u4f1a\u5931\u8d25\u3002"}),"\n",(0,i.jsx)(n.p,{children:"With error handling in place, the error method (because it's a method bound to a type, it's fine, even natural, for it to have the same name as the builtin error type) makes it easy to report parse errors without worrying about unwinding the parse stack by hand:"}),"\n",(0,i.jsx)(n.p,{children:"\u901a\u8fc7\u9002\u5f53\u7684\u9519\u8bef\u5904\u7406\uff0cerror \u65b9\u6cd5\uff08\u7531\u4e8e\u5b83\u662f\u4e2a\u7ed1\u5b9a\u5230\u5177\u4f53\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c \u56e0\u6b64\u5373\u4fbf\u5b83\u4e0e\u5185\u5efa\u7684 error \u7c7b\u578b\u540d\u5b57\u76f8\u540c\u4e5f\u6ca1\u6709\u5173\u7cfb\uff09 \u80fd\u8ba9\u62a5\u544a\u89e3\u6790\u9519\u8bef\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u800c\u65e0\u9700\u624b\u52a8\u5904\u7406\u56de\u6eaf\u7684\u89e3\u6790\u6808\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if pos == 0 {\n\tre.error(\"'*' illegal at start of expression\")\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Useful though this pattern is, it should be used only within a package. Parse turns its internal panic calls into error values; it does not expose panics to its client. That is a good rule to follow."}),"\n",(0,i.jsx)(n.p,{children:"\u5c3d\u7ba1\u8fd9\u79cd\u6a21\u5f0f\u5f88\u6709\u7528\uff0c\u4f46\u5b83\u5e94\u5f53\u4ec5\u5728\u5305\u5185\u4f7f\u7528\u3002Parse \u4f1a\u5c06\u5176\u5185\u90e8\u7684 panic \u8c03\u7528\u8f6c\u4e3a error \u503c\uff0c\u5b83\u5e76\u4e0d\u4f1a\u5411\u8c03\u7528\u8005\u66b4\u9732\u51fa panic\u3002\u8fd9\u662f\u4e2a\u503c\u5f97\u9075\u5b88\u7684\u826f\u597d\u89c4\u5219\u3002"}),"\n",(0,i.jsx)(n.p,{children:"By the way, this re-panic idiom changes the panic value if an actual error occurs. However, both the original and new failures will be presented in the crash report, so the root cause of the problem will still be visible. Thus this simple re-panic approach is usually sufficient\u2014it's a crash after all\u2014but if you want to display only the original value, you can write a little more code to filter unexpected problems and re-panic with the original error. That's left as an exercise for the reader."}),"\n",(0,i.jsx)(n.p,{children:"\u987a\u4fbf\u4e00\u63d0\uff0c\u8fd9\u79cd\u91cd\u65b0\u89e6\u53d1Panic\u7684\u60ef\u7528\u6cd5\u4f1a\u5728\u4ea7\u751f\u5b9e\u9645\u9519\u8bef\u65f6\u6539\u53d8Panic\u7684\u503c\u3002 \u7136\u800c\uff0c\u4e0d\u7ba1\u662f\u539f\u59cb\u7684\u8fd8\u662f\u65b0\u7684\u9519\u8bef\u90fd\u4f1a\u5728\u5d29\u6e83\u62a5\u544a\u4e2d\u663e\u793a\uff0c\u56e0\u6b64\u95ee\u9898\u7684\u6839\u6e90\u4ecd\u7136\u662f\u53ef\u89c1\u7684\u3002 \u8fd9\u79cd\u7b80\u5355\u7684\u91cd\u65b0\u89e6\u53d1Panic\u7684\u6a21\u578b\u5df2\u7ecf\u591f\u7528\u4e86\uff0c\u6bd5\u7adf\u4ed6\u53ea\u662f\u4e00\u6b21\u5d29\u6e83\u3002 \u4f46\u82e5\u4f60\u53ea\u60f3\u663e\u793a\u539f\u59cb\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u591a\u5199\u4e00\u70b9\u4ee3\u7801\u6765\u8fc7\u6ee4\u6389\u4e0d\u9700\u8981\u7684\u95ee\u9898\uff0c\u7136\u540e\u7528\u539f\u59cb\u503c\u518d\u6b21\u89e6\u53d1Panic\u3002 \u8fd9\u91cc\u5c31\u5c06\u8fd9\u4e2a\u7ec3\u4e60\u7559\u7ed9\u8bfb\u8005\u4e86\u3002"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"a-web-server",children:"A web server"}),"\n",(0,i.jsx)(n.h2,{id:"\u4e00\u4e2a-web-\u670d\u52a1\u5668",children:"\u4e00\u4e2a Web \u670d\u52a1\u5668"}),"\n",(0,i.jsxs)(n.p,{children:["Let's finish with a complete Go program, a web server. This one is actually a kind of web re-server. Google provides a service at ",(0,i.jsx)(n.a,{href:"http://chart.apis.google.com",children:"http://chart.apis.google.com"})," that does automatic formatting of data into charts and graphs. It's hard to use interactively, though, because you need to put the data into the URL as a query. The program here provides a nicer interface to one form of data: given a short piece of text, it calls on the chart server to produce a QR code, a matrix of boxes that encode the text. That image can be grabbed with your cell phone's camera and interpreted as, for instance, a URL, saving you typing the URL into the phone's tiny keyboard."]}),"\n",(0,i.jsxs)(n.p,{children:["\u8ba9\u6211\u4eec\u4ee5\u4e00\u4e2a\u5b8c\u6574\u7684 Go \u7a0b\u5e8f\u4f5c\u4e3a\u7ed3\u675f\u5427\uff0c\u4e00\u4e2a Web \u670d\u52a1\u5668\u3002\u8be5\u7a0b\u5e8f\u5176\u5b9e\u53ea\u662f\u4e2a Web \u670d\u52a1\u5668\u7684\u91cd\u7528\u3002 Google \u5728 ",(0,i.jsx)(n.a,{href:"http://chart.apis.google.com",children:"http://chart.apis.google.com"})," \u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c06\u8868\u5355\u6570\u636e\u81ea\u52a8\u8f6c\u6362\u4e3a\u56fe\u8868\u7684\u670d\u52a1\u3002\u4e0d\u8fc7\uff0c\u8be5\u670d\u52a1\u5f88\u96be\u4ea4\u4e92\uff0c \u56e0\u4e3a\u4f60\u9700\u8981\u5c06\u6570\u636e\u4f5c\u4e3a\u67e5\u8be2\u653e\u5230 URL \u4e2d\u3002\u6b64\u7a0b\u5e8f\u4e3a\u4e00\u79cd\u6570\u636e\u683c\u5f0f\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u7684\u63a5\u53e3\uff1a \u7ed9\u5b9a\u4e00\u5c0f\u6bb5\u6587\u672c\uff0c\u5b83\u5c06\u8c03\u7528\u56fe\u8868\u670d\u52a1\u5668\u6765\u751f\u6210\u4e8c\u7ef4\u7801\uff08QR \u7801\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u7f16\u7801\u6587\u672c\u7684\u70b9\u683c\u77e9\u9635\u3002 \u8be5\u56fe\u50cf\u53ef\u88ab\u4f60\u7684\u624b\u673a\u6444\u50cf\u5934\u6355\u83b7\uff0c\u5e76\u89e3\u91ca\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 URL\uff0c \u8fd9\u6837\u5c31\u514d\u53bb\u4e86\u4f60\u5728\u72ed\u5c0f\u7684\u624b\u673a\u952e\u76d8\u4e0a\u952e\u5165 URL \u7684\u9ebb\u70e6\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"Here's the complete program. An explanation follows."}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u4e3a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u968f\u540e\u6709\u4e00\u6bb5\u89e3\u91ca\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "flag"\n    "html/template"\n    "log"\n    "net/http"\n)\n\nvar addr = flag.String("addr", ":1718", "http service address") // Q=17, R=18\n\nvar templ = template.Must(template.New("qr").Parse(templateStr))\n\nfunc main() {\n    flag.Parse()\n    http.Handle("/", http.HandlerFunc(QR))\n    err := http.ListenAndServe(*addr, nil)\n    if err != nil {\n        log.Fatal("ListenAndServe:", err)\n    }\n}\n\nfunc QR(w http.ResponseWriter, req *http.Request) {\n    templ.Execute(w, req.FormValue("s"))\n}\n\nconst templateStr = `\n<html>\n<head>\n<title>QR Link Generator</title>\n</head>\n<body>\n{{if .}}\n<img src="http://chart.apis.google.com/chart?chs=300x300&cht=qr&choe=UTF-8&chl={{.}}" />\n<br>\n{{.}}\n<br>\n<br>\n{{end}}\n<form action="/" name=f method="GET"><input maxLength=1024 size=70\nname=s value="" title="Text to QR Encode"><input type=submit\nvalue="Show QR" name=qr>\n</form>\n</body>\n</html>\n`\n'})}),"\n",(0,i.jsx)(n.p,{children:"The pieces up to main should be easy to follow. The one flag sets a default HTTP port for our server. The template variable templ is where the fun happens. It builds an HTML template that will be executed by the server to display the page; more about that in a moment."}),"\n",(0,i.jsx)(n.p,{children:"main \u4e4b\u524d\u7684\u4ee3\u7801\u5e94\u8be5\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u6807\u5fd7\u4e3a\u670d\u52a1\u5668\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u7aef\u53e3\u3002 \u6a21\u677f\u53d8\u91cf templ \u6b63\u662f\u6709\u8da3\u7684\u5730\u65b9\u3002\u5b83\u6784\u5efa\u7684 HTML \u6a21\u7248\u5c06\u4f1a\u88ab\u670d\u52a1\u5668\u6267\u884c\u5e76\u663e\u793a\u5728\u9875\u9762\u4e2d\u3002 \u7a0d\u540e\u6211\u4eec\u5c06\u8be6\u7ec6\u8ba8\u8bba\u3002"}),"\n",(0,i.jsx)(n.p,{children:"The main function parses the flags and, using the mechanism we talked about above, binds the function QR to the root path for the server. Then http.ListenAndServe is called to start the server; it blocks while the server runs."}),"\n",(0,i.jsx)(n.p,{children:"main \u51fd\u6570\u89e3\u6790\u4e86\u53c2\u6570\u6807\u5fd7\u5e76\u4f7f\u7528\u6211\u4eec\u8ba8\u8bba\u8fc7\u7684\u673a\u5236\u5c06 QR \u51fd\u6570\u7ed1\u5b9a\u5230\u670d\u52a1\u5668\u7684\u6839\u8def\u5f84\u3002\u7136\u540e\u8c03\u7528 http.ListenAndServe \u542f\u52a8\u670d\u52a1\u5668\uff1b\u5b83\u5c06\u5728\u670d\u52a1\u5668\u8fd0\u884c\u65f6\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002"}),"\n",(0,i.jsx)(n.p,{children:"QR just receives the request, which contains form data, and executes the template on the data in the form value named s."}),"\n",(0,i.jsx)(n.p,{children:"QR \u4ec5\u63a5\u53d7\u5305\u542b\u8868\u5355\u6570\u636e\u7684\u8bf7\u6c42\uff0c\u5e76\u4e3a\u8868\u5355\u503c s \u4e2d\u7684\u6570\u636e\u6267\u884c\u6a21\u677f\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["The template package html/template is powerful; this program just touches on its capabilities. In essence, it rewrites a piece of HTML text on the fly by substituting elements derived from data items passed to templ.Execute, in this case the form value. Within the template text (templateStr), double-brace-delimited pieces denote template actions. The piece from ",(0,i.jsx)(n.code,{children:"{{if .}}"})," to ",(0,i.jsx)(n.code,{children:"{{end}} "}),"executes only if the value of the current data item, called . (dot), is non-empty. That is, when the string is empty, this piece of the template is suppressed."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6a21\u677f\u5305 html/template \u975e\u5e38\u5f3a\u5927\uff1b\u8be5\u7a0b\u5e8f\u53ea\u662f\u6d45\u5c1d\u8f84\u6b62\u3002 \u672c\u8d28\u4e0a\uff0c\u5b83\u901a\u8fc7\u5728\u8fd0\u884c\u65f6\u5c06\u6570\u636e\u9879\u4e2d\u63d0\u53d6\u7684\u5143\u7d20\uff08\u5728\u8fd9\u91cc\u662f\u8868\u5355\u503c\uff09\u4f20\u7ed9 templ.Execute \u6267\u884c\u56e0\u800c\u91cd\u5199\u4e86 HTML \u6587\u672c\u3002 \u5728\u6a21\u677f\u6587\u672c\uff08templateStr\uff09\u4e2d\uff0c\u53cc\u5927\u62ec\u53f7\u754c\u5b9a\u7684\u6587\u672c\u8868\u793a\u6a21\u677f\u7684\u52a8\u4f5c\u3002 \u4ece ",(0,i.jsx)(n.code,{children:"{{if .}}"})," \u5230 ",(0,i.jsx)(n.code,{children:"{{end}}"})," \u7684\u4ee3\u7801\u6bb5\u4ec5\u5728\u5f53\u524d\u6570\u636e\u9879\uff08\u8fd9\u91cc\u662f\u70b9 .\uff09\u7684\u503c\u975e\u7a7a\u65f6\u624d\u4f1a\u6267\u884c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3a\u7a7a\u65f6\uff0c\u6b64\u90e8\u5206\u6a21\u677f\u6bb5\u4f1a\u88ab\u5ffd\u7565\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["The two snippets ",(0,i.jsx)(n.code,{children:"{{.}}"})," say to show the data presented to the template\u2014the query string\u2014on the web page. The HTML template package automatically provides appropriate escaping so the text is safe to display."]}),"\n",(0,i.jsxs)(n.p,{children:["\u5176\u4e2d\u4e24\u6bb5 ",(0,i.jsx)(n.code,{children:"{{.}}"})," \u8868\u793a\u8981\u5c06\u6570\u636e\u663e\u793a\u5728\u6a21\u677f\u4e2d \uff08\u5373\u5c06\u67e5\u8be2\u5b57\u7b26\u4e32\u663e\u793a\u5728 Web \u9875\u9762\u4e0a\uff09\u3002HTML \u6a21\u677f\u5305\u5c06\u81ea\u52a8\u5bf9\u6587\u672c\u8fdb\u884c\u8f6c\u4e49\uff0c \u56e0\u6b64\u6587\u672c\u7684\u663e\u793a\u662f\u5b89\u5168\u7684\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["The rest of the template string is just the HTML to show when the page loads. If this is too quick an explanation, see the ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/html/template/",children:"documentation"})," for the template package for a more thorough discussion."]}),"\n",(0,i.jsxs)(n.p,{children:["\u4f59\u4e0b\u7684\u6a21\u677f\u5b57\u7b26\u4e32\u53ea\u662f\u9875\u9762\u52a0\u8f7d\u65f6\u5c06\u8981\u663e\u793a\u7684 HTML\u3002\u5982\u679c\u8fd9\u6bb5\u89e3\u91ca\u4f60\u65e0\u6cd5\u7406\u89e3\uff0c\u8bf7\u53c2\u8003 ",(0,i.jsx)(n.a,{href:"https://go-zh.org/pkg/html/template/",children:"\u6587\u6863"})," \u83b7\u5f97\u66f4\u591a\u6709\u5173\u6a21\u677f\u5305\u7684\u89e3\u91ca\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"And there you have it: a useful web server in a few lines of code plus some data-driven HTML text. Go is powerful enough to make a lot happen in a few lines."}),"\n",(0,i.jsx)(n.p,{children:"\u4f60\u7ec8\u4e8e\u5982\u613f\u4ee5\u507f\u4e86\uff1a\u4ee5\u51e0\u884c\u4ee3\u7801\u5b9e\u73b0\u7684\uff0c\u5305\u542b\u4e00\u4e9b\u6570\u636e\u9a71\u52a8\u7684HTML\u6587\u672c\u7684Web\u670d\u52a1\u5668\u3002 Go\u8bed\u8a00\u5f3a\u5927\u5230\u80fd\u8ba9\u5f88\u591a\u4e8b\u60c5\u4ee5\u77ed\u5c0f\u7cbe\u608d\u7684\u65b9\u5f0f\u89e3\u51b3\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u5b8c\u7ed3---"})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);